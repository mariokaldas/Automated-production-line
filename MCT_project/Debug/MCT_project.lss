
MCT_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ae0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ac  00800060  00004ae0  00004b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080020c  0080020c  00004d20  2**0
                  ALLOC
  3 .stab         00003e64  00000000  00000000  00004d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003b19  00000000  00000000  00008b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000c69d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000c85d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000ca71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000f083  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00010551  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001185c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00011a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00011d43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001275d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__vector_7>
      20:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__vector_8>
      24:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 31       	cpi	r26, 0x1C	; 28
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8b 24 	call	0x4916	; 0x4916 <main>
      8a:	0c 94 6e 25 	jmp	0x4adc	; 0x4adc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ea       	ldi	r26, 0xA5	; 165
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 24 	jmp	0x49fc	; 0x49fc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 24 	jmp	0x49fc	; 0x49fc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ea       	ldi	r24, 0xA5	; 165
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fa 24 	jmp	0x49f4	; 0x49f4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 ea       	ldi	r22, 0xA5	; 165
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 16 25 	jmp	0x4a2c	; 0x4a2c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fe 24 	jmp	0x49fc	; 0x49fc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fe 24 	jmp	0x49fc	; 0x49fc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fe 24 	jmp	0x49fc	; 0x49fc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fb 24 	jmp	0x49f6	; 0x49f6 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 02 25 	jmp	0x4a04	; 0x4a04 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 1e 25 	jmp	0x4a3c	; 0x4a3c <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 fa 24 	jmp	0x49f4	; 0x49f4 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 16 25 	jmp	0x4a2c	; 0x4a2c <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e3 55       	subi	r30, 0x53	; 83
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <GPIO_setupPinDirection+0x6>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <GPIO_setupPinDirection+0x8>
     ef2:	0f 92       	push	r0
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	89 83       	std	Y+1, r24	; 0x01
     efa:	6a 83       	std	Y+2, r22	; 0x02
     efc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	88 30       	cpi	r24, 0x08	; 8
     f02:	08 f0       	brcs	.+2      	; 0xf06 <GPIO_setupPinDirection+0x1c>
     f04:	d5 c0       	rjmp	.+426    	; 0x10b0 <GPIO_setupPinDirection+0x1c6>
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	84 30       	cpi	r24, 0x04	; 4
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_setupPinDirection+0x24>
     f0c:	d1 c0       	rjmp	.+418    	; 0x10b0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	3d 83       	std	Y+5, r19	; 0x05
     f16:	2c 83       	std	Y+4, r18	; 0x04
     f18:	8c 81       	ldd	r24, Y+4	; 0x04
     f1a:	9d 81       	ldd	r25, Y+5	; 0x05
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	91 05       	cpc	r25, r1
     f20:	09 f4       	brne	.+2      	; 0xf24 <GPIO_setupPinDirection+0x3a>
     f22:	43 c0       	rjmp	.+134    	; 0xfaa <GPIO_setupPinDirection+0xc0>
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	22 30       	cpi	r18, 0x02	; 2
     f2a:	31 05       	cpc	r19, r1
     f2c:	2c f4       	brge	.+10     	; 0xf38 <GPIO_setupPinDirection+0x4e>
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	9d 81       	ldd	r25, Y+5	; 0x05
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	71 f0       	breq	.+28     	; 0xf52 <GPIO_setupPinDirection+0x68>
     f36:	bc c0       	rjmp	.+376    	; 0x10b0 <GPIO_setupPinDirection+0x1c6>
     f38:	2c 81       	ldd	r18, Y+4	; 0x04
     f3a:	3d 81       	ldd	r19, Y+5	; 0x05
     f3c:	22 30       	cpi	r18, 0x02	; 2
     f3e:	31 05       	cpc	r19, r1
     f40:	09 f4       	brne	.+2      	; 0xf44 <GPIO_setupPinDirection+0x5a>
     f42:	5f c0       	rjmp	.+190    	; 0x1002 <GPIO_setupPinDirection+0x118>
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	9d 81       	ldd	r25, Y+5	; 0x05
     f48:	83 30       	cpi	r24, 0x03	; 3
     f4a:	91 05       	cpc	r25, r1
     f4c:	09 f4       	brne	.+2      	; 0xf50 <GPIO_setupPinDirection+0x66>
     f4e:	85 c0       	rjmp	.+266    	; 0x105a <GPIO_setupPinDirection+0x170>
     f50:	af c0       	rjmp	.+350    	; 0x10b0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	a1 f4       	brne	.+40     	; 0xf80 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f58:	aa e3       	ldi	r26, 0x3A	; 58
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	ea e3       	ldi	r30, 0x3A	; 58
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	48 2f       	mov	r20, r24
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 2e       	mov	r0, r18
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <GPIO_setupPinDirection+0x8c>
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	0a 94       	dec	r0
     f78:	e2 f7       	brpl	.-8      	; 0xf72 <GPIO_setupPinDirection+0x88>
     f7a:	84 2b       	or	r24, r20
     f7c:	8c 93       	st	X, r24
     f7e:	98 c0       	rjmp	.+304    	; 0x10b0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f80:	aa e3       	ldi	r26, 0x3A	; 58
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ea e3       	ldi	r30, 0x3A	; 58
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <GPIO_setupPinDirection+0xb4>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <GPIO_setupPinDirection+0xb0>
     fa2:	80 95       	com	r24
     fa4:	84 23       	and	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	83 c0       	rjmp	.+262    	; 0x10b0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	a1 f4       	brne	.+40     	; 0xfd8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     fb0:	a7 e3       	ldi	r26, 0x37	; 55
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	e7 e3       	ldi	r30, 0x37	; 55
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_setupPinDirection+0xe4>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_setupPinDirection+0xe0>
     fd2:	84 2b       	or	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	6c c0       	rjmp	.+216    	; 0x10b0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     fd8:	a7 e3       	ldi	r26, 0x37	; 55
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e7 e3       	ldi	r30, 0x37	; 55
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <GPIO_setupPinDirection+0x10c>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <GPIO_setupPinDirection+0x108>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	57 c0       	rjmp	.+174    	; 0x10b0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	a1 f4       	brne	.+40     	; 0x1030 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1008:	a4 e3       	ldi	r26, 0x34	; 52
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e4 e3       	ldi	r30, 0x34	; 52
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <GPIO_setupPinDirection+0x13c>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <GPIO_setupPinDirection+0x138>
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	40 c0       	rjmp	.+128    	; 0x10b0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1030:	a4 e3       	ldi	r26, 0x34	; 52
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e4 e3       	ldi	r30, 0x34	; 52
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_setupPinDirection+0x164>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_setupPinDirection+0x160>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	2b c0       	rjmp	.+86     	; 0x10b0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	a1 f4       	brne	.+40     	; 0x1088 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1060:	a1 e3       	ldi	r26, 0x31	; 49
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e1 e3       	ldi	r30, 0x31	; 49
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <GPIO_setupPinDirection+0x194>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <GPIO_setupPinDirection+0x190>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	14 c0       	rjmp	.+40     	; 0x10b0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1088:	a1 e3       	ldi	r26, 0x31	; 49
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e1 e3       	ldi	r30, 0x31	; 49
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <GPIO_setupPinDirection+0x1bc>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <GPIO_setupPinDirection+0x1b8>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <GPIO_writePin+0x6>
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <GPIO_writePin+0x8>
    10c8:	0f 92       	push	r0
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	89 83       	std	Y+1, r24	; 0x01
    10d0:	6a 83       	std	Y+2, r22	; 0x02
    10d2:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	88 30       	cpi	r24, 0x08	; 8
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <GPIO_writePin+0x1c>
    10da:	d5 c0       	rjmp	.+426    	; 0x1286 <GPIO_writePin+0x1c6>
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	84 30       	cpi	r24, 0x04	; 4
    10e0:	08 f0       	brcs	.+2      	; 0x10e4 <GPIO_writePin+0x24>
    10e2:	d1 c0       	rjmp	.+418    	; 0x1286 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else{
		switch(port_num){
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	3d 83       	std	Y+5, r19	; 0x05
    10ec:	2c 83       	std	Y+4, r18	; 0x04
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	9d 81       	ldd	r25, Y+5	; 0x05
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	91 05       	cpc	r25, r1
    10f6:	09 f4       	brne	.+2      	; 0x10fa <GPIO_writePin+0x3a>
    10f8:	43 c0       	rjmp	.+134    	; 0x1180 <GPIO_writePin+0xc0>
    10fa:	2c 81       	ldd	r18, Y+4	; 0x04
    10fc:	3d 81       	ldd	r19, Y+5	; 0x05
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	2c f4       	brge	.+10     	; 0x110e <GPIO_writePin+0x4e>
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	9d 81       	ldd	r25, Y+5	; 0x05
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	71 f0       	breq	.+28     	; 0x1128 <GPIO_writePin+0x68>
    110c:	bc c0       	rjmp	.+376    	; 0x1286 <GPIO_writePin+0x1c6>
    110e:	2c 81       	ldd	r18, Y+4	; 0x04
    1110:	3d 81       	ldd	r19, Y+5	; 0x05
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	09 f4       	brne	.+2      	; 0x111a <GPIO_writePin+0x5a>
    1118:	5f c0       	rjmp	.+190    	; 0x11d8 <GPIO_writePin+0x118>
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	9d 81       	ldd	r25, Y+5	; 0x05
    111e:	83 30       	cpi	r24, 0x03	; 3
    1120:	91 05       	cpc	r25, r1
    1122:	09 f4       	brne	.+2      	; 0x1126 <GPIO_writePin+0x66>
    1124:	85 c0       	rjmp	.+266    	; 0x1230 <GPIO_writePin+0x170>
    1126:	af c0       	rjmp	.+350    	; 0x1286 <GPIO_writePin+0x1c6>

		case PORTA_ID:
			if(value == HIGH){
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	a1 f4       	brne	.+40     	; 0x1156 <GPIO_writePin+0x96>
				SET_BIT(PORTA,pin_num);
    112e:	ab e3       	ldi	r26, 0x3B	; 59
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	eb e3       	ldi	r30, 0x3B	; 59
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <GPIO_writePin+0x8c>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <GPIO_writePin+0x88>
    1150:	84 2b       	or	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	98 c0       	rjmp	.+304    	; 0x1286 <GPIO_writePin+0x1c6>
			}
			else{
				CLEAR_BIT(PORTA,pin_num);
    1156:	ab e3       	ldi	r26, 0x3B	; 59
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	eb e3       	ldi	r30, 0x3B	; 59
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <GPIO_writePin+0xb4>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <GPIO_writePin+0xb0>
    1178:	80 95       	com	r24
    117a:	84 23       	and	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	83 c0       	rjmp	.+262    	; 0x1286 <GPIO_writePin+0x1c6>
			}
			break;

		case PORTB_ID:
			if(value == HIGH)
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	a1 f4       	brne	.+40     	; 0x11ae <GPIO_writePin+0xee>
				SET_BIT(PORTB,pin_num);
    1186:	a8 e3       	ldi	r26, 0x38	; 56
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e8 e3       	ldi	r30, 0x38	; 56
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <GPIO_writePin+0xe4>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <GPIO_writePin+0xe0>
    11a8:	84 2b       	or	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	6c c0       	rjmp	.+216    	; 0x1286 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTB,pin_num);
    11ae:	a8 e3       	ldi	r26, 0x38	; 56
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e8 e3       	ldi	r30, 0x38	; 56
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <GPIO_writePin+0x10c>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <GPIO_writePin+0x108>
    11d0:	80 95       	com	r24
    11d2:	84 23       	and	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	57 c0       	rjmp	.+174    	; 0x1286 <GPIO_writePin+0x1c6>
			break;

		case PORTC_ID:
			if(value == HIGH)
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	a1 f4       	brne	.+40     	; 0x1206 <GPIO_writePin+0x146>
				SET_BIT(PORTC,pin_num);
    11de:	a5 e3       	ldi	r26, 0x35	; 53
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e5 e3       	ldi	r30, 0x35	; 53
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <GPIO_writePin+0x13c>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <GPIO_writePin+0x138>
    1200:	84 2b       	or	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	40 c0       	rjmp	.+128    	; 0x1286 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTC,pin_num);
    1206:	a5 e3       	ldi	r26, 0x35	; 53
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e5 e3       	ldi	r30, 0x35	; 53
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <GPIO_writePin+0x164>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <GPIO_writePin+0x160>
    1228:	80 95       	com	r24
    122a:	84 23       	and	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	2b c0       	rjmp	.+86     	; 0x1286 <GPIO_writePin+0x1c6>
			break;

		case PORTD_ID:
			if(value == HIGH)
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	a1 f4       	brne	.+40     	; 0x125e <GPIO_writePin+0x19e>
				SET_BIT(PORTD,pin_num);
    1236:	a2 e3       	ldi	r26, 0x32	; 50
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e2 e3       	ldi	r30, 0x32	; 50
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <GPIO_writePin+0x194>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <GPIO_writePin+0x190>
    1258:	84 2b       	or	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	14 c0       	rjmp	.+40     	; 0x1286 <GPIO_writePin+0x1c6>
			else
				CLEAR_BIT(PORTD,pin_num);
    125e:	a2 e3       	ldi	r26, 0x32	; 50
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e2 e3       	ldi	r30, 0x32	; 50
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <GPIO_writePin+0x1bc>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <GPIO_writePin+0x1b8>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
			break;
		}
	}
}
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <GPIO_readPin+0x6>
    129c:	00 d0       	rcall	.+0      	; 0x129e <GPIO_readPin+0x8>
    129e:	0f 92       	push	r0
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	88 30       	cpi	r24, 0x08	; 8
    12ac:	18 f4       	brcc	.+6      	; 0x12b4 <GPIO_readPin+0x1e>
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	84 30       	cpi	r24, 0x04	; 4
    12b2:	10 f0       	brcs	.+4      	; 0x12b8 <GPIO_readPin+0x22>
	{
		return 0;
    12b4:	1d 82       	std	Y+5, r1	; 0x05
    12b6:	af c0       	rjmp	.+350    	; 0x1416 <GPIO_readPin+0x180>
	}

	switch(port_num){
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	3c 83       	std	Y+4, r19	; 0x04
    12c0:	2b 83       	std	Y+3, r18	; 0x03
    12c2:	4b 81       	ldd	r20, Y+3	; 0x03
    12c4:	5c 81       	ldd	r21, Y+4	; 0x04
    12c6:	41 30       	cpi	r20, 0x01	; 1
    12c8:	51 05       	cpc	r21, r1
    12ca:	d9 f1       	breq	.+118    	; 0x1342 <GPIO_readPin+0xac>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	82 30       	cpi	r24, 0x02	; 2
    12d2:	91 05       	cpc	r25, r1
    12d4:	34 f4       	brge	.+12     	; 0x12e2 <GPIO_readPin+0x4c>
    12d6:	2b 81       	ldd	r18, Y+3	; 0x03
    12d8:	3c 81       	ldd	r19, Y+4	; 0x04
    12da:	21 15       	cp	r18, r1
    12dc:	31 05       	cpc	r19, r1
    12de:	71 f0       	breq	.+28     	; 0x12fc <GPIO_readPin+0x66>
    12e0:	99 c0       	rjmp	.+306    	; 0x1414 <GPIO_readPin+0x17e>
    12e2:	4b 81       	ldd	r20, Y+3	; 0x03
    12e4:	5c 81       	ldd	r21, Y+4	; 0x04
    12e6:	42 30       	cpi	r20, 0x02	; 2
    12e8:	51 05       	cpc	r21, r1
    12ea:	09 f4       	brne	.+2      	; 0x12ee <GPIO_readPin+0x58>
    12ec:	4d c0       	rjmp	.+154    	; 0x1388 <GPIO_readPin+0xf2>
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	9c 81       	ldd	r25, Y+4	; 0x04
    12f2:	83 30       	cpi	r24, 0x03	; 3
    12f4:	91 05       	cpc	r25, r1
    12f6:	09 f4       	brne	.+2      	; 0x12fa <GPIO_readPin+0x64>
    12f8:	6a c0       	rjmp	.+212    	; 0x13ce <GPIO_readPin+0x138>
    12fa:	8c c0       	rjmp	.+280    	; 0x1414 <GPIO_readPin+0x17e>

	case PORTA_ID:
		if(GET_BIT(PINA,pin_num))
    12fc:	e9 e3       	ldi	r30, 0x39	; 57
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <GPIO_readPin+0x80>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	2a 95       	dec	r18
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <GPIO_readPin+0x7c>
    131a:	9a 01       	movw	r18, r20
    131c:	28 23       	and	r18, r24
    131e:	39 23       	and	r19, r25
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	a9 01       	movw	r20, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <GPIO_readPin+0x98>
    132a:	55 95       	asr	r21
    132c:	47 95       	ror	r20
    132e:	8a 95       	dec	r24
    1330:	e2 f7       	brpl	.-8      	; 0x132a <GPIO_readPin+0x94>
    1332:	ca 01       	movw	r24, r20
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	19 f0       	breq	.+6      	; 0x133e <GPIO_readPin+0xa8>
			return 1;
    1338:	51 e0       	ldi	r21, 0x01	; 1
    133a:	5d 83       	std	Y+5, r21	; 0x05
    133c:	6c c0       	rjmp	.+216    	; 0x1416 <GPIO_readPin+0x180>
		else
			return 0;
    133e:	1d 82       	std	Y+5, r1	; 0x05
    1340:	6a c0       	rjmp	.+212    	; 0x1416 <GPIO_readPin+0x180>
		break;

	case PORTB_ID:
		if(GET_BIT(PINB,pin_num))
    1342:	e6 e3       	ldi	r30, 0x36	; 54
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 c0       	rjmp	.+4      	; 0x135c <GPIO_readPin+0xc6>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	2a 95       	dec	r18
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <GPIO_readPin+0xc2>
    1360:	9a 01       	movw	r18, r20
    1362:	28 23       	and	r18, r24
    1364:	39 23       	and	r19, r25
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	88 2f       	mov	r24, r24
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a9 01       	movw	r20, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <GPIO_readPin+0xde>
    1370:	55 95       	asr	r21
    1372:	47 95       	ror	r20
    1374:	8a 95       	dec	r24
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <GPIO_readPin+0xda>
    1378:	ca 01       	movw	r24, r20
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	19 f0       	breq	.+6      	; 0x1384 <GPIO_readPin+0xee>
			return 1;
    137e:	51 e0       	ldi	r21, 0x01	; 1
    1380:	5d 83       	std	Y+5, r21	; 0x05
    1382:	49 c0       	rjmp	.+146    	; 0x1416 <GPIO_readPin+0x180>
		else
			return 0;
    1384:	1d 82       	std	Y+5, r1	; 0x05
    1386:	47 c0       	rjmp	.+142    	; 0x1416 <GPIO_readPin+0x180>
		break;

	case PORTC_ID:
		if(GET_BIT(PINC,pin_num))
    1388:	e3 e3       	ldi	r30, 0x33	; 51
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <GPIO_readPin+0x10c>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	2a 95       	dec	r18
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <GPIO_readPin+0x108>
    13a6:	9a 01       	movw	r18, r20
    13a8:	28 23       	and	r18, r24
    13aa:	39 23       	and	r19, r25
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	88 2f       	mov	r24, r24
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	a9 01       	movw	r20, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <GPIO_readPin+0x124>
    13b6:	55 95       	asr	r21
    13b8:	47 95       	ror	r20
    13ba:	8a 95       	dec	r24
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <GPIO_readPin+0x120>
    13be:	ca 01       	movw	r24, r20
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	19 f0       	breq	.+6      	; 0x13ca <GPIO_readPin+0x134>
			return 1;
    13c4:	51 e0       	ldi	r21, 0x01	; 1
    13c6:	5d 83       	std	Y+5, r21	; 0x05
    13c8:	26 c0       	rjmp	.+76     	; 0x1416 <GPIO_readPin+0x180>
		else
			return 0;
    13ca:	1d 82       	std	Y+5, r1	; 0x05
    13cc:	24 c0       	rjmp	.+72     	; 0x1416 <GPIO_readPin+0x180>
		break;

	case PORTD_ID:
		if(GET_BIT(PIND,pin_num))
    13ce:	e0 e3       	ldi	r30, 0x30	; 48
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <GPIO_readPin+0x152>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	2a 95       	dec	r18
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <GPIO_readPin+0x14e>
    13ec:	9a 01       	movw	r18, r20
    13ee:	28 23       	and	r18, r24
    13f0:	39 23       	and	r19, r25
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	a9 01       	movw	r20, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <GPIO_readPin+0x16a>
    13fc:	55 95       	asr	r21
    13fe:	47 95       	ror	r20
    1400:	8a 95       	dec	r24
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <GPIO_readPin+0x166>
    1404:	ca 01       	movw	r24, r20
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	19 f0       	breq	.+6      	; 0x1410 <GPIO_readPin+0x17a>
			return 1;
    140a:	51 e0       	ldi	r21, 0x01	; 1
    140c:	5d 83       	std	Y+5, r21	; 0x05
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <GPIO_readPin+0x180>
		else
			return 0;
    1410:	1d 82       	std	Y+5, r1	; 0x05
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <GPIO_readPin+0x180>
		break;
	}
	return 0;
    1414:	1d 82       	std	Y+5, r1	; 0x05
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <GPIO_setupPortDirection+0x6>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <GPIO_setupPortDirection+0x8>
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	90 f5       	brcc	.+100    	; 0x14a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	3c 83       	std	Y+4, r19	; 0x04
    1446:	2b 83       	std	Y+3, r18	; 0x03
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	91 05       	cpc	r25, r1
    1450:	d1 f0       	breq	.+52     	; 0x1486 <GPIO_setupPortDirection+0x5e>
    1452:	2b 81       	ldd	r18, Y+3	; 0x03
    1454:	3c 81       	ldd	r19, Y+4	; 0x04
    1456:	22 30       	cpi	r18, 0x02	; 2
    1458:	31 05       	cpc	r19, r1
    145a:	2c f4       	brge	.+10     	; 0x1466 <GPIO_setupPortDirection+0x3e>
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	9c 81       	ldd	r25, Y+4	; 0x04
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	61 f0       	breq	.+24     	; 0x147c <GPIO_setupPortDirection+0x54>
    1464:	1e c0       	rjmp	.+60     	; 0x14a2 <GPIO_setupPortDirection+0x7a>
    1466:	2b 81       	ldd	r18, Y+3	; 0x03
    1468:	3c 81       	ldd	r19, Y+4	; 0x04
    146a:	22 30       	cpi	r18, 0x02	; 2
    146c:	31 05       	cpc	r19, r1
    146e:	81 f0       	breq	.+32     	; 0x1490 <GPIO_setupPortDirection+0x68>
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	9c 81       	ldd	r25, Y+4	; 0x04
    1474:	83 30       	cpi	r24, 0x03	; 3
    1476:	91 05       	cpc	r25, r1
    1478:	81 f0       	breq	.+32     	; 0x149a <GPIO_setupPortDirection+0x72>
    147a:	13 c0       	rjmp	.+38     	; 0x14a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    147c:	ea e3       	ldi	r30, 0x3A	; 58
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	80 83       	st	Z, r24
    1484:	0e c0       	rjmp	.+28     	; 0x14a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1486:	e7 e3       	ldi	r30, 0x37	; 55
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	80 83       	st	Z, r24
    148e:	09 c0       	rjmp	.+18     	; 0x14a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1490:	e4 e3       	ldi	r30, 0x34	; 52
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	80 83       	st	Z, r24
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    149a:	e1 e3       	ldi	r30, 0x31	; 49
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <GPIO_writePort+0x6>
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <GPIO_writePort+0x8>
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
	{
		/* Do Nothing */
	}

	switch(port_num){
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	3c 83       	std	Y+4, r19	; 0x04
    14c8:	2b 83       	std	Y+3, r18	; 0x03
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	91 05       	cpc	r25, r1
    14d2:	d1 f0       	breq	.+52     	; 0x1508 <GPIO_writePort+0x58>
    14d4:	2b 81       	ldd	r18, Y+3	; 0x03
    14d6:	3c 81       	ldd	r19, Y+4	; 0x04
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 05       	cpc	r19, r1
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <GPIO_writePort+0x38>
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	9c 81       	ldd	r25, Y+4	; 0x04
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	61 f0       	breq	.+24     	; 0x14fe <GPIO_writePort+0x4e>
    14e6:	1e c0       	rjmp	.+60     	; 0x1524 <GPIO_writePort+0x74>
    14e8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ea:	3c 81       	ldd	r19, Y+4	; 0x04
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	81 f0       	breq	.+32     	; 0x1512 <GPIO_writePort+0x62>
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	91 05       	cpc	r25, r1
    14fa:	81 f0       	breq	.+32     	; 0x151c <GPIO_writePort+0x6c>
    14fc:	13 c0       	rjmp	.+38     	; 0x1524 <GPIO_writePort+0x74>

	case PORTA_ID:
		PORTA = value;
    14fe:	eb e3       	ldi	r30, 0x3B	; 59
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	80 83       	st	Z, r24
    1506:	0e c0       	rjmp	.+28     	; 0x1524 <GPIO_writePort+0x74>
		break;
	case PORTB_ID:
		PORTB = value;
    1508:	e8 e3       	ldi	r30, 0x38	; 56
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	80 83       	st	Z, r24
    1510:	09 c0       	rjmp	.+18     	; 0x1524 <GPIO_writePort+0x74>
		break;
	case PORTC_ID:
		PORTC = value;
    1512:	e5 e3       	ldi	r30, 0x35	; 53
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	80 83       	st	Z, r24
    151a:	04 c0       	rjmp	.+8      	; 0x1524 <GPIO_writePort+0x74>
		break;
	case PORTD_ID:
		PORTD = value;
    151c:	e2 e3       	ldi	r30, 0x32	; 50
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	80 83       	st	Z, r24
		break;
	}
}
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	cf 91       	pop	r28
    152e:	df 91       	pop	r29
    1530:	08 95       	ret

00001532 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	00 d0       	rcall	.+0      	; 0x1538 <GPIO_readPort+0x6>
    1538:	00 d0       	rcall	.+0      	; 0x153a <GPIO_readPort+0x8>
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	84 30       	cpi	r24, 0x04	; 4
    1544:	10 f0       	brcs	.+4      	; 0x154a <GPIO_readPort+0x18>
	{
		return 0;
    1546:	1c 82       	std	Y+4, r1	; 0x04
    1548:	34 c0       	rjmp	.+104    	; 0x15b2 <GPIO_readPort+0x80>
	}

	switch(port_num){
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	3b 83       	std	Y+3, r19	; 0x03
    1552:	2a 83       	std	Y+2, r18	; 0x02
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	9b 81       	ldd	r25, Y+3	; 0x03
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	91 05       	cpc	r25, r1
    155c:	d1 f0       	breq	.+52     	; 0x1592 <GPIO_readPort+0x60>
    155e:	2a 81       	ldd	r18, Y+2	; 0x02
    1560:	3b 81       	ldd	r19, Y+3	; 0x03
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	2c f4       	brge	.+10     	; 0x1572 <GPIO_readPort+0x40>
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	9b 81       	ldd	r25, Y+3	; 0x03
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	61 f0       	breq	.+24     	; 0x1588 <GPIO_readPort+0x56>
    1570:	1f c0       	rjmp	.+62     	; 0x15b0 <GPIO_readPort+0x7e>
    1572:	2a 81       	ldd	r18, Y+2	; 0x02
    1574:	3b 81       	ldd	r19, Y+3	; 0x03
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 05       	cpc	r19, r1
    157a:	81 f0       	breq	.+32     	; 0x159c <GPIO_readPort+0x6a>
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	9b 81       	ldd	r25, Y+3	; 0x03
    1580:	83 30       	cpi	r24, 0x03	; 3
    1582:	91 05       	cpc	r25, r1
    1584:	81 f0       	breq	.+32     	; 0x15a6 <GPIO_readPort+0x74>
    1586:	14 c0       	rjmp	.+40     	; 0x15b0 <GPIO_readPort+0x7e>

	case PORTA_ID:
		return PINA;
    1588:	e9 e3       	ldi	r30, 0x39	; 57
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	90 81       	ld	r25, Z
    158e:	9c 83       	std	Y+4, r25	; 0x04
    1590:	10 c0       	rjmp	.+32     	; 0x15b2 <GPIO_readPort+0x80>
		break;
	case PORTB_ID:
		return PINB;
    1592:	e6 e3       	ldi	r30, 0x36	; 54
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	20 81       	ld	r18, Z
    1598:	2c 83       	std	Y+4, r18	; 0x04
    159a:	0b c0       	rjmp	.+22     	; 0x15b2 <GPIO_readPort+0x80>
		break;
	case PORTC_ID:
		return PINC;
    159c:	e3 e3       	ldi	r30, 0x33	; 51
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	30 81       	ld	r19, Z
    15a2:	3c 83       	std	Y+4, r19	; 0x04
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <GPIO_readPort+0x80>
		break;
	case PORTD_ID:
		return PIND;
    15a6:	e0 e3       	ldi	r30, 0x30	; 48
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8c 83       	std	Y+4, r24	; 0x04
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <GPIO_readPort+0x80>
		break;
	}
	return 0;
    15b0:	1c 82       	std	Y+4, r1	; 0x04
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <__vector_9>:

/****************************************************************************
 *                        INTERRUPT SERVICE ROUTINE
 ****************************************************************************/

ISR(TIMER1_OVF_vect){
    15c2:	1f 92       	push	r1
    15c4:	0f 92       	push	r0
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	0f 92       	push	r0
    15ca:	11 24       	eor	r1, r1
    15cc:	2f 93       	push	r18
    15ce:	3f 93       	push	r19
    15d0:	4f 93       	push	r20
    15d2:	5f 93       	push	r21
    15d4:	6f 93       	push	r22
    15d6:	7f 93       	push	r23
    15d8:	8f 93       	push	r24
    15da:	9f 93       	push	r25
    15dc:	af 93       	push	r26
    15de:	bf 93       	push	r27
    15e0:	ef 93       	push	r30
    15e2:	ff 93       	push	r31
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
	(*g_callBackptr)();
    15ec:	e0 91 0c 02 	lds	r30, 0x020C
    15f0:	f0 91 0d 02 	lds	r31, 0x020D
    15f4:	09 95       	icall
}
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	ff 91       	pop	r31
    15fc:	ef 91       	pop	r30
    15fe:	bf 91       	pop	r27
    1600:	af 91       	pop	r26
    1602:	9f 91       	pop	r25
    1604:	8f 91       	pop	r24
    1606:	7f 91       	pop	r23
    1608:	6f 91       	pop	r22
    160a:	5f 91       	pop	r21
    160c:	4f 91       	pop	r20
    160e:	3f 91       	pop	r19
    1610:	2f 91       	pop	r18
    1612:	0f 90       	pop	r0
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	0f 90       	pop	r0
    1618:	1f 90       	pop	r1
    161a:	18 95       	reti

0000161c <__vector_7>:

ISR(TIMER1_COMPA_vect){
    161c:	1f 92       	push	r1
    161e:	0f 92       	push	r0
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	0f 92       	push	r0
    1624:	11 24       	eor	r1, r1
    1626:	2f 93       	push	r18
    1628:	3f 93       	push	r19
    162a:	4f 93       	push	r20
    162c:	5f 93       	push	r21
    162e:	6f 93       	push	r22
    1630:	7f 93       	push	r23
    1632:	8f 93       	push	r24
    1634:	9f 93       	push	r25
    1636:	af 93       	push	r26
    1638:	bf 93       	push	r27
    163a:	ef 93       	push	r30
    163c:	ff 93       	push	r31
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
	(*g_callBackptr)();
    1646:	e0 91 0c 02 	lds	r30, 0x020C
    164a:	f0 91 0d 02 	lds	r31, 0x020D
    164e:	09 95       	icall
}
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	ff 91       	pop	r31
    1656:	ef 91       	pop	r30
    1658:	bf 91       	pop	r27
    165a:	af 91       	pop	r26
    165c:	9f 91       	pop	r25
    165e:	8f 91       	pop	r24
    1660:	7f 91       	pop	r23
    1662:	6f 91       	pop	r22
    1664:	5f 91       	pop	r21
    1666:	4f 91       	pop	r20
    1668:	3f 91       	pop	r19
    166a:	2f 91       	pop	r18
    166c:	0f 90       	pop	r0
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	0f 90       	pop	r0
    1672:	1f 90       	pop	r1
    1674:	18 95       	reti

00001676 <__vector_8>:

ISR(TIMER1_COMPB_vect){}
    1676:	1f 92       	push	r1
    1678:	0f 92       	push	r0
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	0f 92       	push	r0
    167e:	11 24       	eor	r1, r1
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	0f 90       	pop	r0
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	0f 90       	pop	r0
    1692:	1f 90       	pop	r1
    1694:	18 95       	reti

00001696 <TIMER1_init>:

/****************************************************************************
 *                         Functions definition
 ****************************************************************************/

void TIMER1_init(TIMER1_configType* configurations){
    1696:	ef 92       	push	r14
    1698:	ff 92       	push	r15
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	28 97       	sbiw	r28, 0x08	; 8
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	f8 94       	cli
    16ac:	de bf       	out	0x3e, r29	; 62
    16ae:	0f be       	out	0x3f, r0	; 63
    16b0:	cd bf       	out	0x3d, r28	; 61
    16b2:	9e 83       	std	Y+6, r25	; 0x06
    16b4:	8d 83       	std	Y+5, r24	; 0x05

	uint16 dutyCycle_A,dutyCycle_B;

	switch(configurations->mode){
    16b6:	ed 81       	ldd	r30, Y+5	; 0x05
    16b8:	fe 81       	ldd	r31, Y+6	; 0x06
    16ba:	80 81       	ld	r24, Z
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	38 87       	std	Y+8, r19	; 0x08
    16c2:	2f 83       	std	Y+7, r18	; 0x07
    16c4:	8f 81       	ldd	r24, Y+7	; 0x07
    16c6:	98 85       	ldd	r25, Y+8	; 0x08
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	91 05       	cpc	r25, r1
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <TIMER1_init+0x3a>
    16ce:	45 c0       	rjmp	.+138    	; 0x175a <TIMER1_init+0xc4>
    16d0:	2f 81       	ldd	r18, Y+7	; 0x07
    16d2:	38 85       	ldd	r19, Y+8	; 0x08
    16d4:	22 30       	cpi	r18, 0x02	; 2
    16d6:	31 05       	cpc	r19, r1
    16d8:	2c f4       	brge	.+10     	; 0x16e4 <TIMER1_init+0x4e>
    16da:	8f 81       	ldd	r24, Y+7	; 0x07
    16dc:	98 85       	ldd	r25, Y+8	; 0x08
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	71 f0       	breq	.+28     	; 0x16fe <TIMER1_init+0x68>
    16e2:	7a c1       	rjmp	.+756    	; 0x19d8 <TIMER1_init+0x342>
    16e4:	2f 81       	ldd	r18, Y+7	; 0x07
    16e6:	38 85       	ldd	r19, Y+8	; 0x08
    16e8:	22 30       	cpi	r18, 0x02	; 2
    16ea:	31 05       	cpc	r19, r1
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <TIMER1_init+0x5a>
    16ee:	71 c0       	rjmp	.+226    	; 0x17d2 <TIMER1_init+0x13c>
    16f0:	8f 81       	ldd	r24, Y+7	; 0x07
    16f2:	98 85       	ldd	r25, Y+8	; 0x08
    16f4:	83 30       	cpi	r24, 0x03	; 3
    16f6:	91 05       	cpc	r25, r1
    16f8:	09 f4       	brne	.+2      	; 0x16fc <TIMER1_init+0x66>
    16fa:	cf c0       	rjmp	.+414    	; 0x189a <TIMER1_init+0x204>
    16fc:	6d c1       	rjmp	.+730    	; 0x19d8 <TIMER1_init+0x342>

	case NORMAL:
		TCCR1A_R.bit.COM1A_bit = 0; /* Normal (non-PWM) */
    16fe:	ef e4       	ldi	r30, 0x4F	; 79
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	8f 73       	andi	r24, 0x3F	; 63
    1706:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 0; /* Normal (non-PWM) */
    1708:	ef e4       	ldi	r30, 0x4F	; 79
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8f 7c       	andi	r24, 0xCF	; 207
    1710:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 1; /* non-PWM */
    1712:	ef e4       	ldi	r30, 0x4F	; 79
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	88 60       	ori	r24, 0x08	; 8
    171a:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 1; /* non-PWM */
    171c:	ef e4       	ldi	r30, 0x4F	; 79
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	84 60       	ori	r24, 0x04	; 4
    1724:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 0; /* Overflow mode */
    1726:	ef e4       	ldi	r30, 0x4F	; 79
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	8e 7f       	andi	r24, 0xFE	; 254
    172e:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 0; /* Overflow mode */
    1730:	ef e4       	ldi	r30, 0x4F	; 79
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	8d 7f       	andi	r24, 0xFD	; 253
    1738:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 0; /* Overflow mode */
    173a:	ee e4       	ldi	r30, 0x4E	; 78
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	87 7f       	andi	r24, 0xF7	; 247
    1742:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 0; /* Overflow mode */
    1744:	ee e4       	ldi	r30, 0x4E	; 78
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	8f 7e       	andi	r24, 0xEF	; 239
    174c:	80 83       	st	Z, r24
		TIMSK_R.bit.TOIE1_bit = 1;  /* Enable interrupt for overflow mode */
    174e:	e9 e5       	ldi	r30, 0x59	; 89
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	84 60       	ori	r24, 0x04	; 4
    1756:	80 83       	st	Z, r24
    1758:	3f c1       	rjmp	.+638    	; 0x19d8 <TIMER1_init+0x342>
		break;

	case COMPARE:
		TCCR1A_R.bit.COM1A_bit = 0; /* Normal (non-PWM) */
    175a:	ef e4       	ldi	r30, 0x4F	; 79
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	8f 73       	andi	r24, 0x3F	; 63
    1762:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 0; /* Normal (non-PWM) */
    1764:	ef e4       	ldi	r30, 0x4F	; 79
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	8f 7c       	andi	r24, 0xCF	; 207
    176c:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 1; /* non-PWM */
    176e:	ef e4       	ldi	r30, 0x4F	; 79
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	88 60       	ori	r24, 0x08	; 8
    1776:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 1; /* non-PWM */
    1778:	ef e4       	ldi	r30, 0x4F	; 79
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	84 60       	ori	r24, 0x04	; 4
    1780:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 0; /* Compare mode */
    1782:	ef e4       	ldi	r30, 0x4F	; 79
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	8e 7f       	andi	r24, 0xFE	; 254
    178a:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 0; /* Compare mode */
    178c:	ef e4       	ldi	r30, 0x4F	; 79
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	8d 7f       	andi	r24, 0xFD	; 253
    1794:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 1; /* Compare mode */
    1796:	ee e4       	ldi	r30, 0x4E	; 78
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	88 60       	ori	r24, 0x08	; 8
    179e:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 0; /* Compare mode */
    17a0:	ee e4       	ldi	r30, 0x4E	; 78
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	8f 7e       	andi	r24, 0xEF	; 239
    17a8:	80 83       	st	Z, r24
		TIMSK_R.bit.OCIE1A_bit = 1; /* Enable interrupt for compare mode unit A */
    17aa:	e9 e5       	ldi	r30, 0x59	; 89
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	80 61       	ori	r24, 0x10	; 16
    17b2:	80 83       	st	Z, r24
		TIMSK_R.bit.OCIE1B_bit = 1; /* Enable interrupt for compare mode unit B */
    17b4:	e9 e5       	ldi	r30, 0x59	; 89
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	88 60       	ori	r24, 0x08	; 8
    17bc:	80 83       	st	Z, r24

		OCR1A_R = configurations->compare_value; /* Adjusting compare value */
    17be:	aa e4       	ldi	r26, 0x4A	; 74
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	ed 81       	ldd	r30, Y+5	; 0x05
    17c4:	fe 81       	ldd	r31, Y+6	; 0x06
    17c6:	84 81       	ldd	r24, Z+4	; 0x04
    17c8:	95 81       	ldd	r25, Z+5	; 0x05
    17ca:	11 96       	adiw	r26, 0x01	; 1
    17cc:	9c 93       	st	X, r25
    17ce:	8e 93       	st	-X, r24
    17d0:	03 c1       	rjmp	.+518    	; 0x19d8 <TIMER1_init+0x342>
		break;

	case PWM_B:

		DDRD_R.bit.DDRD4_bit = 1; /* PD4 output pin UNITB */
    17d2:	e1 e3       	ldi	r30, 0x31	; 49
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	80 61       	ori	r24, 0x10	; 16
    17da:	80 83       	st	Z, r24

		TCCR1A_R.bit.COM1A_bit = 2;  /* PWM non-inverting mode */
    17dc:	ef e4       	ldi	r30, 0x4F	; 79
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	8f 73       	andi	r24, 0x3F	; 63
    17e4:	80 68       	ori	r24, 0x80	; 128
    17e6:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 2;  /* PWM non-inverting mode */
    17e8:	ef e4       	ldi	r30, 0x4F	; 79
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	8f 7c       	andi	r24, 0xCF	; 207
    17f0:	80 62       	ori	r24, 0x20	; 32
    17f2:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 0; /* PWM */
    17f4:	ef e4       	ldi	r30, 0x4F	; 79
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	87 7f       	andi	r24, 0xF7	; 247
    17fc:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 0; /* PWM */
    17fe:	ef e4       	ldi	r30, 0x4F	; 79
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	8b 7f       	andi	r24, 0xFB	; 251
    1806:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 1; /* PWM mode TOP = OCR1A */
    1808:	ef e4       	ldi	r30, 0x4F	; 79
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	81 60       	ori	r24, 0x01	; 1
    1810:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 1; /* PWM mode */
    1812:	ef e4       	ldi	r30, 0x4F	; 79
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	82 60       	ori	r24, 0x02	; 2
    181a:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 1; /* PWM mode */
    181c:	ee e4       	ldi	r30, 0x4E	; 78
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	88 60       	ori	r24, 0x08	; 8
    1824:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 1; /* PWM mode */
    1826:	ee e4       	ldi	r30, 0x4E	; 78
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	80 61       	ori	r24, 0x10	; 16
    182e:	80 83       	st	Z, r24

		OCR1A_R = configurations->compare_value;
    1830:	aa e4       	ldi	r26, 0x4A	; 74
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	ed 81       	ldd	r30, Y+5	; 0x05
    1836:	fe 81       	ldd	r31, Y+6	; 0x06
    1838:	84 81       	ldd	r24, Z+4	; 0x04
    183a:	95 81       	ldd	r25, Z+5	; 0x05
    183c:	11 96       	adiw	r26, 0x01	; 1
    183e:	9c 93       	st	X, r25
    1840:	8e 93       	st	-X, r24
		dutyCycle_B = (uint16)(((uint32)(configurations->UNITB_dutyCycle)*OCR1A_R)/100);
    1842:	ed 81       	ldd	r30, Y+5	; 0x05
    1844:	fe 81       	ldd	r31, Y+6	; 0x06
    1846:	82 85       	ldd	r24, Z+10	; 0x0a
    1848:	93 85       	ldd	r25, Z+11	; 0x0b
    184a:	a4 85       	ldd	r26, Z+12	; 0x0c
    184c:	b5 85       	ldd	r27, Z+13	; 0x0d
    184e:	bc 01       	movw	r22, r24
    1850:	cd 01       	movw	r24, r26
    1852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1856:	7b 01       	movw	r14, r22
    1858:	8c 01       	movw	r16, r24
    185a:	ea e4       	ldi	r30, 0x4A	; 74
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	9c 01       	movw	r18, r24
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	50 e0       	ldi	r21, 0x00	; 0
    1868:	c8 01       	movw	r24, r16
    186a:	b7 01       	movw	r22, r14
    186c:	0e 94 b1 24 	call	0x4962	; 0x4962 <__mulsi3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	24 e6       	ldi	r18, 0x64	; 100
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e0       	ldi	r20, 0x00	; 0
    187a:	50 e0       	ldi	r21, 0x00	; 0
    187c:	bc 01       	movw	r22, r24
    187e:	cd 01       	movw	r24, r26
    1880:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <__udivmodsi4>
    1884:	da 01       	movw	r26, r20
    1886:	c9 01       	movw	r24, r18
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01

		OCR1B_R = dutyCycle_B; /* Adjusting duty cycle for PWM unit B */
    188c:	e8 e4       	ldi	r30, 0x48	; 72
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	91 83       	std	Z+1, r25	; 0x01
    1896:	80 83       	st	Z, r24
    1898:	9f c0       	rjmp	.+318    	; 0x19d8 <TIMER1_init+0x342>
		break;

	case PWM_AB:

		DDRD_R.bit.DDRD4_bit = 1; /* PD4 output pin UNITB */
    189a:	e1 e3       	ldi	r30, 0x31	; 49
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	80 61       	ori	r24, 0x10	; 16
    18a2:	80 83       	st	Z, r24
		DDRD_R.bit.DDRD5_bit = 1; /* PD4 output pin UNITA */
    18a4:	e1 e3       	ldi	r30, 0x31	; 49
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	80 62       	ori	r24, 0x20	; 32
    18ac:	80 83       	st	Z, r24

		TCCR1A_R.bit.COM1A_bit = 2;  /* PWM non-inverting mode */
    18ae:	ef e4       	ldi	r30, 0x4F	; 79
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	8f 73       	andi	r24, 0x3F	; 63
    18b6:	80 68       	ori	r24, 0x80	; 128
    18b8:	80 83       	st	Z, r24
		TCCR1A_R.bit.COM1B_bit = 2;  /* PWM non-inverting mode */
    18ba:	ef e4       	ldi	r30, 0x4F	; 79
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	8f 7c       	andi	r24, 0xCF	; 207
    18c2:	80 62       	ori	r24, 0x20	; 32
    18c4:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1A_bit = 0; /* PWM */
    18c6:	ef e4       	ldi	r30, 0x4F	; 79
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	87 7f       	andi	r24, 0xF7	; 247
    18ce:	80 83       	st	Z, r24
		TCCR1A_R.bit.FOC1B_bit = 0; /* PWM */
    18d0:	ef e4       	ldi	r30, 0x4F	; 79
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	8b 7f       	andi	r24, 0xFB	; 251
    18d8:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM10_bit = 0; /* PWM mode TOP = ICR1 */
    18da:	ef e4       	ldi	r30, 0x4F	; 79
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	8e 7f       	andi	r24, 0xFE	; 254
    18e2:	80 83       	st	Z, r24
		TCCR1A_R.bit.WGM11_bit = 1; /* PWM mode */
    18e4:	ef e4       	ldi	r30, 0x4F	; 79
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	82 60       	ori	r24, 0x02	; 2
    18ec:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM12_bit = 1; /* PWM mode */
    18ee:	ee e4       	ldi	r30, 0x4E	; 78
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	88 60       	ori	r24, 0x08	; 8
    18f6:	80 83       	st	Z, r24
		TCCR1B_R.bit.WGM13_bit = 1; /* PWM mode */
    18f8:	ee e4       	ldi	r30, 0x4E	; 78
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	80 61       	ori	r24, 0x10	; 16
    1900:	80 83       	st	Z, r24

		ICR1_R = configurations->compare_value; /* Adjusting TOP value for PWM unit A and B */
    1902:	a6 e4       	ldi	r26, 0x46	; 70
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	ed 81       	ldd	r30, Y+5	; 0x05
    1908:	fe 81       	ldd	r31, Y+6	; 0x06
    190a:	84 81       	ldd	r24, Z+4	; 0x04
    190c:	95 81       	ldd	r25, Z+5	; 0x05
    190e:	11 96       	adiw	r26, 0x01	; 1
    1910:	9c 93       	st	X, r25
    1912:	8e 93       	st	-X, r24
		dutyCycle_A = (uint16)(((float32)(configurations->UNITA_dutyCycle)*ICR1_R)/100);
    1914:	ed 81       	ldd	r30, Y+5	; 0x05
    1916:	fe 81       	ldd	r31, Y+6	; 0x06
    1918:	e6 80       	ldd	r14, Z+6	; 0x06
    191a:	f7 80       	ldd	r15, Z+7	; 0x07
    191c:	00 85       	ldd	r16, Z+8	; 0x08
    191e:	11 85       	ldd	r17, Z+9	; 0x09
    1920:	e6 e4       	ldi	r30, 0x46	; 70
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	91 81       	ldd	r25, Z+1	; 0x01
    1928:	cc 01       	movw	r24, r24
    192a:	a0 e0       	ldi	r26, 0x00	; 0
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	bc 01       	movw	r22, r24
    1930:	cd 01       	movw	r24, r26
    1932:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1936:	9b 01       	movw	r18, r22
    1938:	ac 01       	movw	r20, r24
    193a:	c8 01       	movw	r24, r16
    193c:	b7 01       	movw	r22, r14
    193e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	48 ec       	ldi	r20, 0xC8	; 200
    1950:	52 e4       	ldi	r21, 0x42	; 66
    1952:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	bc 01       	movw	r22, r24
    195c:	cd 01       	movw	r24, r26
    195e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	9c 83       	std	Y+4, r25	; 0x04
    1968:	8b 83       	std	Y+3, r24	; 0x03
		dutyCycle_B = (uint16)(((float32)(configurations->UNITB_dutyCycle)*ICR1_R)/100);
    196a:	ed 81       	ldd	r30, Y+5	; 0x05
    196c:	fe 81       	ldd	r31, Y+6	; 0x06
    196e:	e2 84       	ldd	r14, Z+10	; 0x0a
    1970:	f3 84       	ldd	r15, Z+11	; 0x0b
    1972:	04 85       	ldd	r16, Z+12	; 0x0c
    1974:	15 85       	ldd	r17, Z+13	; 0x0d
    1976:	e6 e4       	ldi	r30, 0x46	; 70
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	91 81       	ldd	r25, Z+1	; 0x01
    197e:	cc 01       	movw	r24, r24
    1980:	a0 e0       	ldi	r26, 0x00	; 0
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    198c:	9b 01       	movw	r18, r22
    198e:	ac 01       	movw	r20, r24
    1990:	c8 01       	movw	r24, r16
    1992:	b7 01       	movw	r22, r14
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	bc 01       	movw	r22, r24
    199e:	cd 01       	movw	r24, r26
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	48 ec       	ldi	r20, 0xC8	; 200
    19a6:	52 e4       	ldi	r21, 0x42	; 66
    19a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	bc 01       	movw	r22, r24
    19b2:	cd 01       	movw	r24, r26
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9a 83       	std	Y+2, r25	; 0x02
    19be:	89 83       	std	Y+1, r24	; 0x01

		OCR1A_R = dutyCycle_A; /* Adjusting duty cycle for PWM unit A */
    19c0:	ea e4       	ldi	r30, 0x4A	; 74
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	9c 81       	ldd	r25, Y+4	; 0x04
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24
		OCR1B_R = dutyCycle_B; /* Adjusting duty cycle for PWM unit B */
    19cc:	e8 e4       	ldi	r30, 0x48	; 72
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	91 83       	std	Z+1, r25	; 0x01
    19d6:	80 83       	st	Z, r24
		break;
	}

	/* Adjusting the pre-scaler */
	TCCR1B_R.bit.CS1_bit = configurations->prescaler;
    19d8:	ae e4       	ldi	r26, 0x4E	; 78
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	ed 81       	ldd	r30, Y+5	; 0x05
    19de:	fe 81       	ldd	r31, Y+6	; 0x06
    19e0:	81 81       	ldd	r24, Z+1	; 0x01
    19e2:	87 70       	andi	r24, 0x07	; 7
    19e4:	98 2f       	mov	r25, r24
    19e6:	97 70       	andi	r25, 0x07	; 7
    19e8:	8c 91       	ld	r24, X
    19ea:	88 7f       	andi	r24, 0xF8	; 248
    19ec:	89 2b       	or	r24, r25
    19ee:	8c 93       	st	X, r24

	/* Adjusting initial value */
	TCNT1_R = configurations->initial_value;
    19f0:	ac e4       	ldi	r26, 0x4C	; 76
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	ed 81       	ldd	r30, Y+5	; 0x05
    19f6:	fe 81       	ldd	r31, Y+6	; 0x06
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	11 96       	adiw	r26, 0x01	; 1
    19fe:	9c 93       	st	X, r25
    1a00:	8e 93       	st	-X, r24
}
    1a02:	28 96       	adiw	r28, 0x08	; 8
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	ff 90       	pop	r15
    1a18:	ef 90       	pop	r14
    1a1a:	08 95       	ret

00001a1c <TIMER1_deInit>:


void TIMER1_deInit(void){
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62

	/* No clock source ( disable timer1 ) */
	TCCR1B_R.bit.CS1_bit = 0;
    1a24:	ee e4       	ldi	r30, 0x4E	; 78
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	88 7f       	andi	r24, 0xF8	; 248
    1a2c:	80 83       	st	Z, r24
}
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <TIMER1_setCallBack>:


void TIMER1_setCallBack(volatile void(*ptr)(void)){
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <TIMER1_setCallBack+0x6>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	9a 83       	std	Y+2, r25	; 0x02
    1a40:	89 83       	std	Y+1, r24	; 0x01

	g_callBackptr = ptr;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	9a 81       	ldd	r25, Y+2	; 0x02
    1a46:	90 93 0d 02 	sts	0x020D, r25
    1a4a:	80 93 0c 02 	sts	0x020C, r24
}
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <IR_init>:


/***************************************************************************
 *                          Functions definition
 *************************************************************************** */
void IR_init(uint8 IR_num){
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	0f 92       	push	r0
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	89 83       	std	Y+1, r24	; 0x01

	GPIO_setupPinDirection(IR_PORT,IR_num,PIN_INPUT);
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	69 81       	ldd	r22, Y+1	; 0x01
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	0e 94 75 07 	call	0xeea	; 0xeea <GPIO_setupPinDirection>
}
    1a6e:	0f 90       	pop	r0
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <IR_getReading>:

uint8 IR_getReading(uint8 IR_num){
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	0f 92       	push	r0
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	89 83       	std	Y+1, r24	; 0x01

	return GPIO_readPin(IR_PORT,IR_num);
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	69 81       	ldd	r22, Y+1	; 0x01
    1a86:	0e 94 4b 09 	call	0x1296	; 0x1296 <GPIO_readPin>
}
    1a8a:	0f 90       	pop	r0
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <LCD_sendCommand>:
/***************************************************************************
 *                            Function definition
 * ***************************************************************************/


void LCD_sendCommand(uint8 command){
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	c3 56       	subi	r28, 0x63	; 99
    1aa0:	d0 40       	sbci	r29, 0x00	; 0
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	fe 01       	movw	r30, r28
    1aae:	ed 59       	subi	r30, 0x9D	; 157
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	80 83       	st	Z, r24

	GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,LOW);
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	61 e0       	ldi	r22, 0x01	; 1
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e1 5a       	subi	r30, 0xA1	; 161
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a0 e8       	ldi	r26, 0x80	; 128
    1aca:	bf e3       	ldi	r27, 0x3F	; 63
    1acc:	80 83       	st	Z, r24
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	a2 83       	std	Z+2, r26	; 0x02
    1ad2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad4:	8e 01       	movw	r16, r28
    1ad6:	05 5a       	subi	r16, 0xA5	; 165
    1ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    1ada:	fe 01       	movw	r30, r28
    1adc:	e1 5a       	subi	r30, 0xA1	; 161
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	60 81       	ld	r22, Z
    1ae2:	71 81       	ldd	r23, Z+1	; 0x01
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	4a e7       	ldi	r20, 0x7A	; 122
    1aee:	55 e4       	ldi	r21, 0x45	; 69
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	f8 01       	movw	r30, r16
    1afa:	80 83       	st	Z, r24
    1afc:	91 83       	std	Z+1, r25	; 0x01
    1afe:	a2 83       	std	Z+2, r26	; 0x02
    1b00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b02:	fe 01       	movw	r30, r28
    1b04:	e5 5a       	subi	r30, 0xA5	; 165
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	60 81       	ld	r22, Z
    1b0a:	71 81       	ldd	r23, Z+1	; 0x01
    1b0c:	82 81       	ldd	r24, Z+2	; 0x02
    1b0e:	93 81       	ldd	r25, Z+3	; 0x03
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e8       	ldi	r20, 0x80	; 128
    1b16:	5f e3       	ldi	r21, 0x3F	; 63
    1b18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b1c:	88 23       	and	r24, r24
    1b1e:	44 f4       	brge	.+16     	; 0x1b30 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1b20:	fe 01       	movw	r30, r28
    1b22:	e7 5a       	subi	r30, 0xA7	; 167
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	80 83       	st	Z, r24
    1b2e:	64 c0       	rjmp	.+200    	; 0x1bf8 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1b30:	fe 01       	movw	r30, r28
    1b32:	e5 5a       	subi	r30, 0xA5	; 165
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	60 81       	ld	r22, Z
    1b38:	71 81       	ldd	r23, Z+1	; 0x01
    1b3a:	82 81       	ldd	r24, Z+2	; 0x02
    1b3c:	93 81       	ldd	r25, Z+3	; 0x03
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	57 e4       	ldi	r21, 0x47	; 71
    1b46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	0c f0       	brlt	.+2      	; 0x1b50 <LCD_sendCommand+0xbe>
    1b4e:	43 c0       	rjmp	.+134    	; 0x1bd6 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b50:	fe 01       	movw	r30, r28
    1b52:	e1 5a       	subi	r30, 0xA1	; 161
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	60 81       	ld	r22, Z
    1b58:	71 81       	ldd	r23, Z+1	; 0x01
    1b5a:	82 81       	ldd	r24, Z+2	; 0x02
    1b5c:	93 81       	ldd	r25, Z+3	; 0x03
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e2       	ldi	r20, 0x20	; 32
    1b64:	51 e4       	ldi	r21, 0x41	; 65
    1b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	8e 01       	movw	r16, r28
    1b70:	07 5a       	subi	r16, 0xA7	; 167
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
    1b74:	bc 01       	movw	r22, r24
    1b76:	cd 01       	movw	r24, r26
    1b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	f8 01       	movw	r30, r16
    1b82:	91 83       	std	Z+1, r25	; 0x01
    1b84:	80 83       	st	Z, r24
    1b86:	1f c0       	rjmp	.+62     	; 0x1bc6 <LCD_sendCommand+0x134>
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e9 5a       	subi	r30, 0xA9	; 169
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	80 e9       	ldi	r24, 0x90	; 144
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b96:	fe 01       	movw	r30, r28
    1b98:	e9 5a       	subi	r30, 0xA9	; 169
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	80 81       	ld	r24, Z
    1b9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <LCD_sendCommand+0x10e>
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e9 5a       	subi	r30, 0xA9	; 169
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	91 83       	std	Z+1, r25	; 0x01
    1bac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bae:	de 01       	movw	r26, r28
    1bb0:	a7 5a       	subi	r26, 0xA7	; 167
    1bb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e7 5a       	subi	r30, 0xA7	; 167
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	80 81       	ld	r24, Z
    1bbc:	91 81       	ldd	r25, Z+1	; 0x01
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	11 96       	adiw	r26, 0x01	; 1
    1bc2:	9c 93       	st	X, r25
    1bc4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e7 5a       	subi	r30, 0xA7	; 167
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	80 81       	ld	r24, Z
    1bce:	91 81       	ldd	r25, Z+1	; 0x01
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	d1 f6       	brne	.-76     	; 0x1b88 <LCD_sendCommand+0xf6>
    1bd4:	27 c0       	rjmp	.+78     	; 0x1c24 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd6:	8e 01       	movw	r16, r28
    1bd8:	07 5a       	subi	r16, 0xA7	; 167
    1bda:	1f 4f       	sbci	r17, 0xFF	; 255
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e5 5a       	subi	r30, 0xA5	; 165
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	60 81       	ld	r22, Z
    1be4:	71 81       	ldd	r23, Z+1	; 0x01
    1be6:	82 81       	ldd	r24, Z+2	; 0x02
    1be8:	93 81       	ldd	r25, Z+3	; 0x03
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	91 83       	std	Z+1, r25	; 0x01
    1bf6:	80 83       	st	Z, r24
    1bf8:	de 01       	movw	r26, r28
    1bfa:	ab 5a       	subi	r26, 0xAB	; 171
    1bfc:	bf 4f       	sbci	r27, 0xFF	; 255
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e7 5a       	subi	r30, 0xA7	; 167
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	80 81       	ld	r24, Z
    1c06:	91 81       	ldd	r25, Z+1	; 0x01
    1c08:	8d 93       	st	X+, r24
    1c0a:	9c 93       	st	X, r25
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	eb 5a       	subi	r30, 0xAB	; 171
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	80 81       	ld	r24, Z
    1c14:	91 81       	ldd	r25, Z+1	; 0x01
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <LCD_sendCommand+0x184>
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	eb 5a       	subi	r30, 0xAB	; 171
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	91 83       	std	Z+1, r25	; 0x01
    1c22:	80 83       	st	Z, r24
	_delay_ms(1); /* 50ns      in all delays us will only work in simulation but won't in AVR due to bad hardware  */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,HIGH);
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	62 e0       	ldi	r22, 0x02	; 2
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    1c2e:	fe 01       	movw	r30, r28
    1c30:	ef 5a       	subi	r30, 0xAF	; 175
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	a0 e8       	ldi	r26, 0x80	; 128
    1c3a:	bf e3       	ldi	r27, 0x3F	; 63
    1c3c:	80 83       	st	Z, r24
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	a2 83       	std	Z+2, r26	; 0x02
    1c42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c44:	8e 01       	movw	r16, r28
    1c46:	03 5b       	subi	r16, 0xB3	; 179
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	ef 5a       	subi	r30, 0xAF	; 175
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4a e7       	ldi	r20, 0x7A	; 122
    1c5e:	55 e4       	ldi	r21, 0x45	; 69
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	f8 01       	movw	r30, r16
    1c6a:	80 83       	st	Z, r24
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	a2 83       	std	Z+2, r26	; 0x02
    1c70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c72:	fe 01       	movw	r30, r28
    1c74:	e3 5b       	subi	r30, 0xB3	; 179
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e8       	ldi	r20, 0x80	; 128
    1c86:	5f e3       	ldi	r21, 0x3F	; 63
    1c88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c8c:	88 23       	and	r24, r24
    1c8e:	44 f4       	brge	.+16     	; 0x1ca0 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1c90:	fe 01       	movw	r30, r28
    1c92:	e5 5b       	subi	r30, 0xB5	; 181
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
    1c9e:	64 c0       	rjmp	.+200    	; 0x1d68 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	e3 5b       	subi	r30, 0xB3	; 179
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	60 81       	ld	r22, Z
    1ca8:	71 81       	ldd	r23, Z+1	; 0x01
    1caa:	82 81       	ldd	r24, Z+2	; 0x02
    1cac:	93 81       	ldd	r25, Z+3	; 0x03
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	3f ef       	ldi	r19, 0xFF	; 255
    1cb2:	4f e7       	ldi	r20, 0x7F	; 127
    1cb4:	57 e4       	ldi	r21, 0x47	; 71
    1cb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cba:	18 16       	cp	r1, r24
    1cbc:	0c f0       	brlt	.+2      	; 0x1cc0 <LCD_sendCommand+0x22e>
    1cbe:	43 c0       	rjmp	.+134    	; 0x1d46 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	ef 5a       	subi	r30, 0xAF	; 175
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	60 81       	ld	r22, Z
    1cc8:	71 81       	ldd	r23, Z+1	; 0x01
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	93 81       	ldd	r25, Z+3	; 0x03
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e2       	ldi	r20, 0x20	; 32
    1cd4:	51 e4       	ldi	r21, 0x41	; 65
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8e 01       	movw	r16, r28
    1ce0:	05 5b       	subi	r16, 0xB5	; 181
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	bc 01       	movw	r22, r24
    1ce6:	cd 01       	movw	r24, r26
    1ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	80 83       	st	Z, r24
    1cf6:	1f c0       	rjmp	.+62     	; 0x1d36 <LCD_sendCommand+0x2a4>
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	e7 5b       	subi	r30, 0xB7	; 183
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	80 e9       	ldi	r24, 0x90	; 144
    1d00:	91 e0       	ldi	r25, 0x01	; 1
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
    1d06:	fe 01       	movw	r30, r28
    1d08:	e7 5b       	subi	r30, 0xB7	; 183
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <LCD_sendCommand+0x27e>
    1d14:	fe 01       	movw	r30, r28
    1d16:	e7 5b       	subi	r30, 0xB7	; 183
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	91 83       	std	Z+1, r25	; 0x01
    1d1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1e:	de 01       	movw	r26, r28
    1d20:	a5 5b       	subi	r26, 0xB5	; 181
    1d22:	bf 4f       	sbci	r27, 0xFF	; 255
    1d24:	fe 01       	movw	r30, r28
    1d26:	e5 5b       	subi	r30, 0xB5	; 181
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	80 81       	ld	r24, Z
    1d2c:	91 81       	ldd	r25, Z+1	; 0x01
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	11 96       	adiw	r26, 0x01	; 1
    1d32:	9c 93       	st	X, r25
    1d34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d36:	fe 01       	movw	r30, r28
    1d38:	e5 5b       	subi	r30, 0xB5	; 181
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	91 81       	ldd	r25, Z+1	; 0x01
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	d1 f6       	brne	.-76     	; 0x1cf8 <LCD_sendCommand+0x266>
    1d44:	27 c0       	rjmp	.+78     	; 0x1d94 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d46:	8e 01       	movw	r16, r28
    1d48:	05 5b       	subi	r16, 0xB5	; 181
    1d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e3 5b       	subi	r30, 0xB3	; 179
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	60 81       	ld	r22, Z
    1d54:	71 81       	ldd	r23, Z+1	; 0x01
    1d56:	82 81       	ldd	r24, Z+2	; 0x02
    1d58:	93 81       	ldd	r25, Z+3	; 0x03
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	f8 01       	movw	r30, r16
    1d64:	91 83       	std	Z+1, r25	; 0x01
    1d66:	80 83       	st	Z, r24
    1d68:	de 01       	movw	r26, r28
    1d6a:	a9 5b       	subi	r26, 0xB9	; 185
    1d6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e5 5b       	subi	r30, 0xB5	; 181
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 81       	ld	r24, Z
    1d76:	91 81       	ldd	r25, Z+1	; 0x01
    1d78:	8d 93       	st	X+, r24
    1d7a:	9c 93       	st	X, r25
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e9 5b       	subi	r30, 0xB9	; 185
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <LCD_sendCommand+0x2f4>
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e9 5b       	subi	r30, 0xB9	; 185
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	80 83       	st	Z, r24
	_delay_ms(1); /* 290-200 = 190ns */

#if(LCD_DATA_BIT_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4,GET_BIT(command,4));
    1d94:	fe 01       	movw	r30, r28
    1d96:	ed 59       	subi	r30, 0x9D	; 157
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	88 2f       	mov	r24, r24
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	80 71       	andi	r24, 0x10	; 16
    1da2:	90 70       	andi	r25, 0x00	; 0
    1da4:	95 95       	asr	r25
    1da6:	87 95       	ror	r24
    1da8:	95 95       	asr	r25
    1daa:	87 95       	ror	r24
    1dac:	95 95       	asr	r25
    1dae:	87 95       	ror	r24
    1db0:	95 95       	asr	r25
    1db2:	87 95       	ror	r24
    1db4:	98 2f       	mov	r25, r24
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	63 e0       	ldi	r22, 0x03	; 3
    1dba:	49 2f       	mov	r20, r25
    1dbc:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5,GET_BIT(command,5));
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	ed 59       	subi	r30, 0x9D	; 157
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	80 81       	ld	r24, Z
    1dc8:	88 2f       	mov	r24, r24
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	80 72       	andi	r24, 0x20	; 32
    1dce:	90 70       	andi	r25, 0x00	; 0
    1dd0:	95 95       	asr	r25
    1dd2:	87 95       	ror	r24
    1dd4:	95 95       	asr	r25
    1dd6:	87 95       	ror	r24
    1dd8:	95 95       	asr	r25
    1dda:	87 95       	ror	r24
    1ddc:	95 95       	asr	r25
    1dde:	87 95       	ror	r24
    1de0:	95 95       	asr	r25
    1de2:	87 95       	ror	r24
    1de4:	98 2f       	mov	r25, r24
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	64 e0       	ldi	r22, 0x04	; 4
    1dea:	49 2f       	mov	r20, r25
    1dec:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6,GET_BIT(command,6));
    1df0:	fe 01       	movw	r30, r28
    1df2:	ed 59       	subi	r30, 0x9D	; 157
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	80 81       	ld	r24, Z
    1df8:	88 2f       	mov	r24, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	80 74       	andi	r24, 0x40	; 64
    1dfe:	90 70       	andi	r25, 0x00	; 0
    1e00:	08 2e       	mov	r0, r24
    1e02:	89 2f       	mov	r24, r25
    1e04:	00 0c       	add	r0, r0
    1e06:	88 1f       	adc	r24, r24
    1e08:	99 0b       	sbc	r25, r25
    1e0a:	00 0c       	add	r0, r0
    1e0c:	88 1f       	adc	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	98 2f       	mov	r25, r24
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	65 e0       	ldi	r22, 0x05	; 5
    1e16:	49 2f       	mov	r20, r25
    1e18:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7,GET_BIT(command,7));
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	ed 59       	subi	r30, 0x9D	; 157
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	80 81       	ld	r24, Z
    1e24:	98 2f       	mov	r25, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	99 27       	eor	r25, r25
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	66 e0       	ldi	r22, 0x06	; 6
    1e30:	49 2f       	mov	r20, r25
    1e32:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    1e36:	fe 01       	movw	r30, r28
    1e38:	ed 5b       	subi	r30, 0xBD	; 189
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a0 e8       	ldi	r26, 0x80	; 128
    1e42:	bf e3       	ldi	r27, 0x3F	; 63
    1e44:	80 83       	st	Z, r24
    1e46:	91 83       	std	Z+1, r25	; 0x01
    1e48:	a2 83       	std	Z+2, r26	; 0x02
    1e4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4c:	8e 01       	movw	r16, r28
    1e4e:	01 5c       	subi	r16, 0xC1	; 193
    1e50:	1f 4f       	sbci	r17, 0xFF	; 255
    1e52:	fe 01       	movw	r30, r28
    1e54:	ed 5b       	subi	r30, 0xBD	; 189
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	60 81       	ld	r22, Z
    1e5a:	71 81       	ldd	r23, Z+1	; 0x01
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	93 81       	ldd	r25, Z+3	; 0x03
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	4a e7       	ldi	r20, 0x7A	; 122
    1e66:	55 e4       	ldi	r21, 0x45	; 69
    1e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	f8 01       	movw	r30, r16
    1e72:	80 83       	st	Z, r24
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	a2 83       	std	Z+2, r26	; 0x02
    1e78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ff 96       	adiw	r30, 0x3f	; 63
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e8       	ldi	r20, 0x80	; 128
    1e8c:	5f e3       	ldi	r21, 0x3F	; 63
    1e8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e92:	88 23       	and	r24, r24
    1e94:	2c f4       	brge	.+10     	; 0x1ea0 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9e af       	std	Y+62, r25	; 0x3e
    1e9c:	8d af       	std	Y+61, r24	; 0x3d
    1e9e:	46 c0       	rjmp	.+140    	; 0x1f2c <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	ff 96       	adiw	r30, 0x3f	; 63
    1ea4:	60 81       	ld	r22, Z
    1ea6:	71 81       	ldd	r23, Z+1	; 0x01
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	93 81       	ldd	r25, Z+3	; 0x03
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	3f ef       	ldi	r19, 0xFF	; 255
    1eb0:	4f e7       	ldi	r20, 0x7F	; 127
    1eb2:	57 e4       	ldi	r21, 0x47	; 71
    1eb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eb8:	18 16       	cp	r1, r24
    1eba:	64 f5       	brge	.+88     	; 0x1f14 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	ed 5b       	subi	r30, 0xBD	; 189
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	60 81       	ld	r22, Z
    1ec4:	71 81       	ldd	r23, Z+1	; 0x01
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e2       	ldi	r20, 0x20	; 32
    1ed0:	51 e4       	ldi	r21, 0x41	; 65
    1ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	9e af       	std	Y+62, r25	; 0x3e
    1ee8:	8d af       	std	Y+61, r24	; 0x3d
    1eea:	0f c0       	rjmp	.+30     	; 0x1f0a <LCD_sendCommand+0x478>
    1eec:	80 e9       	ldi	r24, 0x90	; 144
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	9c af       	std	Y+60, r25	; 0x3c
    1ef2:	8b af       	std	Y+59, r24	; 0x3b
    1ef4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ef6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <LCD_sendCommand+0x466>
    1efc:	9c af       	std	Y+60, r25	; 0x3c
    1efe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f00:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f02:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	9e af       	std	Y+62, r25	; 0x3e
    1f08:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	69 f7       	brne	.-38     	; 0x1eec <LCD_sendCommand+0x45a>
    1f12:	16 c0       	rjmp	.+44     	; 0x1f40 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f14:	fe 01       	movw	r30, r28
    1f16:	ff 96       	adiw	r30, 0x3f	; 63
    1f18:	60 81       	ld	r22, Z
    1f1a:	71 81       	ldd	r23, Z+1	; 0x01
    1f1c:	82 81       	ldd	r24, Z+2	; 0x02
    1f1e:	93 81       	ldd	r25, Z+3	; 0x03
    1f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9e af       	std	Y+62, r25	; 0x3e
    1f2a:	8d af       	std	Y+61, r24	; 0x3d
    1f2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f30:	9a af       	std	Y+58, r25	; 0x3a
    1f32:	89 af       	std	Y+57, r24	; 0x39
    1f34:	89 ad       	ldd	r24, Y+57	; 0x39
    1f36:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_sendCommand+0x4a6>
    1f3c:	9a af       	std	Y+58, r25	; 0x3a
    1f3e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* 100ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	62 e0       	ldi	r22, 0x02	; 2
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a0 e8       	ldi	r26, 0x80	; 128
    1f50:	bf e3       	ldi	r27, 0x3F	; 63
    1f52:	8d ab       	std	Y+53, r24	; 0x35
    1f54:	9e ab       	std	Y+54, r25	; 0x36
    1f56:	af ab       	std	Y+55, r26	; 0x37
    1f58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f5c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f5e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f60:	98 ad       	ldd	r25, Y+56	; 0x38
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	4a e7       	ldi	r20, 0x7A	; 122
    1f68:	55 e4       	ldi	r21, 0x45	; 69
    1f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	89 ab       	std	Y+49, r24	; 0x31
    1f74:	9a ab       	std	Y+50, r25	; 0x32
    1f76:	ab ab       	std	Y+51, r26	; 0x33
    1f78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f80:	9c a9       	ldd	r25, Y+52	; 0x34
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e8       	ldi	r20, 0x80	; 128
    1f88:	5f e3       	ldi	r21, 0x3F	; 63
    1f8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f8e:	88 23       	and	r24, r24
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <LCD_sendCommand+0x50a>
		__ticks = 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	98 ab       	std	Y+48, r25	; 0x30
    1f98:	8f a7       	std	Y+47, r24	; 0x2f
    1f9a:	3f c0       	rjmp	.+126    	; 0x201a <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1f9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	3f ef       	ldi	r19, 0xFF	; 255
    1fa8:	4f e7       	ldi	r20, 0x7F	; 127
    1faa:	57 e4       	ldi	r21, 0x47	; 71
    1fac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb0:	18 16       	cp	r1, r24
    1fb2:	4c f5       	brge	.+82     	; 0x2006 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb4:	6d a9       	ldd	r22, Y+53	; 0x35
    1fb6:	7e a9       	ldd	r23, Y+54	; 0x36
    1fb8:	8f a9       	ldd	r24, Y+55	; 0x37
    1fba:	98 ad       	ldd	r25, Y+56	; 0x38
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e2       	ldi	r20, 0x20	; 32
    1fc2:	51 e4       	ldi	r21, 0x41	; 65
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	98 ab       	std	Y+48, r25	; 0x30
    1fda:	8f a7       	std	Y+47, r24	; 0x2f
    1fdc:	0f c0       	rjmp	.+30     	; 0x1ffc <LCD_sendCommand+0x56a>
    1fde:	80 e9       	ldi	r24, 0x90	; 144
    1fe0:	91 e0       	ldi	r25, 0x01	; 1
    1fe2:	9e a7       	std	Y+46, r25	; 0x2e
    1fe4:	8d a7       	std	Y+45, r24	; 0x2d
    1fe6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fe8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_sendCommand+0x558>
    1fee:	9e a7       	std	Y+46, r25	; 0x2e
    1ff0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	98 ab       	std	Y+48, r25	; 0x30
    1ffa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ffe:	98 a9       	ldd	r25, Y+48	; 0x30
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	69 f7       	brne	.-38     	; 0x1fde <LCD_sendCommand+0x54c>
    2004:	14 c0       	rjmp	.+40     	; 0x202e <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2006:	69 a9       	ldd	r22, Y+49	; 0x31
    2008:	7a a9       	ldd	r23, Y+50	; 0x32
    200a:	8b a9       	ldd	r24, Y+51	; 0x33
    200c:	9c a9       	ldd	r25, Y+52	; 0x34
    200e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	98 ab       	std	Y+48, r25	; 0x30
    2018:	8f a7       	std	Y+47, r24	; 0x2f
    201a:	8f a5       	ldd	r24, Y+47	; 0x2f
    201c:	98 a9       	ldd	r25, Y+48	; 0x30
    201e:	9c a7       	std	Y+44, r25	; 0x2c
    2020:	8b a7       	std	Y+43, r24	; 0x2b
    2022:	8b a5       	ldd	r24, Y+43	; 0x2b
    2024:	9c a5       	ldd	r25, Y+44	; 0x2c
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <LCD_sendCommand+0x594>
    202a:	9c a7       	std	Y+44, r25	; 0x2c
    202c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* 13ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,HIGH);
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	62 e0       	ldi	r22, 0x02	; 2
    2032:	41 e0       	ldi	r20, 0x01	; 1
    2034:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	a0 e8       	ldi	r26, 0x80	; 128
    203e:	bf e3       	ldi	r27, 0x3F	; 63
    2040:	8f a3       	std	Y+39, r24	; 0x27
    2042:	98 a7       	std	Y+40, r25	; 0x28
    2044:	a9 a7       	std	Y+41, r26	; 0x29
    2046:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2048:	6f a1       	ldd	r22, Y+39	; 0x27
    204a:	78 a5       	ldd	r23, Y+40	; 0x28
    204c:	89 a5       	ldd	r24, Y+41	; 0x29
    204e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4a e7       	ldi	r20, 0x7A	; 122
    2056:	55 e4       	ldi	r21, 0x45	; 69
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	8b a3       	std	Y+35, r24	; 0x23
    2062:	9c a3       	std	Y+36, r25	; 0x24
    2064:	ad a3       	std	Y+37, r26	; 0x25
    2066:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2068:	6b a1       	ldd	r22, Y+35	; 0x23
    206a:	7c a1       	ldd	r23, Y+36	; 0x24
    206c:	8d a1       	ldd	r24, Y+37	; 0x25
    206e:	9e a1       	ldd	r25, Y+38	; 0x26
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e8       	ldi	r20, 0x80	; 128
    2076:	5f e3       	ldi	r21, 0x3F	; 63
    2078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    207c:	88 23       	and	r24, r24
    207e:	2c f4       	brge	.+10     	; 0x208a <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	9a a3       	std	Y+34, r25	; 0x22
    2086:	89 a3       	std	Y+33, r24	; 0x21
    2088:	3f c0       	rjmp	.+126    	; 0x2108 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    208a:	6b a1       	ldd	r22, Y+35	; 0x23
    208c:	7c a1       	ldd	r23, Y+36	; 0x24
    208e:	8d a1       	ldd	r24, Y+37	; 0x25
    2090:	9e a1       	ldd	r25, Y+38	; 0x26
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	3f ef       	ldi	r19, 0xFF	; 255
    2096:	4f e7       	ldi	r20, 0x7F	; 127
    2098:	57 e4       	ldi	r21, 0x47	; 71
    209a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    209e:	18 16       	cp	r1, r24
    20a0:	4c f5       	brge	.+82     	; 0x20f4 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a2:	6f a1       	ldd	r22, Y+39	; 0x27
    20a4:	78 a5       	ldd	r23, Y+40	; 0x28
    20a6:	89 a5       	ldd	r24, Y+41	; 0x29
    20a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e2       	ldi	r20, 0x20	; 32
    20b0:	51 e4       	ldi	r21, 0x41	; 65
    20b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	9a a3       	std	Y+34, r25	; 0x22
    20c8:	89 a3       	std	Y+33, r24	; 0x21
    20ca:	0f c0       	rjmp	.+30     	; 0x20ea <LCD_sendCommand+0x658>
    20cc:	80 e9       	ldi	r24, 0x90	; 144
    20ce:	91 e0       	ldi	r25, 0x01	; 1
    20d0:	98 a3       	std	Y+32, r25	; 0x20
    20d2:	8f 8f       	std	Y+31, r24	; 0x1f
    20d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20d6:	98 a1       	ldd	r25, Y+32	; 0x20
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <LCD_sendCommand+0x646>
    20dc:	98 a3       	std	Y+32, r25	; 0x20
    20de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e0:	89 a1       	ldd	r24, Y+33	; 0x21
    20e2:	9a a1       	ldd	r25, Y+34	; 0x22
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	9a a3       	std	Y+34, r25	; 0x22
    20e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ea:	89 a1       	ldd	r24, Y+33	; 0x21
    20ec:	9a a1       	ldd	r25, Y+34	; 0x22
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	69 f7       	brne	.-38     	; 0x20cc <LCD_sendCommand+0x63a>
    20f2:	14 c0       	rjmp	.+40     	; 0x211c <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f4:	6b a1       	ldd	r22, Y+35	; 0x23
    20f6:	7c a1       	ldd	r23, Y+36	; 0x24
    20f8:	8d a1       	ldd	r24, Y+37	; 0x25
    20fa:	9e a1       	ldd	r25, Y+38	; 0x26
    20fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	9a a3       	std	Y+34, r25	; 0x22
    2106:	89 a3       	std	Y+33, r24	; 0x21
    2108:	89 a1       	ldd	r24, Y+33	; 0x21
    210a:	9a a1       	ldd	r25, Y+34	; 0x22
    210c:	9e 8f       	std	Y+30, r25	; 0x1e
    210e:	8d 8f       	std	Y+29, r24	; 0x1d
    2110:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2112:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <LCD_sendCommand+0x682>
    2118:	9e 8f       	std	Y+30, r25	; 0x1e
    211a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* 13ns */

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4,GET_BIT(command,0));
    211c:	fe 01       	movw	r30, r28
    211e:	ed 59       	subi	r30, 0x9D	; 157
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
    2124:	98 2f       	mov	r25, r24
    2126:	91 70       	andi	r25, 0x01	; 1
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	63 e0       	ldi	r22, 0x03	; 3
    212c:	49 2f       	mov	r20, r25
    212e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5,GET_BIT(command,1));
    2132:	fe 01       	movw	r30, r28
    2134:	ed 59       	subi	r30, 0x9D	; 157
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 81       	ld	r24, Z
    213a:	88 2f       	mov	r24, r24
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	82 70       	andi	r24, 0x02	; 2
    2140:	90 70       	andi	r25, 0x00	; 0
    2142:	95 95       	asr	r25
    2144:	87 95       	ror	r24
    2146:	98 2f       	mov	r25, r24
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	64 e0       	ldi	r22, 0x04	; 4
    214c:	49 2f       	mov	r20, r25
    214e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6,GET_BIT(command,2));
    2152:	fe 01       	movw	r30, r28
    2154:	ed 59       	subi	r30, 0x9D	; 157
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	88 2f       	mov	r24, r24
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	84 70       	andi	r24, 0x04	; 4
    2160:	90 70       	andi	r25, 0x00	; 0
    2162:	95 95       	asr	r25
    2164:	87 95       	ror	r24
    2166:	95 95       	asr	r25
    2168:	87 95       	ror	r24
    216a:	98 2f       	mov	r25, r24
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	65 e0       	ldi	r22, 0x05	; 5
    2170:	49 2f       	mov	r20, r25
    2172:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7,GET_BIT(command,3));
    2176:	fe 01       	movw	r30, r28
    2178:	ed 59       	subi	r30, 0x9D	; 157
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	80 81       	ld	r24, Z
    217e:	88 2f       	mov	r24, r24
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	88 70       	andi	r24, 0x08	; 8
    2184:	90 70       	andi	r25, 0x00	; 0
    2186:	95 95       	asr	r25
    2188:	87 95       	ror	r24
    218a:	95 95       	asr	r25
    218c:	87 95       	ror	r24
    218e:	95 95       	asr	r25
    2190:	87 95       	ror	r24
    2192:	98 2f       	mov	r25, r24
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	66 e0       	ldi	r22, 0x06	; 6
    2198:	49 2f       	mov	r20, r25
    219a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a0 e8       	ldi	r26, 0x80	; 128
    21a4:	bf e3       	ldi	r27, 0x3F	; 63
    21a6:	89 8f       	std	Y+25, r24	; 0x19
    21a8:	9a 8f       	std	Y+26, r25	; 0x1a
    21aa:	ab 8f       	std	Y+27, r26	; 0x1b
    21ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ae:	69 8d       	ldd	r22, Y+25	; 0x19
    21b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4a e7       	ldi	r20, 0x7A	; 122
    21bc:	55 e4       	ldi	r21, 0x45	; 69
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	8d 8b       	std	Y+21, r24	; 0x15
    21c8:	9e 8b       	std	Y+22, r25	; 0x16
    21ca:	af 8b       	std	Y+23, r26	; 0x17
    21cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ce:	6d 89       	ldd	r22, Y+21	; 0x15
    21d0:	7e 89       	ldd	r23, Y+22	; 0x16
    21d2:	8f 89       	ldd	r24, Y+23	; 0x17
    21d4:	98 8d       	ldd	r25, Y+24	; 0x18
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	5f e3       	ldi	r21, 0x3F	; 63
    21de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	2c f4       	brge	.+10     	; 0x21f0 <LCD_sendCommand+0x75e>
		__ticks = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9c 8b       	std	Y+20, r25	; 0x14
    21ec:	8b 8b       	std	Y+19, r24	; 0x13
    21ee:	3f c0       	rjmp	.+126    	; 0x226e <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    21f0:	6d 89       	ldd	r22, Y+21	; 0x15
    21f2:	7e 89       	ldd	r23, Y+22	; 0x16
    21f4:	8f 89       	ldd	r24, Y+23	; 0x17
    21f6:	98 8d       	ldd	r25, Y+24	; 0x18
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	3f ef       	ldi	r19, 0xFF	; 255
    21fc:	4f e7       	ldi	r20, 0x7F	; 127
    21fe:	57 e4       	ldi	r21, 0x47	; 71
    2200:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2204:	18 16       	cp	r1, r24
    2206:	4c f5       	brge	.+82     	; 0x225a <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2208:	69 8d       	ldd	r22, Y+25	; 0x19
    220a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    220c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    220e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e2       	ldi	r20, 0x20	; 32
    2216:	51 e4       	ldi	r21, 0x41	; 65
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	9c 8b       	std	Y+20, r25	; 0x14
    222e:	8b 8b       	std	Y+19, r24	; 0x13
    2230:	0f c0       	rjmp	.+30     	; 0x2250 <LCD_sendCommand+0x7be>
    2232:	80 e9       	ldi	r24, 0x90	; 144
    2234:	91 e0       	ldi	r25, 0x01	; 1
    2236:	9a 8b       	std	Y+18, r25	; 0x12
    2238:	89 8b       	std	Y+17, r24	; 0x11
    223a:	89 89       	ldd	r24, Y+17	; 0x11
    223c:	9a 89       	ldd	r25, Y+18	; 0x12
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <LCD_sendCommand+0x7ac>
    2242:	9a 8b       	std	Y+18, r25	; 0x12
    2244:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2246:	8b 89       	ldd	r24, Y+19	; 0x13
    2248:	9c 89       	ldd	r25, Y+20	; 0x14
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	9c 8b       	std	Y+20, r25	; 0x14
    224e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2250:	8b 89       	ldd	r24, Y+19	; 0x13
    2252:	9c 89       	ldd	r25, Y+20	; 0x14
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	69 f7       	brne	.-38     	; 0x2232 <LCD_sendCommand+0x7a0>
    2258:	14 c0       	rjmp	.+40     	; 0x2282 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225a:	6d 89       	ldd	r22, Y+21	; 0x15
    225c:	7e 89       	ldd	r23, Y+22	; 0x16
    225e:	8f 89       	ldd	r24, Y+23	; 0x17
    2260:	98 8d       	ldd	r25, Y+24	; 0x18
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9c 8b       	std	Y+20, r25	; 0x14
    226c:	8b 8b       	std	Y+19, r24	; 0x13
    226e:	8b 89       	ldd	r24, Y+19	; 0x13
    2270:	9c 89       	ldd	r25, Y+20	; 0x14
    2272:	98 8b       	std	Y+16, r25	; 0x10
    2274:	8f 87       	std	Y+15, r24	; 0x0f
    2276:	8f 85       	ldd	r24, Y+15	; 0x0f
    2278:	98 89       	ldd	r25, Y+16	; 0x10
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_sendCommand+0x7e8>
    227e:	98 8b       	std	Y+16, r25	; 0x10
    2280:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* 100ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	62 e0       	ldi	r22, 0x02	; 2
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a0 e8       	ldi	r26, 0x80	; 128
    2292:	bf e3       	ldi	r27, 0x3F	; 63
    2294:	8b 87       	std	Y+11, r24	; 0x0b
    2296:	9c 87       	std	Y+12, r25	; 0x0c
    2298:	ad 87       	std	Y+13, r26	; 0x0d
    229a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	6b 85       	ldd	r22, Y+11	; 0x0b
    229e:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a e7       	ldi	r20, 0x7A	; 122
    22aa:	55 e4       	ldi	r21, 0x45	; 69
    22ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	8f 83       	std	Y+7, r24	; 0x07
    22b6:	98 87       	std	Y+8, r25	; 0x08
    22b8:	a9 87       	std	Y+9, r26	; 0x09
    22ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22bc:	6f 81       	ldd	r22, Y+7	; 0x07
    22be:	78 85       	ldd	r23, Y+8	; 0x08
    22c0:	89 85       	ldd	r24, Y+9	; 0x09
    22c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <LCD_sendCommand+0x84c>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	4c f5       	brge	.+82     	; 0x2348 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
    231e:	0f c0       	rjmp	.+30     	; 0x233e <LCD_sendCommand+0x8ac>
    2320:	80 e9       	ldi	r24, 0x90	; 144
    2322:	91 e0       	ldi	r25, 0x01	; 1
    2324:	9c 83       	std	Y+4, r25	; 0x04
    2326:	8b 83       	std	Y+3, r24	; 0x03
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <LCD_sendCommand+0x89a>
    2330:	9c 83       	std	Y+4, r25	; 0x04
    2332:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	69 f7       	brne	.-38     	; 0x2320 <LCD_sendCommand+0x88e>
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_sendCommand+0x8d6>
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
	_delay_ms(1); /* 13ns */

#endif

}//end LCD_sendCommand
    2370:	cd 59       	subi	r28, 0x9D	; 157
    2372:	df 4f       	sbci	r29, 0xFF	; 255
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	1f 91       	pop	r17
    2384:	0f 91       	pop	r16
    2386:	08 95       	ret

00002388 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 character){
    2388:	0f 93       	push	r16
    238a:	1f 93       	push	r17
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	c3 56       	subi	r28, 0x63	; 99
    2396:	d0 40       	sbci	r29, 0x00	; 0
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	f8 94       	cli
    239c:	de bf       	out	0x3e, r29	; 62
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	cd bf       	out	0x3d, r28	; 61
    23a2:	fe 01       	movw	r30, r28
    23a4:	ed 59       	subi	r30, 0x9D	; 157
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 83       	st	Z, r24

	GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	61 e0       	ldi	r22, 0x01	; 1
    23ae:	41 e0       	ldi	r20, 0x01	; 1
    23b0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    23b4:	fe 01       	movw	r30, r28
    23b6:	e1 5a       	subi	r30, 0xA1	; 161
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	a0 e8       	ldi	r26, 0x80	; 128
    23c0:	bf e3       	ldi	r27, 0x3F	; 63
    23c2:	80 83       	st	Z, r24
    23c4:	91 83       	std	Z+1, r25	; 0x01
    23c6:	a2 83       	std	Z+2, r26	; 0x02
    23c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ca:	8e 01       	movw	r16, r28
    23cc:	05 5a       	subi	r16, 0xA5	; 165
    23ce:	1f 4f       	sbci	r17, 0xFF	; 255
    23d0:	fe 01       	movw	r30, r28
    23d2:	e1 5a       	subi	r30, 0xA1	; 161
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	60 81       	ld	r22, Z
    23d8:	71 81       	ldd	r23, Z+1	; 0x01
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	93 81       	ldd	r25, Z+3	; 0x03
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	4a e7       	ldi	r20, 0x7A	; 122
    23e4:	55 e4       	ldi	r21, 0x45	; 69
    23e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	f8 01       	movw	r30, r16
    23f0:	80 83       	st	Z, r24
    23f2:	91 83       	std	Z+1, r25	; 0x01
    23f4:	a2 83       	std	Z+2, r26	; 0x02
    23f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23f8:	fe 01       	movw	r30, r28
    23fa:	e5 5a       	subi	r30, 0xA5	; 165
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	60 81       	ld	r22, Z
    2400:	71 81       	ldd	r23, Z+1	; 0x01
    2402:	82 81       	ldd	r24, Z+2	; 0x02
    2404:	93 81       	ldd	r25, Z+3	; 0x03
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e8       	ldi	r20, 0x80	; 128
    240c:	5f e3       	ldi	r21, 0x3F	; 63
    240e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2412:	88 23       	and	r24, r24
    2414:	44 f4       	brge	.+16     	; 0x2426 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2416:	fe 01       	movw	r30, r28
    2418:	e7 5a       	subi	r30, 0xA7	; 167
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	91 83       	std	Z+1, r25	; 0x01
    2422:	80 83       	st	Z, r24
    2424:	64 c0       	rjmp	.+200    	; 0x24ee <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2426:	fe 01       	movw	r30, r28
    2428:	e5 5a       	subi	r30, 0xA5	; 165
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	60 81       	ld	r22, Z
    242e:	71 81       	ldd	r23, Z+1	; 0x01
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	93 81       	ldd	r25, Z+3	; 0x03
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	3f ef       	ldi	r19, 0xFF	; 255
    2438:	4f e7       	ldi	r20, 0x7F	; 127
    243a:	57 e4       	ldi	r21, 0x47	; 71
    243c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2440:	18 16       	cp	r1, r24
    2442:	0c f0       	brlt	.+2      	; 0x2446 <LCD_displayCharacter+0xbe>
    2444:	43 c0       	rjmp	.+134    	; 0x24cc <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2446:	fe 01       	movw	r30, r28
    2448:	e1 5a       	subi	r30, 0xA1	; 161
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	60 81       	ld	r22, Z
    244e:	71 81       	ldd	r23, Z+1	; 0x01
    2450:	82 81       	ldd	r24, Z+2	; 0x02
    2452:	93 81       	ldd	r25, Z+3	; 0x03
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e2       	ldi	r20, 0x20	; 32
    245a:	51 e4       	ldi	r21, 0x41	; 65
    245c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	8e 01       	movw	r16, r28
    2466:	07 5a       	subi	r16, 0xA7	; 167
    2468:	1f 4f       	sbci	r17, 0xFF	; 255
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	f8 01       	movw	r30, r16
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
    247c:	1f c0       	rjmp	.+62     	; 0x24bc <LCD_displayCharacter+0x134>
    247e:	fe 01       	movw	r30, r28
    2480:	e9 5a       	subi	r30, 0xA9	; 169
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	80 e9       	ldi	r24, 0x90	; 144
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	91 83       	std	Z+1, r25	; 0x01
    248a:	80 83       	st	Z, r24
    248c:	fe 01       	movw	r30, r28
    248e:	e9 5a       	subi	r30, 0xA9	; 169
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	80 81       	ld	r24, Z
    2494:	91 81       	ldd	r25, Z+1	; 0x01
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <LCD_displayCharacter+0x10e>
    249a:	fe 01       	movw	r30, r28
    249c:	e9 5a       	subi	r30, 0xA9	; 169
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a4:	de 01       	movw	r26, r28
    24a6:	a7 5a       	subi	r26, 0xA7	; 167
    24a8:	bf 4f       	sbci	r27, 0xFF	; 255
    24aa:	fe 01       	movw	r30, r28
    24ac:	e7 5a       	subi	r30, 0xA7	; 167
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	80 81       	ld	r24, Z
    24b2:	91 81       	ldd	r25, Z+1	; 0x01
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	11 96       	adiw	r26, 0x01	; 1
    24b8:	9c 93       	st	X, r25
    24ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24bc:	fe 01       	movw	r30, r28
    24be:	e7 5a       	subi	r30, 0xA7	; 167
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	80 81       	ld	r24, Z
    24c4:	91 81       	ldd	r25, Z+1	; 0x01
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	d1 f6       	brne	.-76     	; 0x247e <LCD_displayCharacter+0xf6>
    24ca:	27 c0       	rjmp	.+78     	; 0x251a <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24cc:	8e 01       	movw	r16, r28
    24ce:	07 5a       	subi	r16, 0xA7	; 167
    24d0:	1f 4f       	sbci	r17, 0xFF	; 255
    24d2:	fe 01       	movw	r30, r28
    24d4:	e5 5a       	subi	r30, 0xA5	; 165
    24d6:	ff 4f       	sbci	r31, 0xFF	; 255
    24d8:	60 81       	ld	r22, Z
    24da:	71 81       	ldd	r23, Z+1	; 0x01
    24dc:	82 81       	ldd	r24, Z+2	; 0x02
    24de:	93 81       	ldd	r25, Z+3	; 0x03
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	f8 01       	movw	r30, r16
    24ea:	91 83       	std	Z+1, r25	; 0x01
    24ec:	80 83       	st	Z, r24
    24ee:	de 01       	movw	r26, r28
    24f0:	ab 5a       	subi	r26, 0xAB	; 171
    24f2:	bf 4f       	sbci	r27, 0xFF	; 255
    24f4:	fe 01       	movw	r30, r28
    24f6:	e7 5a       	subi	r30, 0xA7	; 167
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	91 81       	ldd	r25, Z+1	; 0x01
    24fe:	8d 93       	st	X+, r24
    2500:	9c 93       	st	X, r25
    2502:	fe 01       	movw	r30, r28
    2504:	eb 5a       	subi	r30, 0xAB	; 171
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	80 81       	ld	r24, Z
    250a:	91 81       	ldd	r25, Z+1	; 0x01
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_displayCharacter+0x184>
    2510:	fe 01       	movw	r30, r28
    2512:	eb 5a       	subi	r30, 0xAB	; 171
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	91 83       	std	Z+1, r25	; 0x01
    2518:	80 83       	st	Z, r24
	_delay_ms(1); /* 50ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,HIGH);
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	62 e0       	ldi	r22, 0x02	; 2
    251e:	41 e0       	ldi	r20, 0x01	; 1
    2520:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    2524:	fe 01       	movw	r30, r28
    2526:	ef 5a       	subi	r30, 0xAF	; 175
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	a0 e8       	ldi	r26, 0x80	; 128
    2530:	bf e3       	ldi	r27, 0x3F	; 63
    2532:	80 83       	st	Z, r24
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	a2 83       	std	Z+2, r26	; 0x02
    2538:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253a:	8e 01       	movw	r16, r28
    253c:	03 5b       	subi	r16, 0xB3	; 179
    253e:	1f 4f       	sbci	r17, 0xFF	; 255
    2540:	fe 01       	movw	r30, r28
    2542:	ef 5a       	subi	r30, 0xAF	; 175
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	60 81       	ld	r22, Z
    2548:	71 81       	ldd	r23, Z+1	; 0x01
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	93 81       	ldd	r25, Z+3	; 0x03
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4a e7       	ldi	r20, 0x7A	; 122
    2554:	55 e4       	ldi	r21, 0x45	; 69
    2556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	f8 01       	movw	r30, r16
    2560:	80 83       	st	Z, r24
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	a2 83       	std	Z+2, r26	; 0x02
    2566:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2568:	fe 01       	movw	r30, r28
    256a:	e3 5b       	subi	r30, 0xB3	; 179
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	60 81       	ld	r22, Z
    2570:	71 81       	ldd	r23, Z+1	; 0x01
    2572:	82 81       	ldd	r24, Z+2	; 0x02
    2574:	93 81       	ldd	r25, Z+3	; 0x03
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e8       	ldi	r20, 0x80	; 128
    257c:	5f e3       	ldi	r21, 0x3F	; 63
    257e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2582:	88 23       	and	r24, r24
    2584:	44 f4       	brge	.+16     	; 0x2596 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2586:	fe 01       	movw	r30, r28
    2588:	e5 5b       	subi	r30, 0xB5	; 181
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	80 83       	st	Z, r24
    2594:	64 c0       	rjmp	.+200    	; 0x265e <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2596:	fe 01       	movw	r30, r28
    2598:	e3 5b       	subi	r30, 0xB3	; 179
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	60 81       	ld	r22, Z
    259e:	71 81       	ldd	r23, Z+1	; 0x01
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	3f ef       	ldi	r19, 0xFF	; 255
    25a8:	4f e7       	ldi	r20, 0x7F	; 127
    25aa:	57 e4       	ldi	r21, 0x47	; 71
    25ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b0:	18 16       	cp	r1, r24
    25b2:	0c f0       	brlt	.+2      	; 0x25b6 <LCD_displayCharacter+0x22e>
    25b4:	43 c0       	rjmp	.+134    	; 0x263c <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b6:	fe 01       	movw	r30, r28
    25b8:	ef 5a       	subi	r30, 0xAF	; 175
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	60 81       	ld	r22, Z
    25be:	71 81       	ldd	r23, Z+1	; 0x01
    25c0:	82 81       	ldd	r24, Z+2	; 0x02
    25c2:	93 81       	ldd	r25, Z+3	; 0x03
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e2       	ldi	r20, 0x20	; 32
    25ca:	51 e4       	ldi	r21, 0x41	; 65
    25cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	8e 01       	movw	r16, r28
    25d6:	05 5b       	subi	r16, 0xB5	; 181
    25d8:	1f 4f       	sbci	r17, 0xFF	; 255
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
    25de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	f8 01       	movw	r30, r16
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	80 83       	st	Z, r24
    25ec:	1f c0       	rjmp	.+62     	; 0x262c <LCD_displayCharacter+0x2a4>
    25ee:	fe 01       	movw	r30, r28
    25f0:	e7 5b       	subi	r30, 0xB7	; 183
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 e9       	ldi	r24, 0x90	; 144
    25f6:	91 e0       	ldi	r25, 0x01	; 1
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	80 83       	st	Z, r24
    25fc:	fe 01       	movw	r30, r28
    25fe:	e7 5b       	subi	r30, 0xB7	; 183
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 81       	ld	r24, Z
    2604:	91 81       	ldd	r25, Z+1	; 0x01
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <LCD_displayCharacter+0x27e>
    260a:	fe 01       	movw	r30, r28
    260c:	e7 5b       	subi	r30, 0xB7	; 183
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	91 83       	std	Z+1, r25	; 0x01
    2612:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2614:	de 01       	movw	r26, r28
    2616:	a5 5b       	subi	r26, 0xB5	; 181
    2618:	bf 4f       	sbci	r27, 0xFF	; 255
    261a:	fe 01       	movw	r30, r28
    261c:	e5 5b       	subi	r30, 0xB5	; 181
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	11 96       	adiw	r26, 0x01	; 1
    2628:	9c 93       	st	X, r25
    262a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262c:	fe 01       	movw	r30, r28
    262e:	e5 5b       	subi	r30, 0xB5	; 181
    2630:	ff 4f       	sbci	r31, 0xFF	; 255
    2632:	80 81       	ld	r24, Z
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	d1 f6       	brne	.-76     	; 0x25ee <LCD_displayCharacter+0x266>
    263a:	27 c0       	rjmp	.+78     	; 0x268a <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263c:	8e 01       	movw	r16, r28
    263e:	05 5b       	subi	r16, 0xB5	; 181
    2640:	1f 4f       	sbci	r17, 0xFF	; 255
    2642:	fe 01       	movw	r30, r28
    2644:	e3 5b       	subi	r30, 0xB3	; 179
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	60 81       	ld	r22, Z
    264a:	71 81       	ldd	r23, Z+1	; 0x01
    264c:	82 81       	ldd	r24, Z+2	; 0x02
    264e:	93 81       	ldd	r25, Z+3	; 0x03
    2650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	f8 01       	movw	r30, r16
    265a:	91 83       	std	Z+1, r25	; 0x01
    265c:	80 83       	st	Z, r24
    265e:	de 01       	movw	r26, r28
    2660:	a9 5b       	subi	r26, 0xB9	; 185
    2662:	bf 4f       	sbci	r27, 0xFF	; 255
    2664:	fe 01       	movw	r30, r28
    2666:	e5 5b       	subi	r30, 0xB5	; 181
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	91 81       	ldd	r25, Z+1	; 0x01
    266e:	8d 93       	st	X+, r24
    2670:	9c 93       	st	X, r25
    2672:	fe 01       	movw	r30, r28
    2674:	e9 5b       	subi	r30, 0xB9	; 185
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	80 81       	ld	r24, Z
    267a:	91 81       	ldd	r25, Z+1	; 0x01
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <LCD_displayCharacter+0x2f4>
    2680:	fe 01       	movw	r30, r28
    2682:	e9 5b       	subi	r30, 0xB9	; 185
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	91 83       	std	Z+1, r25	; 0x01
    2688:	80 83       	st	Z, r24
	_delay_ms(1); /* 290-200 = 190ns */

#if(LCD_DATA_BIT_MODE == 4)

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4,GET_BIT(character,4));
    268a:	fe 01       	movw	r30, r28
    268c:	ed 59       	subi	r30, 0x9D	; 157
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	80 81       	ld	r24, Z
    2692:	88 2f       	mov	r24, r24
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	80 71       	andi	r24, 0x10	; 16
    2698:	90 70       	andi	r25, 0x00	; 0
    269a:	95 95       	asr	r25
    269c:	87 95       	ror	r24
    269e:	95 95       	asr	r25
    26a0:	87 95       	ror	r24
    26a2:	95 95       	asr	r25
    26a4:	87 95       	ror	r24
    26a6:	95 95       	asr	r25
    26a8:	87 95       	ror	r24
    26aa:	98 2f       	mov	r25, r24
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	63 e0       	ldi	r22, 0x03	; 3
    26b0:	49 2f       	mov	r20, r25
    26b2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5,GET_BIT(character,5));
    26b6:	fe 01       	movw	r30, r28
    26b8:	ed 59       	subi	r30, 0x9D	; 157
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	80 81       	ld	r24, Z
    26be:	88 2f       	mov	r24, r24
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	80 72       	andi	r24, 0x20	; 32
    26c4:	90 70       	andi	r25, 0x00	; 0
    26c6:	95 95       	asr	r25
    26c8:	87 95       	ror	r24
    26ca:	95 95       	asr	r25
    26cc:	87 95       	ror	r24
    26ce:	95 95       	asr	r25
    26d0:	87 95       	ror	r24
    26d2:	95 95       	asr	r25
    26d4:	87 95       	ror	r24
    26d6:	95 95       	asr	r25
    26d8:	87 95       	ror	r24
    26da:	98 2f       	mov	r25, r24
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	64 e0       	ldi	r22, 0x04	; 4
    26e0:	49 2f       	mov	r20, r25
    26e2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6,GET_BIT(character,6));
    26e6:	fe 01       	movw	r30, r28
    26e8:	ed 59       	subi	r30, 0x9D	; 157
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	88 2f       	mov	r24, r24
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	80 74       	andi	r24, 0x40	; 64
    26f4:	90 70       	andi	r25, 0x00	; 0
    26f6:	08 2e       	mov	r0, r24
    26f8:	89 2f       	mov	r24, r25
    26fa:	00 0c       	add	r0, r0
    26fc:	88 1f       	adc	r24, r24
    26fe:	99 0b       	sbc	r25, r25
    2700:	00 0c       	add	r0, r0
    2702:	88 1f       	adc	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	98 2f       	mov	r25, r24
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	65 e0       	ldi	r22, 0x05	; 5
    270c:	49 2f       	mov	r20, r25
    270e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7,GET_BIT(character,7));
    2712:	fe 01       	movw	r30, r28
    2714:	ed 59       	subi	r30, 0x9D	; 157
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	98 2f       	mov	r25, r24
    271c:	99 1f       	adc	r25, r25
    271e:	99 27       	eor	r25, r25
    2720:	99 1f       	adc	r25, r25
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	66 e0       	ldi	r22, 0x06	; 6
    2726:	49 2f       	mov	r20, r25
    2728:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    272c:	fe 01       	movw	r30, r28
    272e:	ed 5b       	subi	r30, 0xBD	; 189
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	a0 e8       	ldi	r26, 0x80	; 128
    2738:	bf e3       	ldi	r27, 0x3F	; 63
    273a:	80 83       	st	Z, r24
    273c:	91 83       	std	Z+1, r25	; 0x01
    273e:	a2 83       	std	Z+2, r26	; 0x02
    2740:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2742:	8e 01       	movw	r16, r28
    2744:	01 5c       	subi	r16, 0xC1	; 193
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
    2748:	fe 01       	movw	r30, r28
    274a:	ed 5b       	subi	r30, 0xBD	; 189
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	82 81       	ldd	r24, Z+2	; 0x02
    2754:	93 81       	ldd	r25, Z+3	; 0x03
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	4a e7       	ldi	r20, 0x7A	; 122
    275c:	55 e4       	ldi	r21, 0x45	; 69
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	f8 01       	movw	r30, r16
    2768:	80 83       	st	Z, r24
    276a:	91 83       	std	Z+1, r25	; 0x01
    276c:	a2 83       	std	Z+2, r26	; 0x02
    276e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2770:	fe 01       	movw	r30, r28
    2772:	ff 96       	adiw	r30, 0x3f	; 63
    2774:	60 81       	ld	r22, Z
    2776:	71 81       	ldd	r23, Z+1	; 0x01
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e8       	ldi	r20, 0x80	; 128
    2782:	5f e3       	ldi	r21, 0x3F	; 63
    2784:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2788:	88 23       	and	r24, r24
    278a:	2c f4       	brge	.+10     	; 0x2796 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9e af       	std	Y+62, r25	; 0x3e
    2792:	8d af       	std	Y+61, r24	; 0x3d
    2794:	46 c0       	rjmp	.+140    	; 0x2822 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2796:	fe 01       	movw	r30, r28
    2798:	ff 96       	adiw	r30, 0x3f	; 63
    279a:	60 81       	ld	r22, Z
    279c:	71 81       	ldd	r23, Z+1	; 0x01
    279e:	82 81       	ldd	r24, Z+2	; 0x02
    27a0:	93 81       	ldd	r25, Z+3	; 0x03
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	3f ef       	ldi	r19, 0xFF	; 255
    27a6:	4f e7       	ldi	r20, 0x7F	; 127
    27a8:	57 e4       	ldi	r21, 0x47	; 71
    27aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ae:	18 16       	cp	r1, r24
    27b0:	64 f5       	brge	.+88     	; 0x280a <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b2:	fe 01       	movw	r30, r28
    27b4:	ed 5b       	subi	r30, 0xBD	; 189
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	60 81       	ld	r22, Z
    27ba:	71 81       	ldd	r23, Z+1	; 0x01
    27bc:	82 81       	ldd	r24, Z+2	; 0x02
    27be:	93 81       	ldd	r25, Z+3	; 0x03
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e2       	ldi	r20, 0x20	; 32
    27c6:	51 e4       	ldi	r21, 0x41	; 65
    27c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9e af       	std	Y+62, r25	; 0x3e
    27de:	8d af       	std	Y+61, r24	; 0x3d
    27e0:	0f c0       	rjmp	.+30     	; 0x2800 <LCD_displayCharacter+0x478>
    27e2:	80 e9       	ldi	r24, 0x90	; 144
    27e4:	91 e0       	ldi	r25, 0x01	; 1
    27e6:	9c af       	std	Y+60, r25	; 0x3c
    27e8:	8b af       	std	Y+59, r24	; 0x3b
    27ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    27ec:	9c ad       	ldd	r25, Y+60	; 0x3c
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <LCD_displayCharacter+0x466>
    27f2:	9c af       	std	Y+60, r25	; 0x3c
    27f4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    27f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	9e af       	std	Y+62, r25	; 0x3e
    27fe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2800:	8d ad       	ldd	r24, Y+61	; 0x3d
    2802:	9e ad       	ldd	r25, Y+62	; 0x3e
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	69 f7       	brne	.-38     	; 0x27e2 <LCD_displayCharacter+0x45a>
    2808:	16 c0       	rjmp	.+44     	; 0x2836 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280a:	fe 01       	movw	r30, r28
    280c:	ff 96       	adiw	r30, 0x3f	; 63
    280e:	60 81       	ld	r22, Z
    2810:	71 81       	ldd	r23, Z+1	; 0x01
    2812:	82 81       	ldd	r24, Z+2	; 0x02
    2814:	93 81       	ldd	r25, Z+3	; 0x03
    2816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	9e af       	std	Y+62, r25	; 0x3e
    2820:	8d af       	std	Y+61, r24	; 0x3d
    2822:	8d ad       	ldd	r24, Y+61	; 0x3d
    2824:	9e ad       	ldd	r25, Y+62	; 0x3e
    2826:	9a af       	std	Y+58, r25	; 0x3a
    2828:	89 af       	std	Y+57, r24	; 0x39
    282a:	89 ad       	ldd	r24, Y+57	; 0x39
    282c:	9a ad       	ldd	r25, Y+58	; 0x3a
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	f1 f7       	brne	.-4      	; 0x282e <LCD_displayCharacter+0x4a6>
    2832:	9a af       	std	Y+58, r25	; 0x3a
    2834:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* 100ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	62 e0       	ldi	r22, 0x02	; 2
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	a0 e8       	ldi	r26, 0x80	; 128
    2846:	bf e3       	ldi	r27, 0x3F	; 63
    2848:	8d ab       	std	Y+53, r24	; 0x35
    284a:	9e ab       	std	Y+54, r25	; 0x36
    284c:	af ab       	std	Y+55, r26	; 0x37
    284e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2850:	6d a9       	ldd	r22, Y+53	; 0x35
    2852:	7e a9       	ldd	r23, Y+54	; 0x36
    2854:	8f a9       	ldd	r24, Y+55	; 0x37
    2856:	98 ad       	ldd	r25, Y+56	; 0x38
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	4a e7       	ldi	r20, 0x7A	; 122
    285e:	55 e4       	ldi	r21, 0x45	; 69
    2860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	89 ab       	std	Y+49, r24	; 0x31
    286a:	9a ab       	std	Y+50, r25	; 0x32
    286c:	ab ab       	std	Y+51, r26	; 0x33
    286e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2870:	69 a9       	ldd	r22, Y+49	; 0x31
    2872:	7a a9       	ldd	r23, Y+50	; 0x32
    2874:	8b a9       	ldd	r24, Y+51	; 0x33
    2876:	9c a9       	ldd	r25, Y+52	; 0x34
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e8       	ldi	r20, 0x80	; 128
    287e:	5f e3       	ldi	r21, 0x3F	; 63
    2880:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2884:	88 23       	and	r24, r24
    2886:	2c f4       	brge	.+10     	; 0x2892 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	98 ab       	std	Y+48, r25	; 0x30
    288e:	8f a7       	std	Y+47, r24	; 0x2f
    2890:	3f c0       	rjmp	.+126    	; 0x2910 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2892:	69 a9       	ldd	r22, Y+49	; 0x31
    2894:	7a a9       	ldd	r23, Y+50	; 0x32
    2896:	8b a9       	ldd	r24, Y+51	; 0x33
    2898:	9c a9       	ldd	r25, Y+52	; 0x34
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	3f ef       	ldi	r19, 0xFF	; 255
    289e:	4f e7       	ldi	r20, 0x7F	; 127
    28a0:	57 e4       	ldi	r21, 0x47	; 71
    28a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28a6:	18 16       	cp	r1, r24
    28a8:	4c f5       	brge	.+82     	; 0x28fc <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28aa:	6d a9       	ldd	r22, Y+53	; 0x35
    28ac:	7e a9       	ldd	r23, Y+54	; 0x36
    28ae:	8f a9       	ldd	r24, Y+55	; 0x37
    28b0:	98 ad       	ldd	r25, Y+56	; 0x38
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e2       	ldi	r20, 0x20	; 32
    28b8:	51 e4       	ldi	r21, 0x41	; 65
    28ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	98 ab       	std	Y+48, r25	; 0x30
    28d0:	8f a7       	std	Y+47, r24	; 0x2f
    28d2:	0f c0       	rjmp	.+30     	; 0x28f2 <LCD_displayCharacter+0x56a>
    28d4:	80 e9       	ldi	r24, 0x90	; 144
    28d6:	91 e0       	ldi	r25, 0x01	; 1
    28d8:	9e a7       	std	Y+46, r25	; 0x2e
    28da:	8d a7       	std	Y+45, r24	; 0x2d
    28dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    28de:	9e a5       	ldd	r25, Y+46	; 0x2e
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <LCD_displayCharacter+0x558>
    28e4:	9e a7       	std	Y+46, r25	; 0x2e
    28e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ea:	98 a9       	ldd	r25, Y+48	; 0x30
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	98 ab       	std	Y+48, r25	; 0x30
    28f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f4:	98 a9       	ldd	r25, Y+48	; 0x30
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	69 f7       	brne	.-38     	; 0x28d4 <LCD_displayCharacter+0x54c>
    28fa:	14 c0       	rjmp	.+40     	; 0x2924 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fc:	69 a9       	ldd	r22, Y+49	; 0x31
    28fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2900:	8b a9       	ldd	r24, Y+51	; 0x33
    2902:	9c a9       	ldd	r25, Y+52	; 0x34
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	98 ab       	std	Y+48, r25	; 0x30
    290e:	8f a7       	std	Y+47, r24	; 0x2f
    2910:	8f a5       	ldd	r24, Y+47	; 0x2f
    2912:	98 a9       	ldd	r25, Y+48	; 0x30
    2914:	9c a7       	std	Y+44, r25	; 0x2c
    2916:	8b a7       	std	Y+43, r24	; 0x2b
    2918:	8b a5       	ldd	r24, Y+43	; 0x2b
    291a:	9c a5       	ldd	r25, Y+44	; 0x2c
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <LCD_displayCharacter+0x594>
    2920:	9c a7       	std	Y+44, r25	; 0x2c
    2922:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* 13ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,HIGH);
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	62 e0       	ldi	r22, 0x02	; 2
    2928:	41 e0       	ldi	r20, 0x01	; 1
    292a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	a0 e8       	ldi	r26, 0x80	; 128
    2934:	bf e3       	ldi	r27, 0x3F	; 63
    2936:	8f a3       	std	Y+39, r24	; 0x27
    2938:	98 a7       	std	Y+40, r25	; 0x28
    293a:	a9 a7       	std	Y+41, r26	; 0x29
    293c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293e:	6f a1       	ldd	r22, Y+39	; 0x27
    2940:	78 a5       	ldd	r23, Y+40	; 0x28
    2942:	89 a5       	ldd	r24, Y+41	; 0x29
    2944:	9a a5       	ldd	r25, Y+42	; 0x2a
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	4a e7       	ldi	r20, 0x7A	; 122
    294c:	55 e4       	ldi	r21, 0x45	; 69
    294e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	8b a3       	std	Y+35, r24	; 0x23
    2958:	9c a3       	std	Y+36, r25	; 0x24
    295a:	ad a3       	std	Y+37, r26	; 0x25
    295c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    295e:	6b a1       	ldd	r22, Y+35	; 0x23
    2960:	7c a1       	ldd	r23, Y+36	; 0x24
    2962:	8d a1       	ldd	r24, Y+37	; 0x25
    2964:	9e a1       	ldd	r25, Y+38	; 0x26
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e8       	ldi	r20, 0x80	; 128
    296c:	5f e3       	ldi	r21, 0x3F	; 63
    296e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2972:	88 23       	and	r24, r24
    2974:	2c f4       	brge	.+10     	; 0x2980 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9a a3       	std	Y+34, r25	; 0x22
    297c:	89 a3       	std	Y+33, r24	; 0x21
    297e:	3f c0       	rjmp	.+126    	; 0x29fe <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2980:	6b a1       	ldd	r22, Y+35	; 0x23
    2982:	7c a1       	ldd	r23, Y+36	; 0x24
    2984:	8d a1       	ldd	r24, Y+37	; 0x25
    2986:	9e a1       	ldd	r25, Y+38	; 0x26
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	3f ef       	ldi	r19, 0xFF	; 255
    298c:	4f e7       	ldi	r20, 0x7F	; 127
    298e:	57 e4       	ldi	r21, 0x47	; 71
    2990:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2994:	18 16       	cp	r1, r24
    2996:	4c f5       	brge	.+82     	; 0x29ea <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2998:	6f a1       	ldd	r22, Y+39	; 0x27
    299a:	78 a5       	ldd	r23, Y+40	; 0x28
    299c:	89 a5       	ldd	r24, Y+41	; 0x29
    299e:	9a a5       	ldd	r25, Y+42	; 0x2a
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e2       	ldi	r20, 0x20	; 32
    29a6:	51 e4       	ldi	r21, 0x41	; 65
    29a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	bc 01       	movw	r22, r24
    29b2:	cd 01       	movw	r24, r26
    29b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	9a a3       	std	Y+34, r25	; 0x22
    29be:	89 a3       	std	Y+33, r24	; 0x21
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <LCD_displayCharacter+0x658>
    29c2:	80 e9       	ldi	r24, 0x90	; 144
    29c4:	91 e0       	ldi	r25, 0x01	; 1
    29c6:	98 a3       	std	Y+32, r25	; 0x20
    29c8:	8f 8f       	std	Y+31, r24	; 0x1f
    29ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29cc:	98 a1       	ldd	r25, Y+32	; 0x20
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <LCD_displayCharacter+0x646>
    29d2:	98 a3       	std	Y+32, r25	; 0x20
    29d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d6:	89 a1       	ldd	r24, Y+33	; 0x21
    29d8:	9a a1       	ldd	r25, Y+34	; 0x22
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	9a a3       	std	Y+34, r25	; 0x22
    29de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e0:	89 a1       	ldd	r24, Y+33	; 0x21
    29e2:	9a a1       	ldd	r25, Y+34	; 0x22
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	69 f7       	brne	.-38     	; 0x29c2 <LCD_displayCharacter+0x63a>
    29e8:	14 c0       	rjmp	.+40     	; 0x2a12 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ea:	6b a1       	ldd	r22, Y+35	; 0x23
    29ec:	7c a1       	ldd	r23, Y+36	; 0x24
    29ee:	8d a1       	ldd	r24, Y+37	; 0x25
    29f0:	9e a1       	ldd	r25, Y+38	; 0x26
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9a a3       	std	Y+34, r25	; 0x22
    29fc:	89 a3       	std	Y+33, r24	; 0x21
    29fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2a00:	9a a1       	ldd	r25, Y+34	; 0x22
    2a02:	9e 8f       	std	Y+30, r25	; 0x1e
    2a04:	8d 8f       	std	Y+29, r24	; 0x1d
    2a06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <LCD_displayCharacter+0x682>
    2a0e:	9e 8f       	std	Y+30, r25	; 0x1e
    2a10:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* 13ns */

	GPIO_writePin(LCD_DATA_PORT,LCD_DB4,GET_BIT(character,0));
    2a12:	fe 01       	movw	r30, r28
    2a14:	ed 59       	subi	r30, 0x9D	; 157
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 81       	ld	r24, Z
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	91 70       	andi	r25, 0x01	; 1
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	63 e0       	ldi	r22, 0x03	; 3
    2a22:	49 2f       	mov	r20, r25
    2a24:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB5,GET_BIT(character,1));
    2a28:	fe 01       	movw	r30, r28
    2a2a:	ed 59       	subi	r30, 0x9D	; 157
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	88 2f       	mov	r24, r24
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	82 70       	andi	r24, 0x02	; 2
    2a36:	90 70       	andi	r25, 0x00	; 0
    2a38:	95 95       	asr	r25
    2a3a:	87 95       	ror	r24
    2a3c:	98 2f       	mov	r25, r24
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	64 e0       	ldi	r22, 0x04	; 4
    2a42:	49 2f       	mov	r20, r25
    2a44:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6,GET_BIT(character,2));
    2a48:	fe 01       	movw	r30, r28
    2a4a:	ed 59       	subi	r30, 0x9D	; 157
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	80 81       	ld	r24, Z
    2a50:	88 2f       	mov	r24, r24
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	84 70       	andi	r24, 0x04	; 4
    2a56:	90 70       	andi	r25, 0x00	; 0
    2a58:	95 95       	asr	r25
    2a5a:	87 95       	ror	r24
    2a5c:	95 95       	asr	r25
    2a5e:	87 95       	ror	r24
    2a60:	98 2f       	mov	r25, r24
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	65 e0       	ldi	r22, 0x05	; 5
    2a66:	49 2f       	mov	r20, r25
    2a68:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7,GET_BIT(character,3));
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	ed 59       	subi	r30, 0x9D	; 157
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	80 81       	ld	r24, Z
    2a74:	88 2f       	mov	r24, r24
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	88 70       	andi	r24, 0x08	; 8
    2a7a:	90 70       	andi	r25, 0x00	; 0
    2a7c:	95 95       	asr	r25
    2a7e:	87 95       	ror	r24
    2a80:	95 95       	asr	r25
    2a82:	87 95       	ror	r24
    2a84:	95 95       	asr	r25
    2a86:	87 95       	ror	r24
    2a88:	98 2f       	mov	r25, r24
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	66 e0       	ldi	r22, 0x06	; 6
    2a8e:	49 2f       	mov	r20, r25
    2a90:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	a0 e8       	ldi	r26, 0x80	; 128
    2a9a:	bf e3       	ldi	r27, 0x3F	; 63
    2a9c:	89 8f       	std	Y+25, r24	; 0x19
    2a9e:	9a 8f       	std	Y+26, r25	; 0x1a
    2aa0:	ab 8f       	std	Y+27, r26	; 0x1b
    2aa2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa4:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	4a e7       	ldi	r20, 0x7A	; 122
    2ab2:	55 e4       	ldi	r21, 0x45	; 69
    2ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	8d 8b       	std	Y+21, r24	; 0x15
    2abe:	9e 8b       	std	Y+22, r25	; 0x16
    2ac0:	af 8b       	std	Y+23, r26	; 0x17
    2ac2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aca:	98 8d       	ldd	r25, Y+24	; 0x18
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e8       	ldi	r20, 0x80	; 128
    2ad2:	5f e3       	ldi	r21, 0x3F	; 63
    2ad4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ad8:	88 23       	and	r24, r24
    2ada:	2c f4       	brge	.+10     	; 0x2ae6 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	9c 8b       	std	Y+20, r25	; 0x14
    2ae2:	8b 8b       	std	Y+19, r24	; 0x13
    2ae4:	3f c0       	rjmp	.+126    	; 0x2b64 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2ae6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae8:	7e 89       	ldd	r23, Y+22	; 0x16
    2aea:	8f 89       	ldd	r24, Y+23	; 0x17
    2aec:	98 8d       	ldd	r25, Y+24	; 0x18
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	3f ef       	ldi	r19, 0xFF	; 255
    2af2:	4f e7       	ldi	r20, 0x7F	; 127
    2af4:	57 e4       	ldi	r21, 0x47	; 71
    2af6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2afa:	18 16       	cp	r1, r24
    2afc:	4c f5       	brge	.+82     	; 0x2b50 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afe:	69 8d       	ldd	r22, Y+25	; 0x19
    2b00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e2       	ldi	r20, 0x20	; 32
    2b0c:	51 e4       	ldi	r21, 0x41	; 65
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	bc 01       	movw	r22, r24
    2b18:	cd 01       	movw	r24, r26
    2b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	9c 8b       	std	Y+20, r25	; 0x14
    2b24:	8b 8b       	std	Y+19, r24	; 0x13
    2b26:	0f c0       	rjmp	.+30     	; 0x2b46 <LCD_displayCharacter+0x7be>
    2b28:	80 e9       	ldi	r24, 0x90	; 144
    2b2a:	91 e0       	ldi	r25, 0x01	; 1
    2b2c:	9a 8b       	std	Y+18, r25	; 0x12
    2b2e:	89 8b       	std	Y+17, r24	; 0x11
    2b30:	89 89       	ldd	r24, Y+17	; 0x11
    2b32:	9a 89       	ldd	r25, Y+18	; 0x12
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	f1 f7       	brne	.-4      	; 0x2b34 <LCD_displayCharacter+0x7ac>
    2b38:	9a 8b       	std	Y+18, r25	; 0x12
    2b3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	9c 8b       	std	Y+20, r25	; 0x14
    2b44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b46:	8b 89       	ldd	r24, Y+19	; 0x13
    2b48:	9c 89       	ldd	r25, Y+20	; 0x14
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	69 f7       	brne	.-38     	; 0x2b28 <LCD_displayCharacter+0x7a0>
    2b4e:	14 c0       	rjmp	.+40     	; 0x2b78 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b50:	6d 89       	ldd	r22, Y+21	; 0x15
    2b52:	7e 89       	ldd	r23, Y+22	; 0x16
    2b54:	8f 89       	ldd	r24, Y+23	; 0x17
    2b56:	98 8d       	ldd	r25, Y+24	; 0x18
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9c 8b       	std	Y+20, r25	; 0x14
    2b62:	8b 8b       	std	Y+19, r24	; 0x13
    2b64:	8b 89       	ldd	r24, Y+19	; 0x13
    2b66:	9c 89       	ldd	r25, Y+20	; 0x14
    2b68:	98 8b       	std	Y+16, r25	; 0x10
    2b6a:	8f 87       	std	Y+15, r24	; 0x0f
    2b6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b6e:	98 89       	ldd	r25, Y+16	; 0x10
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <LCD_displayCharacter+0x7e8>
    2b74:	98 8b       	std	Y+16, r25	; 0x10
    2b76:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* 100ns */
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	62 e0       	ldi	r22, 0x02	; 2
    2b7c:	40 e0       	ldi	r20, 0x00	; 0
    2b7e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	a0 e8       	ldi	r26, 0x80	; 128
    2b88:	bf e3       	ldi	r27, 0x3F	; 63
    2b8a:	8b 87       	std	Y+11, r24	; 0x0b
    2b8c:	9c 87       	std	Y+12, r25	; 0x0c
    2b8e:	ad 87       	std	Y+13, r26	; 0x0d
    2b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	4a e7       	ldi	r20, 0x7A	; 122
    2ba0:	55 e4       	ldi	r21, 0x45	; 69
    2ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	8f 83       	std	Y+7, r24	; 0x07
    2bac:	98 87       	std	Y+8, r25	; 0x08
    2bae:	a9 87       	std	Y+9, r26	; 0x09
    2bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb4:	78 85       	ldd	r23, Y+8	; 0x08
    2bb6:	89 85       	ldd	r24, Y+9	; 0x09
    2bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	40 e8       	ldi	r20, 0x80	; 128
    2bc0:	5f e3       	ldi	r21, 0x3F	; 63
    2bc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bc6:	88 23       	and	r24, r24
    2bc8:	2c f4       	brge	.+10     	; 0x2bd4 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	9e 83       	std	Y+6, r25	; 0x06
    2bd0:	8d 83       	std	Y+5, r24	; 0x05
    2bd2:	3f c0       	rjmp	.+126    	; 0x2c52 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd6:	78 85       	ldd	r23, Y+8	; 0x08
    2bd8:	89 85       	ldd	r24, Y+9	; 0x09
    2bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	3f ef       	ldi	r19, 0xFF	; 255
    2be0:	4f e7       	ldi	r20, 0x7F	; 127
    2be2:	57 e4       	ldi	r21, 0x47	; 71
    2be4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2be8:	18 16       	cp	r1, r24
    2bea:	4c f5       	brge	.+82     	; 0x2c3e <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	40 e2       	ldi	r20, 0x20	; 32
    2bfa:	51 e4       	ldi	r21, 0x41	; 65
    2bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	bc 01       	movw	r22, r24
    2c06:	cd 01       	movw	r24, r26
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9e 83       	std	Y+6, r25	; 0x06
    2c12:	8d 83       	std	Y+5, r24	; 0x05
    2c14:	0f c0       	rjmp	.+30     	; 0x2c34 <LCD_displayCharacter+0x8ac>
    2c16:	80 e9       	ldi	r24, 0x90	; 144
    2c18:	91 e0       	ldi	r25, 0x01	; 1
    2c1a:	9c 83       	std	Y+4, r25	; 0x04
    2c1c:	8b 83       	std	Y+3, r24	; 0x03
    2c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c20:	9c 81       	ldd	r25, Y+4	; 0x04
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <LCD_displayCharacter+0x89a>
    2c26:	9c 83       	std	Y+4, r25	; 0x04
    2c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	9e 83       	std	Y+6, r25	; 0x06
    2c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c34:	8d 81       	ldd	r24, Y+5	; 0x05
    2c36:	9e 81       	ldd	r25, Y+6	; 0x06
    2c38:	00 97       	sbiw	r24, 0x00	; 0
    2c3a:	69 f7       	brne	.-38     	; 0x2c16 <LCD_displayCharacter+0x88e>
    2c3c:	14 c0       	rjmp	.+40     	; 0x2c66 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c40:	78 85       	ldd	r23, Y+8	; 0x08
    2c42:	89 85       	ldd	r24, Y+9	; 0x09
    2c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	9e 83       	std	Y+6, r25	; 0x06
    2c50:	8d 83       	std	Y+5, r24	; 0x05
    2c52:	8d 81       	ldd	r24, Y+5	; 0x05
    2c54:	9e 81       	ldd	r25, Y+6	; 0x06
    2c56:	9a 83       	std	Y+2, r25	; 0x02
    2c58:	89 83       	std	Y+1, r24	; 0x01
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	f1 f7       	brne	.-4      	; 0x2c5e <LCD_displayCharacter+0x8d6>
    2c62:	9a 83       	std	Y+2, r25	; 0x02
    2c64:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOW);
	_delay_ms(1); /* 13ns */

#endif

}//end LCD_displayCharacter
    2c66:	cd 59       	subi	r28, 0x9D	; 157
    2c68:	df 4f       	sbci	r29, 0xFF	; 255
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	1f 91       	pop	r17
    2c7a:	0f 91       	pop	r16
    2c7c:	08 95       	ret

00002c7e <LCD_init>:

void LCD_init(void){
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
    2c86:	2e 97       	sbiw	r28, 0x0e	; 14
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	de bf       	out	0x3e, r29	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_RS_PORT,LCD_RS_PIN,PIN_OUTPUT);
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	61 e0       	ldi	r22, 0x01	; 1
    2c96:	41 e0       	ldi	r20, 0x01	; 1
    2c98:	0e 94 75 07 	call	0xeea	; 0xeea <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_ENABLE_PORT,LCD_ENABLE_PIN,PIN_OUTPUT);
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	62 e0       	ldi	r22, 0x02	; 2
    2ca0:	41 e0       	ldi	r20, 0x01	; 1
    2ca2:	0e 94 75 07 	call	0xeea	; 0xeea <GPIO_setupPinDirection>
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	a0 ea       	ldi	r26, 0xA0	; 160
    2cac:	b1 e4       	ldi	r27, 0x41	; 65
    2cae:	8b 87       	std	Y+11, r24	; 0x0b
    2cb0:	9c 87       	std	Y+12, r25	; 0x0c
    2cb2:	ad 87       	std	Y+13, r26	; 0x0d
    2cb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	4a e7       	ldi	r20, 0x7A	; 122
    2cc4:	55 e4       	ldi	r21, 0x45	; 69
    2cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	8f 83       	std	Y+7, r24	; 0x07
    2cd0:	98 87       	std	Y+8, r25	; 0x08
    2cd2:	a9 87       	std	Y+9, r26	; 0x09
    2cd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd8:	78 85       	ldd	r23, Y+8	; 0x08
    2cda:	89 85       	ldd	r24, Y+9	; 0x09
    2cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e8       	ldi	r20, 0x80	; 128
    2ce4:	5f e3       	ldi	r21, 0x3F	; 63
    2ce6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cea:	88 23       	and	r24, r24
    2cec:	2c f4       	brge	.+10     	; 0x2cf8 <LCD_init+0x7a>
		__ticks = 1;
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	9e 83       	std	Y+6, r25	; 0x06
    2cf4:	8d 83       	std	Y+5, r24	; 0x05
    2cf6:	3f c0       	rjmp	.+126    	; 0x2d76 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfa:	78 85       	ldd	r23, Y+8	; 0x08
    2cfc:	89 85       	ldd	r24, Y+9	; 0x09
    2cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	3f ef       	ldi	r19, 0xFF	; 255
    2d04:	4f e7       	ldi	r20, 0x7F	; 127
    2d06:	57 e4       	ldi	r21, 0x47	; 71
    2d08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d0c:	18 16       	cp	r1, r24
    2d0e:	4c f5       	brge	.+82     	; 0x2d62 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	40 e2       	ldi	r20, 0x20	; 32
    2d1e:	51 e4       	ldi	r21, 0x41	; 65
    2d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	bc 01       	movw	r22, r24
    2d2a:	cd 01       	movw	r24, r26
    2d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	9e 83       	std	Y+6, r25	; 0x06
    2d36:	8d 83       	std	Y+5, r24	; 0x05
    2d38:	0f c0       	rjmp	.+30     	; 0x2d58 <LCD_init+0xda>
    2d3a:	80 e9       	ldi	r24, 0x90	; 144
    2d3c:	91 e0       	ldi	r25, 0x01	; 1
    2d3e:	9c 83       	std	Y+4, r25	; 0x04
    2d40:	8b 83       	std	Y+3, r24	; 0x03
    2d42:	8b 81       	ldd	r24, Y+3	; 0x03
    2d44:	9c 81       	ldd	r25, Y+4	; 0x04
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <LCD_init+0xc8>
    2d4a:	9c 83       	std	Y+4, r25	; 0x04
    2d4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d50:	9e 81       	ldd	r25, Y+6	; 0x06
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	9e 83       	std	Y+6, r25	; 0x06
    2d56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d58:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5c:	00 97       	sbiw	r24, 0x00	; 0
    2d5e:	69 f7       	brne	.-38     	; 0x2d3a <LCD_init+0xbc>
    2d60:	14 c0       	rjmp	.+40     	; 0x2d8a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d62:	6f 81       	ldd	r22, Y+7	; 0x07
    2d64:	78 85       	ldd	r23, Y+8	; 0x08
    2d66:	89 85       	ldd	r24, Y+9	; 0x09
    2d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	9e 83       	std	Y+6, r25	; 0x06
    2d74:	8d 83       	std	Y+5, r24	; 0x05
    2d76:	8d 81       	ldd	r24, Y+5	; 0x05
    2d78:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7a:	9a 83       	std	Y+2, r25	; 0x02
    2d7c:	89 83       	std	Y+1, r24	; 0x01
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	9a 81       	ldd	r25, Y+2	; 0x02
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	f1 f7       	brne	.-4      	; 0x2d82 <LCD_init+0x104>
    2d86:	9a 83       	std	Y+2, r25	; 0x02
    2d88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20); /* due to LCD hardware booting */

#if(LCD_DATA_BIT_MODE == 4)

	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB4,PIN_OUTPUT);
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	63 e0       	ldi	r22, 0x03	; 3
    2d8e:	41 e0       	ldi	r20, 0x01	; 1
    2d90:	0e 94 75 07 	call	0xeea	; 0xeea <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB5,PIN_OUTPUT);
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	64 e0       	ldi	r22, 0x04	; 4
    2d98:	41 e0       	ldi	r20, 0x01	; 1
    2d9a:	0e 94 75 07 	call	0xeea	; 0xeea <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB6,PIN_OUTPUT);
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	65 e0       	ldi	r22, 0x05	; 5
    2da2:	41 e0       	ldi	r20, 0x01	; 1
    2da4:	0e 94 75 07 	call	0xeea	; 0xeea <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT,LCD_DB7,PIN_OUTPUT);
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	66 e0       	ldi	r22, 0x06	; 6
    2dac:	41 e0       	ldi	r20, 0x01	; 1
    2dae:	0e 94 75 07 	call	0xeea	; 0xeea <GPIO_setupPinDirection>

	LCD_sendCommand(TWO_LINES_FOUR_BITS_MODE_INIT1);
    2db2:	83 e3       	ldi	r24, 0x33	; 51
    2db4:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINES_FOUR_BITS_MODE_INIT2);
    2db8:	82 e3       	ldi	r24, 0x32	; 50
    2dba:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINES_FOUR_BITS_MODE);
    2dbe:	88 e2       	ldi	r24, 0x28	; 40
    2dc0:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <LCD_sendCommand>

	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
	LCD_sendCommand(TWO_LINES_EIGHT_BITS_MODE); /* 2lines + 8-bits */

#endif
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    2dc4:	8c e0       	ldi	r24, 0x0C	; 12
    2dc6:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN); /* clear screen */
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <LCD_sendCommand>

}//end LCD_init
    2dd0:	2e 96       	adiw	r28, 0x0e	; 14
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	de bf       	out	0x3e, r29	; 62
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	cd bf       	out	0x3d, r28	; 61
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	08 95       	ret

00002de2 <LCD_displayString>:

void LCD_displayString(uint8 * str){
    2de2:	df 93       	push	r29
    2de4:	cf 93       	push	r28
    2de6:	00 d0       	rcall	.+0      	; 0x2de8 <LCD_displayString+0x6>
    2de8:	00 d0       	rcall	.+0      	; 0x2dea <LCD_displayString+0x8>
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
    2dee:	9c 83       	std	Y+4, r25	; 0x04
    2df0:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0; str[i] != '\0' ;i++){
    2df2:	1a 82       	std	Y+2, r1	; 0x02
    2df4:	19 82       	std	Y+1, r1	; 0x01
    2df6:	0f c0       	rjmp	.+30     	; 0x2e16 <LCD_displayString+0x34>
		LCD_displayCharacter(str[i]);
    2df8:	29 81       	ldd	r18, Y+1	; 0x01
    2dfa:	3a 81       	ldd	r19, Y+2	; 0x02
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2e00:	fc 01       	movw	r30, r24
    2e02:	e2 0f       	add	r30, r18
    2e04:	f3 1f       	adc	r31, r19
    2e06:	80 81       	ld	r24, Z
    2e08:	0e 94 c4 11 	call	0x2388	; 0x2388 <LCD_displayCharacter>

}//end LCD_init

void LCD_displayString(uint8 * str){
	int i;
	for(i=0; str[i] != '\0' ;i++){
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
    2e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e10:	01 96       	adiw	r24, 0x01	; 1
    2e12:	9a 83       	std	Y+2, r25	; 0x02
    2e14:	89 83       	std	Y+1, r24	; 0x01
    2e16:	29 81       	ldd	r18, Y+1	; 0x01
    2e18:	3a 81       	ldd	r19, Y+2	; 0x02
    2e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1e:	fc 01       	movw	r30, r24
    2e20:	e2 0f       	add	r30, r18
    2e22:	f3 1f       	adc	r31, r19
    2e24:	80 81       	ld	r24, Z
    2e26:	88 23       	and	r24, r24
    2e28:	39 f7       	brne	.-50     	; 0x2df8 <LCD_displayString+0x16>
		LCD_displayCharacter(str[i]);
	}//end for

}//end LCD_displayString
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	cf 91       	pop	r28
    2e34:	df 91       	pop	r29
    2e36:	08 95       	ret

00002e38 <LCD_moveCursor>:
 * 0x80 is the command for moving cursor 1000 0000  ( no address this far )
 * the missing parameters is the position of column and base of row
 * first row : 00	second row : 40		third row : 10	fourth row : 50
 * and position of column from 0 to F
 * */
void LCD_moveCursor(uint8 row,uint8 col){
    2e38:	df 93       	push	r29
    2e3a:	cf 93       	push	r28
    2e3c:	00 d0       	rcall	.+0      	; 0x2e3e <LCD_moveCursor+0x6>
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <LCD_moveCursor+0x8>
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	6a 83       	std	Y+2, r22	; 0x02

	switch(row){
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	28 2f       	mov	r18, r24
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	3c 83       	std	Y+4, r19	; 0x04
    2e50:	2b 83       	std	Y+3, r18	; 0x03
    2e52:	8b 81       	ldd	r24, Y+3	; 0x03
    2e54:	9c 81       	ldd	r25, Y+4	; 0x04
    2e56:	82 30       	cpi	r24, 0x02	; 2
    2e58:	91 05       	cpc	r25, r1
    2e5a:	d9 f0       	breq	.+54     	; 0x2e92 <LCD_moveCursor+0x5a>
    2e5c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e5e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e60:	23 30       	cpi	r18, 0x03	; 3
    2e62:	31 05       	cpc	r19, r1
    2e64:	34 f4       	brge	.+12     	; 0x2e72 <LCD_moveCursor+0x3a>
    2e66:	8b 81       	ldd	r24, Y+3	; 0x03
    2e68:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6a:	81 30       	cpi	r24, 0x01	; 1
    2e6c:	91 05       	cpc	r25, r1
    2e6e:	61 f0       	breq	.+24     	; 0x2e88 <LCD_moveCursor+0x50>
    2e70:	1f c0       	rjmp	.+62     	; 0x2eb0 <LCD_moveCursor+0x78>
    2e72:	2b 81       	ldd	r18, Y+3	; 0x03
    2e74:	3c 81       	ldd	r19, Y+4	; 0x04
    2e76:	23 30       	cpi	r18, 0x03	; 3
    2e78:	31 05       	cpc	r19, r1
    2e7a:	81 f0       	breq	.+32     	; 0x2e9c <LCD_moveCursor+0x64>
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e80:	84 30       	cpi	r24, 0x04	; 4
    2e82:	91 05       	cpc	r25, r1
    2e84:	81 f0       	breq	.+32     	; 0x2ea6 <LCD_moveCursor+0x6e>
    2e86:	14 c0       	rjmp	.+40     	; 0x2eb0 <LCD_moveCursor+0x78>

	case 1:
		return LCD_sendCommand(0x80 + col);
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	80 58       	subi	r24, 0x80	; 128
    2e8c:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <LCD_sendCommand>
    2e90:	12 c0       	rjmp	.+36     	; 0x2eb6 <LCD_moveCursor+0x7e>
	case 2:
		return LCD_sendCommand(0x80 + 0x40 + col);
    2e92:	8a 81       	ldd	r24, Y+2	; 0x02
    2e94:	80 54       	subi	r24, 0x40	; 64
    2e96:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <LCD_sendCommand>
    2e9a:	0d c0       	rjmp	.+26     	; 0x2eb6 <LCD_moveCursor+0x7e>
	case 3:
		return LCD_sendCommand(0x80 + 0x10 + col);
    2e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9e:	80 57       	subi	r24, 0x70	; 112
    2ea0:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <LCD_sendCommand>
    2ea4:	08 c0       	rjmp	.+16     	; 0x2eb6 <LCD_moveCursor+0x7e>
	case 4:
		return LCD_sendCommand(0x80 + 0x50 + col);
    2ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea8:	80 53       	subi	r24, 0x30	; 48
    2eaa:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <LCD_sendCommand>
    2eae:	03 c0       	rjmp	.+6      	; 0x2eb6 <LCD_moveCursor+0x7e>
	default:
		return LCD_sendCommand(0x80);
    2eb0:	80 e8       	ldi	r24, 0x80	; 128
    2eb2:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <LCD_sendCommand>
	}//end switch

}//end LCD_moveCursor
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8* string, uint8 row, uint8 col){
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <LCD_displayStringRowColumn+0x6>
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <LCD_displayStringRowColumn+0x8>
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	9a 83       	std	Y+2, r25	; 0x02
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    2ed4:	6b 83       	std	Y+3, r22	; 0x03
    2ed6:	4c 83       	std	Y+4, r20	; 0x04

	LCD_moveCursor(row,col);
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	6c 81       	ldd	r22, Y+4	; 0x04
    2edc:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <LCD_moveCursor>
	LCD_displayString(string);
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee4:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <LCD_displayString>

}//end LCD_displayStringRowColumn
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <LCD_clearScreen>:

void LCD_clearScreen(void){
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62

	LCD_sendCommand(CLEAR_SCREEN);
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <LCD_sendCommand>

}//end LCD_clearScreen
    2f04:	cf 91       	pop	r28
    2f06:	df 91       	pop	r29
    2f08:	08 95       	ret

00002f0a <LCD_intgerToString>:

void LCD_intgerToString(uint32 data){
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	64 97       	sbiw	r28, 0x14	; 20
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	69 8b       	std	Y+17, r22	; 0x11
    2f20:	7a 8b       	std	Y+18, r23	; 0x12
    2f22:	8b 8b       	std	Y+19, r24	; 0x13
    2f24:	9c 8b       	std	Y+20, r25	; 0x14

	uint8 buff[16]; /* String to hold the ASCII result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f26:	89 89       	ldd	r24, Y+17	; 0x11
    2f28:	9a 89       	ldd	r25, Y+18	; 0x12
    2f2a:	9e 01       	movw	r18, r28
    2f2c:	2f 5f       	subi	r18, 0xFF	; 255
    2f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f30:	b9 01       	movw	r22, r18
    2f32:	4a e0       	ldi	r20, 0x0A	; 10
    2f34:	50 e0       	ldi	r21, 0x00	; 0
    2f36:	0e 94 29 25 	call	0x4a52	; 0x4a52 <itoa>
	LCD_displayString(buff); /* Display the string */
    2f3a:	ce 01       	movw	r24, r28
    2f3c:	01 96       	adiw	r24, 0x01	; 1
    2f3e:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <LCD_displayString>

}//end LCD_intgerToString
    2f42:	64 96       	adiw	r28, 0x14	; 20
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <LS_init>:
#include"MCAL_Atmega32/GPIO.h"

/***************************************************************************
 *                          Functions definition
 *************************************************************************** */
void LS_init(uint8 LS_num){
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	0f 92       	push	r0
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	89 83       	std	Y+1, r24	; 0x01

	GPIO_setupPinDirection(LS_PORT,LS_num,PIN_INPUT);
    2f60:	82 e0       	ldi	r24, 0x02	; 2
    2f62:	69 81       	ldd	r22, Y+1	; 0x01
    2f64:	40 e0       	ldi	r20, 0x00	; 0
    2f66:	0e 94 75 07 	call	0xeea	; 0xeea <GPIO_setupPinDirection>
}
    2f6a:	0f 90       	pop	r0
    2f6c:	cf 91       	pop	r28
    2f6e:	df 91       	pop	r29
    2f70:	08 95       	ret

00002f72 <LS_getReading>:

uint8 LS_getReading(uint8 LS_num){
    2f72:	df 93       	push	r29
    2f74:	cf 93       	push	r28
    2f76:	0f 92       	push	r0
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62
    2f7c:	89 83       	std	Y+1, r24	; 0x01

	return GPIO_readPin(LS_PORT,LS_num);
    2f7e:	82 e0       	ldi	r24, 0x02	; 2
    2f80:	69 81       	ldd	r22, Y+1	; 0x01
    2f82:	0e 94 4b 09 	call	0x1296	; 0x1296 <GPIO_readPin>
}
    2f86:	0f 90       	pop	r0
    2f88:	cf 91       	pop	r28
    2f8a:	df 91       	pop	r29
    2f8c:	08 95       	ret

00002f8e <SERVO_init>:

/*****************************************************************************************
 *                                   FUNCTIONS DEFINITION
 *****************************************************************************************/

void SERVO_init(void){
    2f8e:	df 93       	push	r29
    2f90:	cf 93       	push	r28
    2f92:	cd b7       	in	r28, 0x3d	; 61
    2f94:	de b7       	in	r29, 0x3e	; 62

	TIMER1_init(&configs);/* start at 0 degree both motors */
    2f96:	8d ea       	ldi	r24, 0xAD	; 173
    2f98:	91 e0       	ldi	r25, 0x01	; 1
    2f9a:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TIMER1_init>

}
    2f9e:	cf 91       	pop	r28
    2fa0:	df 91       	pop	r29
    2fa2:	08 95       	ret

00002fa4 <SERVO_angle>:

void SERVO_angle(uint8 servo_num,uint8 degree){
    2fa4:	df 93       	push	r29
    2fa6:	cf 93       	push	r28
    2fa8:	00 d0       	rcall	.+0      	; 0x2faa <SERVO_angle+0x6>
    2faa:	00 d0       	rcall	.+0      	; 0x2fac <SERVO_angle+0x8>
    2fac:	00 d0       	rcall	.+0      	; 0x2fae <SERVO_angle+0xa>
    2fae:	cd b7       	in	r28, 0x3d	; 61
    2fb0:	de b7       	in	r29, 0x3e	; 62
    2fb2:	8d 83       	std	Y+5, r24	; 0x05
    2fb4:	6e 83       	std	Y+6, r22	; 0x06

	float32 dutyCycle;
	/* map function in arduino */
	dutyCycle = degree * (float32)5/180 + 5;
    2fb6:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb8:	88 2f       	mov	r24, r24
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	aa 27       	eor	r26, r26
    2fbe:	97 fd       	sbrc	r25, 7
    2fc0:	a0 95       	com	r26
    2fc2:	ba 2f       	mov	r27, r26
    2fc4:	bc 01       	movw	r22, r24
    2fc6:	cd 01       	movw	r24, r26
    2fc8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	bc 01       	movw	r22, r24
    2fd2:	cd 01       	movw	r24, r26
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	40 ea       	ldi	r20, 0xA0	; 160
    2fda:	50 e4       	ldi	r21, 0x40	; 64
    2fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	bc 01       	movw	r22, r24
    2fe6:	cd 01       	movw	r24, r26
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	44 e3       	ldi	r20, 0x34	; 52
    2fee:	53 e4       	ldi	r21, 0x43	; 67
    2ff0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	bc 01       	movw	r22, r24
    2ffa:	cd 01       	movw	r24, r26
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 ea       	ldi	r20, 0xA0	; 160
    3002:	50 e4       	ldi	r21, 0x40	; 64
    3004:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	89 83       	std	Y+1, r24	; 0x01
    300e:	9a 83       	std	Y+2, r25	; 0x02
    3010:	ab 83       	std	Y+3, r26	; 0x03
    3012:	bc 83       	std	Y+4, r27	; 0x04

	if(servo_num == 1)
    3014:	8d 81       	ldd	r24, Y+5	; 0x05
    3016:	81 30       	cpi	r24, 0x01	; 1
    3018:	69 f4       	brne	.+26     	; 0x3034 <SERVO_angle+0x90>
		configs.UNITA_dutyCycle = dutyCycle;
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	9a 81       	ldd	r25, Y+2	; 0x02
    301e:	ab 81       	ldd	r26, Y+3	; 0x03
    3020:	bc 81       	ldd	r27, Y+4	; 0x04
    3022:	80 93 b3 01 	sts	0x01B3, r24
    3026:	90 93 b4 01 	sts	0x01B4, r25
    302a:	a0 93 b5 01 	sts	0x01B5, r26
    302e:	b0 93 b6 01 	sts	0x01B6, r27
    3032:	0c c0       	rjmp	.+24     	; 0x304c <SERVO_angle+0xa8>
	else
		configs.UNITB_dutyCycle = dutyCycle;
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	9a 81       	ldd	r25, Y+2	; 0x02
    3038:	ab 81       	ldd	r26, Y+3	; 0x03
    303a:	bc 81       	ldd	r27, Y+4	; 0x04
    303c:	80 93 b7 01 	sts	0x01B7, r24
    3040:	90 93 b8 01 	sts	0x01B8, r25
    3044:	a0 93 b9 01 	sts	0x01B9, r26
    3048:	b0 93 ba 01 	sts	0x01BA, r27

	TIMER1_init(&configs);
    304c:	8d ea       	ldi	r24, 0xAD	; 173
    304e:	91 e0       	ldi	r25, 0x01	; 1
    3050:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TIMER1_init>
}
    3054:	26 96       	adiw	r28, 0x06	; 6
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
    3060:	cf 91       	pop	r28
    3062:	df 91       	pop	r29
    3064:	08 95       	ret

00003066 <STEPPERMOTOR_init>:

/******************************************************************************************
 *                                    FUNCTIONS DEFINITION
 ******************************************************************************************/

void STEPPERMOTOR_init(uint8 motor_number){
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	0f 92       	push	r0
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	89 83       	std	Y+1, r24	; 0x01

	GPIO_setupPinDirection(STEPPERMOTOR_PORT, motor_number, PIN_OUTPUT);
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	69 81       	ldd	r22, Y+1	; 0x01
    3076:	41 e0       	ldi	r20, 0x01	; 1
    3078:	0e 94 75 07 	call	0xeea	; 0xeea <GPIO_setupPinDirection>
	GPIO_setupPinDirection(STEPPERMOTOR_PORT, motor_number + 1, PIN_OUTPUT);
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	98 2f       	mov	r25, r24
    3080:	9f 5f       	subi	r25, 0xFF	; 255
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	69 2f       	mov	r22, r25
    3086:	41 e0       	ldi	r20, 0x01	; 1
    3088:	0e 94 75 07 	call	0xeea	; 0xeea <GPIO_setupPinDirection>
}
    308c:	0f 90       	pop	r0
    308e:	cf 91       	pop	r28
    3090:	df 91       	pop	r29
    3092:	08 95       	ret

00003094 <STEPPERMOTOR_steps>:

void STEPPERMOTOR_steps(uint8 motor_number ,uint32 steps,STEPPERMOTOR_directionType direction){
    3094:	df 93       	push	r29
    3096:	cf 93       	push	r28
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	a2 97       	sbiw	r28, 0x22	; 34
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	8d 8f       	std	Y+29, r24	; 0x1d
    30aa:	4e 8f       	std	Y+30, r20	; 0x1e
    30ac:	5f 8f       	std	Y+31, r21	; 0x1f
    30ae:	68 a3       	std	Y+32, r22	; 0x20
    30b0:	79 a3       	std	Y+33, r23	; 0x21
    30b2:	2a a3       	std	Y+34, r18	; 0x22

	uint32 i;

	GPIO_writePin(STEPPERMOTOR_PORT,motor_number+1,direction);
    30b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30b6:	98 2f       	mov	r25, r24
    30b8:	9f 5f       	subi	r25, 0xFF	; 255
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	69 2f       	mov	r22, r25
    30be:	4a a1       	ldd	r20, Y+34	; 0x22
    30c0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>

	for(i=0; i<steps; i++ ){
    30c4:	19 8e       	std	Y+25, r1	; 0x19
    30c6:	1a 8e       	std	Y+26, r1	; 0x1a
    30c8:	1b 8e       	std	Y+27, r1	; 0x1b
    30ca:	1c 8e       	std	Y+28, r1	; 0x1c
    30cc:	d3 c0       	rjmp	.+422    	; 0x3274 <STEPPERMOTOR_steps+0x1e0>

		GPIO_writePin(STEPPERMOTOR_PORT,motor_number,LOW);
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    30d2:	40 e0       	ldi	r20, 0x00	; 0
    30d4:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
		GPIO_writePin(STEPPERMOTOR_PORT,motor_number,HIGH);
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	6d 8d       	ldd	r22, Y+29	; 0x1d
    30dc:	41 e0       	ldi	r20, 0x01	; 1
    30de:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	a0 e8       	ldi	r26, 0x80	; 128
    30e8:	bf e3       	ldi	r27, 0x3F	; 63
    30ea:	8d 8b       	std	Y+21, r24	; 0x15
    30ec:	9e 8b       	std	Y+22, r25	; 0x16
    30ee:	af 8b       	std	Y+23, r26	; 0x17
    30f0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30f2:	6d 89       	ldd	r22, Y+21	; 0x15
    30f4:	7e 89       	ldd	r23, Y+22	; 0x16
    30f6:	8f 89       	ldd	r24, Y+23	; 0x17
    30f8:	98 8d       	ldd	r25, Y+24	; 0x18
    30fa:	2b ea       	ldi	r18, 0xAB	; 171
    30fc:	3a ea       	ldi	r19, 0xAA	; 170
    30fe:	4a ea       	ldi	r20, 0xAA	; 170
    3100:	50 e4       	ldi	r21, 0x40	; 64
    3102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	89 8b       	std	Y+17, r24	; 0x11
    310c:	9a 8b       	std	Y+18, r25	; 0x12
    310e:	ab 8b       	std	Y+19, r26	; 0x13
    3110:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3112:	69 89       	ldd	r22, Y+17	; 0x11
    3114:	7a 89       	ldd	r23, Y+18	; 0x12
    3116:	8b 89       	ldd	r24, Y+19	; 0x13
    3118:	9c 89       	ldd	r25, Y+20	; 0x14
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	40 e8       	ldi	r20, 0x80	; 128
    3120:	5f e3       	ldi	r21, 0x3F	; 63
    3122:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3126:	88 23       	and	r24, r24
    3128:	1c f4       	brge	.+6      	; 0x3130 <STEPPERMOTOR_steps+0x9c>
		__ticks = 1;
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	88 8b       	std	Y+16, r24	; 0x10
    312e:	91 c0       	rjmp	.+290    	; 0x3252 <STEPPERMOTOR_steps+0x1be>
	else if (__tmp > 255)
    3130:	69 89       	ldd	r22, Y+17	; 0x11
    3132:	7a 89       	ldd	r23, Y+18	; 0x12
    3134:	8b 89       	ldd	r24, Y+19	; 0x13
    3136:	9c 89       	ldd	r25, Y+20	; 0x14
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	4f e7       	ldi	r20, 0x7F	; 127
    313e:	53 e4       	ldi	r21, 0x43	; 67
    3140:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3144:	18 16       	cp	r1, r24
    3146:	0c f0       	brlt	.+2      	; 0x314a <STEPPERMOTOR_steps+0xb6>
    3148:	7b c0       	rjmp	.+246    	; 0x3240 <STEPPERMOTOR_steps+0x1ac>
	{
		_delay_ms(__us / 1000.0);
    314a:	6d 89       	ldd	r22, Y+21	; 0x15
    314c:	7e 89       	ldd	r23, Y+22	; 0x16
    314e:	8f 89       	ldd	r24, Y+23	; 0x17
    3150:	98 8d       	ldd	r25, Y+24	; 0x18
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	4a e7       	ldi	r20, 0x7A	; 122
    3158:	54 e4       	ldi	r21, 0x44	; 68
    315a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	8c 87       	std	Y+12, r24	; 0x0c
    3164:	9d 87       	std	Y+13, r25	; 0x0d
    3166:	ae 87       	std	Y+14, r26	; 0x0e
    3168:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    316a:	6c 85       	ldd	r22, Y+12	; 0x0c
    316c:	7d 85       	ldd	r23, Y+13	; 0x0d
    316e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3170:	9f 85       	ldd	r25, Y+15	; 0x0f
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	4a e7       	ldi	r20, 0x7A	; 122
    3178:	55 e4       	ldi	r21, 0x45	; 69
    317a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	88 87       	std	Y+8, r24	; 0x08
    3184:	99 87       	std	Y+9, r25	; 0x09
    3186:	aa 87       	std	Y+10, r26	; 0x0a
    3188:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    318a:	68 85       	ldd	r22, Y+8	; 0x08
    318c:	79 85       	ldd	r23, Y+9	; 0x09
    318e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3190:	9b 85       	ldd	r25, Y+11	; 0x0b
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	40 e8       	ldi	r20, 0x80	; 128
    3198:	5f e3       	ldi	r21, 0x3F	; 63
    319a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    319e:	88 23       	and	r24, r24
    31a0:	2c f4       	brge	.+10     	; 0x31ac <STEPPERMOTOR_steps+0x118>
		__ticks = 1;
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	9f 83       	std	Y+7, r25	; 0x07
    31a8:	8e 83       	std	Y+6, r24	; 0x06
    31aa:	3f c0       	rjmp	.+126    	; 0x322a <STEPPERMOTOR_steps+0x196>
	else if (__tmp > 65535)
    31ac:	68 85       	ldd	r22, Y+8	; 0x08
    31ae:	79 85       	ldd	r23, Y+9	; 0x09
    31b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    31b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	3f ef       	ldi	r19, 0xFF	; 255
    31b8:	4f e7       	ldi	r20, 0x7F	; 127
    31ba:	57 e4       	ldi	r21, 0x47	; 71
    31bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31c0:	18 16       	cp	r1, r24
    31c2:	4c f5       	brge	.+82     	; 0x3216 <STEPPERMOTOR_steps+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    31c6:	7d 85       	ldd	r23, Y+13	; 0x0d
    31c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    31ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	40 e2       	ldi	r20, 0x20	; 32
    31d2:	51 e4       	ldi	r21, 0x41	; 65
    31d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d8:	dc 01       	movw	r26, r24
    31da:	cb 01       	movw	r24, r22
    31dc:	bc 01       	movw	r22, r24
    31de:	cd 01       	movw	r24, r26
    31e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e4:	dc 01       	movw	r26, r24
    31e6:	cb 01       	movw	r24, r22
    31e8:	9f 83       	std	Y+7, r25	; 0x07
    31ea:	8e 83       	std	Y+6, r24	; 0x06
    31ec:	0f c0       	rjmp	.+30     	; 0x320c <STEPPERMOTOR_steps+0x178>
    31ee:	80 e9       	ldi	r24, 0x90	; 144
    31f0:	91 e0       	ldi	r25, 0x01	; 1
    31f2:	9d 83       	std	Y+5, r25	; 0x05
    31f4:	8c 83       	std	Y+4, r24	; 0x04
    31f6:	8c 81       	ldd	r24, Y+4	; 0x04
    31f8:	9d 81       	ldd	r25, Y+5	; 0x05
    31fa:	01 97       	sbiw	r24, 0x01	; 1
    31fc:	f1 f7       	brne	.-4      	; 0x31fa <STEPPERMOTOR_steps+0x166>
    31fe:	9d 83       	std	Y+5, r25	; 0x05
    3200:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3202:	8e 81       	ldd	r24, Y+6	; 0x06
    3204:	9f 81       	ldd	r25, Y+7	; 0x07
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	9f 83       	std	Y+7, r25	; 0x07
    320a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320c:	8e 81       	ldd	r24, Y+6	; 0x06
    320e:	9f 81       	ldd	r25, Y+7	; 0x07
    3210:	00 97       	sbiw	r24, 0x00	; 0
    3212:	69 f7       	brne	.-38     	; 0x31ee <STEPPERMOTOR_steps+0x15a>
    3214:	24 c0       	rjmp	.+72     	; 0x325e <STEPPERMOTOR_steps+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3216:	68 85       	ldd	r22, Y+8	; 0x08
    3218:	79 85       	ldd	r23, Y+9	; 0x09
    321a:	8a 85       	ldd	r24, Y+10	; 0x0a
    321c:	9b 85       	ldd	r25, Y+11	; 0x0b
    321e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	9f 83       	std	Y+7, r25	; 0x07
    3228:	8e 83       	std	Y+6, r24	; 0x06
    322a:	8e 81       	ldd	r24, Y+6	; 0x06
    322c:	9f 81       	ldd	r25, Y+7	; 0x07
    322e:	9b 83       	std	Y+3, r25	; 0x03
    3230:	8a 83       	std	Y+2, r24	; 0x02
    3232:	8a 81       	ldd	r24, Y+2	; 0x02
    3234:	9b 81       	ldd	r25, Y+3	; 0x03
    3236:	01 97       	sbiw	r24, 0x01	; 1
    3238:	f1 f7       	brne	.-4      	; 0x3236 <STEPPERMOTOR_steps+0x1a2>
    323a:	9b 83       	std	Y+3, r25	; 0x03
    323c:	8a 83       	std	Y+2, r24	; 0x02
    323e:	0f c0       	rjmp	.+30     	; 0x325e <STEPPERMOTOR_steps+0x1ca>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3240:	69 89       	ldd	r22, Y+17	; 0x11
    3242:	7a 89       	ldd	r23, Y+18	; 0x12
    3244:	8b 89       	ldd	r24, Y+19	; 0x13
    3246:	9c 89       	ldd	r25, Y+20	; 0x14
    3248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	88 8b       	std	Y+16, r24	; 0x10
    3252:	88 89       	ldd	r24, Y+16	; 0x10
    3254:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3256:	89 81       	ldd	r24, Y+1	; 0x01
    3258:	8a 95       	dec	r24
    325a:	f1 f7       	brne	.-4      	; 0x3258 <STEPPERMOTOR_steps+0x1c4>
    325c:	89 83       	std	Y+1, r24	; 0x01

	uint32 i;

	GPIO_writePin(STEPPERMOTOR_PORT,motor_number+1,direction);

	for(i=0; i<steps; i++ ){
    325e:	89 8d       	ldd	r24, Y+25	; 0x19
    3260:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3262:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3264:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3266:	01 96       	adiw	r24, 0x01	; 1
    3268:	a1 1d       	adc	r26, r1
    326a:	b1 1d       	adc	r27, r1
    326c:	89 8f       	std	Y+25, r24	; 0x19
    326e:	9a 8f       	std	Y+26, r25	; 0x1a
    3270:	ab 8f       	std	Y+27, r26	; 0x1b
    3272:	bc 8f       	std	Y+28, r27	; 0x1c
    3274:	29 8d       	ldd	r18, Y+25	; 0x19
    3276:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3278:	4b 8d       	ldd	r20, Y+27	; 0x1b
    327a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    327c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    327e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3280:	a8 a1       	ldd	r26, Y+32	; 0x20
    3282:	b9 a1       	ldd	r27, Y+33	; 0x21
    3284:	28 17       	cp	r18, r24
    3286:	39 07       	cpc	r19, r25
    3288:	4a 07       	cpc	r20, r26
    328a:	5b 07       	cpc	r21, r27
    328c:	08 f4       	brcc	.+2      	; 0x3290 <STEPPERMOTOR_steps+0x1fc>
    328e:	1f cf       	rjmp	.-450    	; 0x30ce <STEPPERMOTOR_steps+0x3a>

		GPIO_writePin(STEPPERMOTOR_PORT,motor_number,LOW);
		GPIO_writePin(STEPPERMOTOR_PORT,motor_number,HIGH);
		_delay_us(1);
	}
}
    3290:	a2 96       	adiw	r28, 0x22	; 34
    3292:	0f b6       	in	r0, 0x3f	; 63
    3294:	f8 94       	cli
    3296:	de bf       	out	0x3e, r29	; 62
    3298:	0f be       	out	0x3f, r0	; 63
    329a:	cd bf       	out	0x3d, r28	; 61
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	08 95       	ret

000032a2 <STEPPERMOTOR_moveTillLS>:

void STEPPERMOTOR_moveTillLS(uint8 motor_number,STEPPERMOTOR_directionType direction,uint8 LS_number){
    32a2:	df 93       	push	r29
    32a4:	cf 93       	push	r28
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
    32aa:	6b 97       	sbiw	r28, 0x1b	; 27
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	89 8f       	std	Y+25, r24	; 0x19
    32b8:	6a 8f       	std	Y+26, r22	; 0x1a
    32ba:	4b 8f       	std	Y+27, r20	; 0x1b

	GPIO_writePin(STEPPERMOTOR_PORT,motor_number+1,direction);
    32bc:	89 8d       	ldd	r24, Y+25	; 0x19
    32be:	98 2f       	mov	r25, r24
    32c0:	9f 5f       	subi	r25, 0xFF	; 255
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	69 2f       	mov	r22, r25
    32c6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    32c8:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>

	for(;;){

		if(LS_getReading(LS_number) == LS_OBJECT_DETECTED)
    32cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ce:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <LS_getReading>
    32d2:	88 23       	and	r24, r24
    32d4:	09 f4       	brne	.+2      	; 0x32d8 <STEPPERMOTOR_moveTillLS+0x36>
    32d6:	c9 c0       	rjmp	.+402    	; 0x346a <STEPPERMOTOR_moveTillLS+0x1c8>
			return;

		GPIO_writePin(STEPPERMOTOR_PORT,motor_number,LOW);
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	69 8d       	ldd	r22, Y+25	; 0x19
    32dc:	40 e0       	ldi	r20, 0x00	; 0
    32de:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
		GPIO_writePin(STEPPERMOTOR_PORT,motor_number,HIGH);
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	69 8d       	ldd	r22, Y+25	; 0x19
    32e6:	41 e0       	ldi	r20, 0x01	; 1
    32e8:	0e 94 60 08 	call	0x10c0	; 0x10c0 <GPIO_writePin>
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	a0 e8       	ldi	r26, 0x80	; 128
    32f2:	bf e3       	ldi	r27, 0x3F	; 63
    32f4:	8d 8b       	std	Y+21, r24	; 0x15
    32f6:	9e 8b       	std	Y+22, r25	; 0x16
    32f8:	af 8b       	std	Y+23, r26	; 0x17
    32fa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32fc:	6d 89       	ldd	r22, Y+21	; 0x15
    32fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3300:	8f 89       	ldd	r24, Y+23	; 0x17
    3302:	98 8d       	ldd	r25, Y+24	; 0x18
    3304:	2b ea       	ldi	r18, 0xAB	; 171
    3306:	3a ea       	ldi	r19, 0xAA	; 170
    3308:	4a ea       	ldi	r20, 0xAA	; 170
    330a:	50 e4       	ldi	r21, 0x40	; 64
    330c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	89 8b       	std	Y+17, r24	; 0x11
    3316:	9a 8b       	std	Y+18, r25	; 0x12
    3318:	ab 8b       	std	Y+19, r26	; 0x13
    331a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    331c:	69 89       	ldd	r22, Y+17	; 0x11
    331e:	7a 89       	ldd	r23, Y+18	; 0x12
    3320:	8b 89       	ldd	r24, Y+19	; 0x13
    3322:	9c 89       	ldd	r25, Y+20	; 0x14
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e8       	ldi	r20, 0x80	; 128
    332a:	5f e3       	ldi	r21, 0x3F	; 63
    332c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3330:	88 23       	and	r24, r24
    3332:	1c f4       	brge	.+6      	; 0x333a <STEPPERMOTOR_moveTillLS+0x98>
		__ticks = 1;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	88 8b       	std	Y+16, r24	; 0x10
    3338:	91 c0       	rjmp	.+290    	; 0x345c <STEPPERMOTOR_moveTillLS+0x1ba>
	else if (__tmp > 255)
    333a:	69 89       	ldd	r22, Y+17	; 0x11
    333c:	7a 89       	ldd	r23, Y+18	; 0x12
    333e:	8b 89       	ldd	r24, Y+19	; 0x13
    3340:	9c 89       	ldd	r25, Y+20	; 0x14
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	4f e7       	ldi	r20, 0x7F	; 127
    3348:	53 e4       	ldi	r21, 0x43	; 67
    334a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334e:	18 16       	cp	r1, r24
    3350:	0c f0       	brlt	.+2      	; 0x3354 <STEPPERMOTOR_moveTillLS+0xb2>
    3352:	7b c0       	rjmp	.+246    	; 0x344a <STEPPERMOTOR_moveTillLS+0x1a8>
	{
		_delay_ms(__us / 1000.0);
    3354:	6d 89       	ldd	r22, Y+21	; 0x15
    3356:	7e 89       	ldd	r23, Y+22	; 0x16
    3358:	8f 89       	ldd	r24, Y+23	; 0x17
    335a:	98 8d       	ldd	r25, Y+24	; 0x18
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	4a e7       	ldi	r20, 0x7A	; 122
    3362:	54 e4       	ldi	r21, 0x44	; 68
    3364:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	8c 87       	std	Y+12, r24	; 0x0c
    336e:	9d 87       	std	Y+13, r25	; 0x0d
    3370:	ae 87       	std	Y+14, r26	; 0x0e
    3372:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3374:	6c 85       	ldd	r22, Y+12	; 0x0c
    3376:	7d 85       	ldd	r23, Y+13	; 0x0d
    3378:	8e 85       	ldd	r24, Y+14	; 0x0e
    337a:	9f 85       	ldd	r25, Y+15	; 0x0f
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	4a e7       	ldi	r20, 0x7A	; 122
    3382:	55 e4       	ldi	r21, 0x45	; 69
    3384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	88 87       	std	Y+8, r24	; 0x08
    338e:	99 87       	std	Y+9, r25	; 0x09
    3390:	aa 87       	std	Y+10, r26	; 0x0a
    3392:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3394:	68 85       	ldd	r22, Y+8	; 0x08
    3396:	79 85       	ldd	r23, Y+9	; 0x09
    3398:	8a 85       	ldd	r24, Y+10	; 0x0a
    339a:	9b 85       	ldd	r25, Y+11	; 0x0b
    339c:	20 e0       	ldi	r18, 0x00	; 0
    339e:	30 e0       	ldi	r19, 0x00	; 0
    33a0:	40 e8       	ldi	r20, 0x80	; 128
    33a2:	5f e3       	ldi	r21, 0x3F	; 63
    33a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33a8:	88 23       	and	r24, r24
    33aa:	2c f4       	brge	.+10     	; 0x33b6 <STEPPERMOTOR_moveTillLS+0x114>
		__ticks = 1;
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	9f 83       	std	Y+7, r25	; 0x07
    33b2:	8e 83       	std	Y+6, r24	; 0x06
    33b4:	3f c0       	rjmp	.+126    	; 0x3434 <STEPPERMOTOR_moveTillLS+0x192>
	else if (__tmp > 65535)
    33b6:	68 85       	ldd	r22, Y+8	; 0x08
    33b8:	79 85       	ldd	r23, Y+9	; 0x09
    33ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    33bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	3f ef       	ldi	r19, 0xFF	; 255
    33c2:	4f e7       	ldi	r20, 0x7F	; 127
    33c4:	57 e4       	ldi	r21, 0x47	; 71
    33c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ca:	18 16       	cp	r1, r24
    33cc:	4c f5       	brge	.+82     	; 0x3420 <STEPPERMOTOR_moveTillLS+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    33d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    33d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    33d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	40 e2       	ldi	r20, 0x20	; 32
    33dc:	51 e4       	ldi	r21, 0x41	; 65
    33de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e2:	dc 01       	movw	r26, r24
    33e4:	cb 01       	movw	r24, r22
    33e6:	bc 01       	movw	r22, r24
    33e8:	cd 01       	movw	r24, r26
    33ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	9f 83       	std	Y+7, r25	; 0x07
    33f4:	8e 83       	std	Y+6, r24	; 0x06
    33f6:	0f c0       	rjmp	.+30     	; 0x3416 <STEPPERMOTOR_moveTillLS+0x174>
    33f8:	80 e9       	ldi	r24, 0x90	; 144
    33fa:	91 e0       	ldi	r25, 0x01	; 1
    33fc:	9d 83       	std	Y+5, r25	; 0x05
    33fe:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3400:	8c 81       	ldd	r24, Y+4	; 0x04
    3402:	9d 81       	ldd	r25, Y+5	; 0x05
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	f1 f7       	brne	.-4      	; 0x3404 <STEPPERMOTOR_moveTillLS+0x162>
    3408:	9d 83       	std	Y+5, r25	; 0x05
    340a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    340c:	8e 81       	ldd	r24, Y+6	; 0x06
    340e:	9f 81       	ldd	r25, Y+7	; 0x07
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	9f 83       	std	Y+7, r25	; 0x07
    3414:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3416:	8e 81       	ldd	r24, Y+6	; 0x06
    3418:	9f 81       	ldd	r25, Y+7	; 0x07
    341a:	00 97       	sbiw	r24, 0x00	; 0
    341c:	69 f7       	brne	.-38     	; 0x33f8 <STEPPERMOTOR_moveTillLS+0x156>
    341e:	56 cf       	rjmp	.-340    	; 0x32cc <STEPPERMOTOR_moveTillLS+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3420:	68 85       	ldd	r22, Y+8	; 0x08
    3422:	79 85       	ldd	r23, Y+9	; 0x09
    3424:	8a 85       	ldd	r24, Y+10	; 0x0a
    3426:	9b 85       	ldd	r25, Y+11	; 0x0b
    3428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	9f 83       	std	Y+7, r25	; 0x07
    3432:	8e 83       	std	Y+6, r24	; 0x06
    3434:	8e 81       	ldd	r24, Y+6	; 0x06
    3436:	9f 81       	ldd	r25, Y+7	; 0x07
    3438:	9b 83       	std	Y+3, r25	; 0x03
    343a:	8a 83       	std	Y+2, r24	; 0x02
    343c:	8a 81       	ldd	r24, Y+2	; 0x02
    343e:	9b 81       	ldd	r25, Y+3	; 0x03
    3440:	01 97       	sbiw	r24, 0x01	; 1
    3442:	f1 f7       	brne	.-4      	; 0x3440 <STEPPERMOTOR_moveTillLS+0x19e>
    3444:	9b 83       	std	Y+3, r25	; 0x03
    3446:	8a 83       	std	Y+2, r24	; 0x02
    3448:	41 cf       	rjmp	.-382    	; 0x32cc <STEPPERMOTOR_moveTillLS+0x2a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    344a:	69 89       	ldd	r22, Y+17	; 0x11
    344c:	7a 89       	ldd	r23, Y+18	; 0x12
    344e:	8b 89       	ldd	r24, Y+19	; 0x13
    3450:	9c 89       	ldd	r25, Y+20	; 0x14
    3452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	88 8b       	std	Y+16, r24	; 0x10
    345c:	88 89       	ldd	r24, Y+16	; 0x10
    345e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	8a 95       	dec	r24
    3464:	f1 f7       	brne	.-4      	; 0x3462 <STEPPERMOTOR_moveTillLS+0x1c0>
    3466:	89 83       	std	Y+1, r24	; 0x01
    3468:	31 cf       	rjmp	.-414    	; 0x32cc <STEPPERMOTOR_moveTillLS+0x2a>
		_delay_us(1);
	}
}
    346a:	6b 96       	adiw	r28, 0x1b	; 27
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <APP_init>:

/****************************************************************************************
 *                     				 Functions definitions
 * ***************************************************************************************/

void APP_init(void){
    347c:	df 93       	push	r29
    347e:	cf 93       	push	r28
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62

	LS_init(LS_XHOME);
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <LS_init>
	LS_init(LS_YHOME);
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <LS_init>
	LS_init(LS_ZHOME);
    3490:	82 e0       	ldi	r24, 0x02	; 2
    3492:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <LS_init>

	IR_init(IR_GRIPPER);
    3496:	83 e0       	ldi	r24, 0x03	; 3
    3498:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <IR_init>

	/* The following two lines are NOT sensors go to IR.h for more explanation */
	IR_init(A0);
    349c:	84 e0       	ldi	r24, 0x04	; 4
    349e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <IR_init>
	IR_init(A1);
    34a2:	85 e0       	ldi	r24, 0x05	; 5
    34a4:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <IR_init>
	IR_init(A2);
    34a8:	86 e0       	ldi	r24, 0x06	; 6
    34aa:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <IR_init>

	SERVO_init();
    34ae:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <SERVO_init>

	STEPPERMOTOR_init(STEPPERX);
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	0e 94 33 18 	call	0x3066	; 0x3066 <STEPPERMOTOR_init>
	STEPPERMOTOR_init(STEPPERY);
    34b8:	82 e0       	ldi	r24, 0x02	; 2
    34ba:	0e 94 33 18 	call	0x3066	; 0x3066 <STEPPERMOTOR_init>
	STEPPERMOTOR_init(STEPPERZ);
    34be:	84 e0       	ldi	r24, 0x04	; 4
    34c0:	0e 94 33 18 	call	0x3066	; 0x3066 <STEPPERMOTOR_init>

	LCD_init();
    34c4:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <LCD_init>

	currentState = WAIT;
    34c8:	10 92 19 02 	sts	0x0219, r1
    34cc:	10 92 18 02 	sts	0x0218, r1

}
    34d0:	cf 91       	pop	r28
    34d2:	df 91       	pop	r29
    34d4:	08 95       	ret

000034d6 <APP_wait>:


void APP_wait(){
    34d6:	df 93       	push	r29
    34d8:	cf 93       	push	r28
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    34de:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <LCD_clearScreen>
	LCD_displayStringRowColumn("WAITING",1,1);
    34e2:	80 e6       	ldi	r24, 0x60	; 96
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	61 e0       	ldi	r22, 0x01	; 1
    34e8:	41 e0       	ldi	r20, 0x01	; 1
    34ea:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn("state",2,1);
    34ee:	88 e6       	ldi	r24, 0x68	; 104
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	62 e0       	ldi	r22, 0x02	; 2
    34f4:	41 e0       	ldi	r20, 0x01	; 1
    34f6:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <LCD_displayStringRowColumn>

	home();
    34fa:	0e 94 8c 21 	call	0x4318	; 0x4318 <home>
	STEPPERMOTOR_steps(STEPPERX,XOBJECT,STEPPER_CCW);
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	40 e1       	ldi	r20, 0x10	; 16
    3502:	57 e2       	ldi	r21, 0x27	; 39
    3504:	60 e0       	ldi	r22, 0x00	; 0
    3506:	70 e0       	ldi	r23, 0x00	; 0
    3508:	21 e0       	ldi	r18, 0x01	; 1
    350a:	0e 94 4a 18 	call	0x3094	; 0x3094 <STEPPERMOTOR_steps>
	STEPPERMOTOR_steps(STEPPERY,YOBJECT,STEPPER_CCW);
    350e:	82 e0       	ldi	r24, 0x02	; 2
    3510:	48 ed       	ldi	r20, 0xD8	; 216
    3512:	59 e5       	ldi	r21, 0x59	; 89
    3514:	60 e0       	ldi	r22, 0x00	; 0
    3516:	70 e0       	ldi	r23, 0x00	; 0
    3518:	21 e0       	ldi	r18, 0x01	; 1
    351a:	0e 94 4a 18 	call	0x3094	; 0x3094 <STEPPERMOTOR_steps>
	currentXsteps = XOBJECT;
    351e:	80 e1       	ldi	r24, 0x10	; 16
    3520:	97 e2       	ldi	r25, 0x27	; 39
    3522:	a0 e0       	ldi	r26, 0x00	; 0
    3524:	b0 e0       	ldi	r27, 0x00	; 0
    3526:	80 93 0f 02 	sts	0x020F, r24
    352a:	90 93 10 02 	sts	0x0210, r25
    352e:	a0 93 11 02 	sts	0x0211, r26
    3532:	b0 93 12 02 	sts	0x0212, r27
	currentYsteps = YOBJECT;
    3536:	88 ed       	ldi	r24, 0xD8	; 216
    3538:	99 e5       	ldi	r25, 0x59	; 89
    353a:	a0 e0       	ldi	r26, 0x00	; 0
    353c:	b0 e0       	ldi	r27, 0x00	; 0
    353e:	80 93 13 02 	sts	0x0213, r24
    3542:	90 93 14 02 	sts	0x0214, r25
    3546:	a0 93 15 02 	sts	0x0215, r26
    354a:	b0 93 16 02 	sts	0x0216, r27
	SERVO_angle(SERVO_GRIPPER,SERVO_GRIPPER_OPEN);
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	62 e3       	ldi	r22, 0x32	; 50
    3552:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <SERVO_angle>


	while(!(IR_getReading(A0) || IR_getReading(A1) || IR_getReading(A2)));
    3556:	84 e0       	ldi	r24, 0x04	; 4
    3558:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    355c:	88 23       	and	r24, r24
    355e:	51 f4       	brne	.+20     	; 0x3574 <APP_wait+0x9e>
    3560:	85 e0       	ldi	r24, 0x05	; 5
    3562:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    3566:	88 23       	and	r24, r24
    3568:	29 f4       	brne	.+10     	; 0x3574 <APP_wait+0x9e>
    356a:	86 e0       	ldi	r24, 0x06	; 6
    356c:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    3570:	88 23       	and	r24, r24
    3572:	89 f3       	breq	.-30     	; 0x3556 <APP_wait+0x80>

	while(1){

		if(IR_getReading(A0) && IR_getReading(A1) && !(IR_getReading(A2))){
    3574:	84 e0       	ldi	r24, 0x04	; 4
    3576:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    357a:	88 23       	and	r24, r24
    357c:	69 f0       	breq	.+26     	; 0x3598 <APP_wait+0xc2>
    357e:	85 e0       	ldi	r24, 0x05	; 5
    3580:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    3584:	88 23       	and	r24, r24
    3586:	41 f0       	breq	.+16     	; 0x3598 <APP_wait+0xc2>
    3588:	86 e0       	ldi	r24, 0x06	; 6
    358a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    358e:	88 23       	and	r24, r24
    3590:	19 f4       	brne	.+6      	; 0x3598 <APP_wait+0xc2>

			currentProduct = GREEN_BASE;
    3592:	10 92 1b 02 	sts	0x021B, r1
    3596:	3a c0       	rjmp	.+116    	; 0x360c <APP_wait+0x136>
			break;
		}
		else if(IR_getReading(A0) && !(IR_getReading(A1)) && IR_getReading(A2)){
    3598:	84 e0       	ldi	r24, 0x04	; 4
    359a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    359e:	88 23       	and	r24, r24
    35a0:	71 f0       	breq	.+28     	; 0x35be <APP_wait+0xe8>
    35a2:	85 e0       	ldi	r24, 0x05	; 5
    35a4:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    35a8:	88 23       	and	r24, r24
    35aa:	49 f4       	brne	.+18     	; 0x35be <APP_wait+0xe8>
    35ac:	86 e0       	ldi	r24, 0x06	; 6
    35ae:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    35b2:	88 23       	and	r24, r24
    35b4:	21 f0       	breq	.+8      	; 0x35be <APP_wait+0xe8>

			currentProduct = GREEN_LID;
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	80 93 1b 02 	sts	0x021B, r24
    35bc:	27 c0       	rjmp	.+78     	; 0x360c <APP_wait+0x136>
			break;
		}
		else if(!(IR_getReading(A0)) && IR_getReading(A1) && IR_getReading(A2)){
    35be:	84 e0       	ldi	r24, 0x04	; 4
    35c0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    35c4:	88 23       	and	r24, r24
    35c6:	71 f4       	brne	.+28     	; 0x35e4 <APP_wait+0x10e>
    35c8:	85 e0       	ldi	r24, 0x05	; 5
    35ca:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    35ce:	88 23       	and	r24, r24
    35d0:	49 f0       	breq	.+18     	; 0x35e4 <APP_wait+0x10e>
    35d2:	86 e0       	ldi	r24, 0x06	; 6
    35d4:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    35d8:	88 23       	and	r24, r24
    35da:	21 f0       	breq	.+8      	; 0x35e4 <APP_wait+0x10e>

			currentProduct = BLUE_BASE;
    35dc:	82 e0       	ldi	r24, 0x02	; 2
    35de:	80 93 1b 02 	sts	0x021B, r24
    35e2:	14 c0       	rjmp	.+40     	; 0x360c <APP_wait+0x136>
			break;
		}
		else if(IR_getReading(A0) && IR_getReading(A1) && IR_getReading(A2)){
    35e4:	84 e0       	ldi	r24, 0x04	; 4
    35e6:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    35ea:	88 23       	and	r24, r24
    35ec:	19 f2       	breq	.-122    	; 0x3574 <APP_wait+0x9e>
    35ee:	85 e0       	ldi	r24, 0x05	; 5
    35f0:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    35f4:	88 23       	and	r24, r24
    35f6:	09 f4       	brne	.+2      	; 0x35fa <APP_wait+0x124>
    35f8:	bd cf       	rjmp	.-134    	; 0x3574 <APP_wait+0x9e>
    35fa:	86 e0       	ldi	r24, 0x06	; 6
    35fc:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <IR_getReading>
    3600:	88 23       	and	r24, r24
    3602:	09 f4       	brne	.+2      	; 0x3606 <APP_wait+0x130>
    3604:	b7 cf       	rjmp	.-146    	; 0x3574 <APP_wait+0x9e>

			currentProduct = BLUE_LID;
    3606:	83 e0       	ldi	r24, 0x03	; 3
    3608:	80 93 1b 02 	sts	0x021B, r24
			break;
		}
	}
	parts_counter++;
    360c:	80 91 0e 02 	lds	r24, 0x020E
    3610:	8f 5f       	subi	r24, 0xFF	; 255
    3612:	80 93 0e 02 	sts	0x020E, r24

	if(parts_counter == 9){
    3616:	80 91 0e 02 	lds	r24, 0x020E
    361a:	89 30       	cpi	r24, 0x09	; 9
    361c:	29 f4       	brne	.+10     	; 0x3628 <APP_wait+0x152>
		parts_counter = 1;
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	80 93 0e 02 	sts	0x020E, r24
		store_flag.store = 0;
    3624:	10 92 17 02 	sts	0x0217, r1
	//	 *  */
	//	GPIO_writePin(PORTC_ID,CONFIRMATION,HIGH);
	//	_delay_ms(1000);
	//	GPIO_writePin(PORTC_ID,CONFIRMATION,LOW);

	currentState = ASSEMBLY;
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	90 93 19 02 	sts	0x0219, r25
    3630:	80 93 18 02 	sts	0x0218, r24

}
    3634:	cf 91       	pop	r28
    3636:	df 91       	pop	r29
    3638:	08 95       	ret

0000363a <APP_assembly>:

void APP_assembly(){
    363a:	df 93       	push	r29
    363c:	cf 93       	push	r28
    363e:	00 d0       	rcall	.+0      	; 0x3640 <APP_assembly+0x6>
    3640:	0f 92       	push	r0
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62

	uint8 i;

	LCD_clearScreen();
    3646:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <LCD_clearScreen>
	LCD_displayStringRowColumn("ASSEMBLY",1,1);
    364a:	8e e6       	ldi	r24, 0x6E	; 110
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	61 e0       	ldi	r22, 0x01	; 1
    3650:	41 e0       	ldi	r20, 0x01	; 1
    3652:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn("state",2,1);
    3656:	88 e6       	ldi	r24, 0x68	; 104
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	62 e0       	ldi	r22, 0x02	; 2
    365c:	41 e0       	ldi	r20, 0x01	; 1
    365e:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <LCD_displayStringRowColumn>


	switch(currentProduct){
    3662:	80 91 1b 02 	lds	r24, 0x021B
    3666:	28 2f       	mov	r18, r24
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	3b 83       	std	Y+3, r19	; 0x03
    366c:	2a 83       	std	Y+2, r18	; 0x02
    366e:	8a 81       	ldd	r24, Y+2	; 0x02
    3670:	9b 81       	ldd	r25, Y+3	; 0x03
    3672:	81 30       	cpi	r24, 0x01	; 1
    3674:	91 05       	cpc	r25, r1
    3676:	09 f4       	brne	.+2      	; 0x367a <APP_assembly+0x40>
    3678:	51 c1       	rjmp	.+674    	; 0x391c <APP_assembly+0x2e2>
    367a:	2a 81       	ldd	r18, Y+2	; 0x02
    367c:	3b 81       	ldd	r19, Y+3	; 0x03
    367e:	22 30       	cpi	r18, 0x02	; 2
    3680:	31 05       	cpc	r19, r1
    3682:	2c f4       	brge	.+10     	; 0x368e <APP_assembly+0x54>
    3684:	8a 81       	ldd	r24, Y+2	; 0x02
    3686:	9b 81       	ldd	r25, Y+3	; 0x03
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	71 f0       	breq	.+28     	; 0x36a8 <APP_assembly+0x6e>
    368c:	03 c4       	rjmp	.+2054   	; 0x3e94 <APP_assembly+0x85a>
    368e:	2a 81       	ldd	r18, Y+2	; 0x02
    3690:	3b 81       	ldd	r19, Y+3	; 0x03
    3692:	22 30       	cpi	r18, 0x02	; 2
    3694:	31 05       	cpc	r19, r1
    3696:	09 f4       	brne	.+2      	; 0x369a <APP_assembly+0x60>
    3698:	03 c2       	rjmp	.+1030   	; 0x3aa0 <APP_assembly+0x466>
    369a:	8a 81       	ldd	r24, Y+2	; 0x02
    369c:	9b 81       	ldd	r25, Y+3	; 0x03
    369e:	83 30       	cpi	r24, 0x03	; 3
    36a0:	91 05       	cpc	r25, r1
    36a2:	09 f4       	brne	.+2      	; 0x36a6 <APP_assembly+0x6c>
    36a4:	37 c3       	rjmp	.+1646   	; 0x3d14 <APP_assembly+0x6da>
    36a6:	f6 c3       	rjmp	.+2028   	; 0x3e94 <APP_assembly+0x85a>

	case GREEN_BASE:

		LCD_clearScreen();
    36a8:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <LCD_clearScreen>
		LCD_displayStringRowColumn("green base",1,1);
    36ac:	87 e7       	ldi	r24, 0x77	; 119
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	61 e0       	ldi	r22, 0x01	; 1
    36b2:	41 e0       	ldi	r20, 0x01	; 1
    36b4:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <LCD_displayStringRowColumn>

		if(assembly_flag.assembly_flags.assembly1_GreenBase == 0){
    36b8:	80 91 1a 02 	lds	r24, 0x021A
    36bc:	81 70       	andi	r24, 0x01	; 1
    36be:	88 23       	and	r24, r24
    36c0:	09 f0       	breq	.+2      	; 0x36c4 <APP_assembly+0x8a>
    36c2:	b6 c0       	rjmp	.+364    	; 0x3830 <APP_assembly+0x1f6>

			pickUp(ZPOS_CONVEYER);
    36c4:	60 e5       	ldi	r22, 0x50	; 80
    36c6:	76 e4       	ldi	r23, 0x46	; 70
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(assembly1_GreenBase);
    36d0:	20 91 db 01 	lds	r18, 0x01DB
    36d4:	30 91 dc 01 	lds	r19, 0x01DC
    36d8:	40 91 dd 01 	lds	r20, 0x01DD
    36dc:	50 91 de 01 	lds	r21, 0x01DE
    36e0:	60 91 df 01 	lds	r22, 0x01DF
    36e4:	70 91 e0 01 	lds	r23, 0x01E0
    36e8:	80 91 e1 01 	lds	r24, 0x01E1
    36ec:	90 91 e2 01 	lds	r25, 0x01E2
    36f0:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    36f4:	68 ec       	ldi	r22, 0xC8	; 200
    36f6:	7f ea       	ldi	r23, 0xAF	; 175
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>
			assembly_flag.assembly_flags.assembly1_GreenBase = 1;
    3700:	80 91 1a 02 	lds	r24, 0x021A
    3704:	81 60       	ori	r24, 0x01	; 1
    3706:	80 93 1a 02 	sts	0x021A, r24

			if(assembly_flag.assembly_flags.assembly3_GreenLID==1){
    370a:	80 91 1a 02 	lds	r24, 0x021A
    370e:	88 70       	andi	r24, 0x08	; 8
    3710:	88 23       	and	r24, r24
    3712:	09 f4       	brne	.+2      	; 0x3716 <APP_assembly+0xdc>
    3714:	41 c0       	rjmp	.+130    	; 0x3798 <APP_assembly+0x15e>

				moveToPosition(assembly3_GreenLID);
    3716:	20 91 eb 01 	lds	r18, 0x01EB
    371a:	30 91 ec 01 	lds	r19, 0x01EC
    371e:	40 91 ed 01 	lds	r20, 0x01ED
    3722:	50 91 ee 01 	lds	r21, 0x01EE
    3726:	60 91 ef 01 	lds	r22, 0x01EF
    372a:	70 91 f0 01 	lds	r23, 0x01F0
    372e:	80 91 f1 01 	lds	r24, 0x01F1
    3732:	90 91 f2 01 	lds	r25, 0x01F2
    3736:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
				pickUp(ZPOS_LOW);
    373a:	68 ec       	ldi	r22, 0xC8	; 200
    373c:	7f ea       	ldi	r23, 0xAF	; 175
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
				moveToPosition(assembly1_GreenBase);
    3746:	20 91 db 01 	lds	r18, 0x01DB
    374a:	30 91 dc 01 	lds	r19, 0x01DC
    374e:	40 91 dd 01 	lds	r20, 0x01DD
    3752:	50 91 de 01 	lds	r21, 0x01DE
    3756:	60 91 df 01 	lds	r22, 0x01DF
    375a:	70 91 e0 01 	lds	r23, 0x01E0
    375e:	80 91 e1 01 	lds	r24, 0x01E1
    3762:	90 91 e2 01 	lds	r25, 0x01E2
    3766:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
				release(ZPOS_BASEHEIGHT);
    376a:	60 e3       	ldi	r22, 0x30	; 48
    376c:	75 e7       	ldi	r23, 0x75	; 117
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

				assembly_flag.assembly_flags.assembly3_GreenLID = 0;
    3776:	80 91 1a 02 	lds	r24, 0x021A
    377a:	87 7f       	andi	r24, 0xF7	; 247
    377c:	80 93 1a 02 	sts	0x021A, r24
				store_flag.store_flags.greenProduct_assembled1 = 1;
    3780:	80 91 17 02 	lds	r24, 0x0217
    3784:	80 61       	ori	r24, 0x10	; 16
    3786:	80 93 17 02 	sts	0x0217, r24

				currentState = STORE;
    378a:	82 e0       	ldi	r24, 0x02	; 2
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	90 93 19 02 	sts	0x0219, r25
    3792:	80 93 18 02 	sts	0x0218, r24
    3796:	7e c3       	rjmp	.+1788   	; 0x3e94 <APP_assembly+0x85a>
			}
			else if(assembly_flag.assembly_flags.assembly2_Green==1){
    3798:	80 91 1a 02 	lds	r24, 0x021A
    379c:	86 70       	andi	r24, 0x06	; 6
    379e:	82 30       	cpi	r24, 0x02	; 2
    37a0:	09 f0       	breq	.+2      	; 0x37a4 <APP_assembly+0x16a>
    37a2:	41 c0       	rjmp	.+130    	; 0x3826 <APP_assembly+0x1ec>

				moveToPosition(assembly2_Green);
    37a4:	20 91 e3 01 	lds	r18, 0x01E3
    37a8:	30 91 e4 01 	lds	r19, 0x01E4
    37ac:	40 91 e5 01 	lds	r20, 0x01E5
    37b0:	50 91 e6 01 	lds	r21, 0x01E6
    37b4:	60 91 e7 01 	lds	r22, 0x01E7
    37b8:	70 91 e8 01 	lds	r23, 0x01E8
    37bc:	80 91 e9 01 	lds	r24, 0x01E9
    37c0:	90 91 ea 01 	lds	r25, 0x01EA
    37c4:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
				pickUp(ZPOS_LOW);
    37c8:	68 ec       	ldi	r22, 0xC8	; 200
    37ca:	7f ea       	ldi	r23, 0xAF	; 175
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
				moveToPosition(assembly1_GreenBase);
    37d4:	20 91 db 01 	lds	r18, 0x01DB
    37d8:	30 91 dc 01 	lds	r19, 0x01DC
    37dc:	40 91 dd 01 	lds	r20, 0x01DD
    37e0:	50 91 de 01 	lds	r21, 0x01DE
    37e4:	60 91 df 01 	lds	r22, 0x01DF
    37e8:	70 91 e0 01 	lds	r23, 0x01E0
    37ec:	80 91 e1 01 	lds	r24, 0x01E1
    37f0:	90 91 e2 01 	lds	r25, 0x01E2
    37f4:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
				release(ZPOS_BASEHEIGHT);
    37f8:	60 e3       	ldi	r22, 0x30	; 48
    37fa:	75 e7       	ldi	r23, 0x75	; 117
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

				assembly_flag.assembly_flags.assembly2_Green = 0;
    3804:	80 91 1a 02 	lds	r24, 0x021A
    3808:	89 7f       	andi	r24, 0xF9	; 249
    380a:	80 93 1a 02 	sts	0x021A, r24
				store_flag.store_flags.greenProduct_assembled1 = 1;
    380e:	80 91 17 02 	lds	r24, 0x0217
    3812:	80 61       	ori	r24, 0x10	; 16
    3814:	80 93 17 02 	sts	0x0217, r24

				currentState = STORE;
    3818:	82 e0       	ldi	r24, 0x02	; 2
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	90 93 19 02 	sts	0x0219, r25
    3820:	80 93 18 02 	sts	0x0218, r24
    3824:	37 c3       	rjmp	.+1646   	; 0x3e94 <APP_assembly+0x85a>
			}
			else{

				currentState = WAIT;
    3826:	10 92 19 02 	sts	0x0219, r1
    382a:	10 92 18 02 	sts	0x0218, r1
    382e:	32 c3       	rjmp	.+1636   	; 0x3e94 <APP_assembly+0x85a>
			}
		}
		else if(assembly_flag.assembly_flags.assembly2_Green == 0){
    3830:	80 91 1a 02 	lds	r24, 0x021A
    3834:	86 70       	andi	r24, 0x06	; 6
    3836:	88 23       	and	r24, r24
    3838:	09 f0       	breq	.+2      	; 0x383c <APP_assembly+0x202>
    383a:	2c c3       	rjmp	.+1624   	; 0x3e94 <APP_assembly+0x85a>

			pickUp(ZPOS_CONVEYER);
    383c:	60 e5       	ldi	r22, 0x50	; 80
    383e:	76 e4       	ldi	r23, 0x46	; 70
    3840:	80 e0       	ldi	r24, 0x00	; 0
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(assembly2_Green);
    3848:	20 91 e3 01 	lds	r18, 0x01E3
    384c:	30 91 e4 01 	lds	r19, 0x01E4
    3850:	40 91 e5 01 	lds	r20, 0x01E5
    3854:	50 91 e6 01 	lds	r21, 0x01E6
    3858:	60 91 e7 01 	lds	r22, 0x01E7
    385c:	70 91 e8 01 	lds	r23, 0x01E8
    3860:	80 91 e9 01 	lds	r24, 0x01E9
    3864:	90 91 ea 01 	lds	r25, 0x01EA
    3868:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    386c:	68 ec       	ldi	r22, 0xC8	; 200
    386e:	7f ea       	ldi	r23, 0xAF	; 175
    3870:	80 e0       	ldi	r24, 0x00	; 0
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>
			assembly_flag.assembly_flags.assembly2_Green = 2;
    3878:	80 91 1a 02 	lds	r24, 0x021A
    387c:	89 7f       	andi	r24, 0xF9	; 249
    387e:	84 60       	ori	r24, 0x04	; 4
    3880:	80 93 1a 02 	sts	0x021A, r24

			if(assembly_flag.assembly_flags.assembly3_GreenLID==1){
    3884:	80 91 1a 02 	lds	r24, 0x021A
    3888:	88 70       	andi	r24, 0x08	; 8
    388a:	88 23       	and	r24, r24
    388c:	09 f4       	brne	.+2      	; 0x3890 <APP_assembly+0x256>
    388e:	41 c0       	rjmp	.+130    	; 0x3912 <APP_assembly+0x2d8>

				moveToPosition(assembly3_GreenLID);
    3890:	20 91 eb 01 	lds	r18, 0x01EB
    3894:	30 91 ec 01 	lds	r19, 0x01EC
    3898:	40 91 ed 01 	lds	r20, 0x01ED
    389c:	50 91 ee 01 	lds	r21, 0x01EE
    38a0:	60 91 ef 01 	lds	r22, 0x01EF
    38a4:	70 91 f0 01 	lds	r23, 0x01F0
    38a8:	80 91 f1 01 	lds	r24, 0x01F1
    38ac:	90 91 f2 01 	lds	r25, 0x01F2
    38b0:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
				pickUp(ZPOS_LOW);
    38b4:	68 ec       	ldi	r22, 0xC8	; 200
    38b6:	7f ea       	ldi	r23, 0xAF	; 175
    38b8:	80 e0       	ldi	r24, 0x00	; 0
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
				moveToPosition(assembly2_Green);
    38c0:	20 91 e3 01 	lds	r18, 0x01E3
    38c4:	30 91 e4 01 	lds	r19, 0x01E4
    38c8:	40 91 e5 01 	lds	r20, 0x01E5
    38cc:	50 91 e6 01 	lds	r21, 0x01E6
    38d0:	60 91 e7 01 	lds	r22, 0x01E7
    38d4:	70 91 e8 01 	lds	r23, 0x01E8
    38d8:	80 91 e9 01 	lds	r24, 0x01E9
    38dc:	90 91 ea 01 	lds	r25, 0x01EA
    38e0:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
				release(ZPOS_BASEHEIGHT);
    38e4:	60 e3       	ldi	r22, 0x30	; 48
    38e6:	75 e7       	ldi	r23, 0x75	; 117
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

				assembly_flag.assembly_flags.assembly3_GreenLID = 0;
    38f0:	80 91 1a 02 	lds	r24, 0x021A
    38f4:	87 7f       	andi	r24, 0xF7	; 247
    38f6:	80 93 1a 02 	sts	0x021A, r24
				store_flag.store_flags.greenProduct_assembled2 = 1;
    38fa:	80 91 17 02 	lds	r24, 0x0217
    38fe:	80 62       	ori	r24, 0x20	; 32
    3900:	80 93 17 02 	sts	0x0217, r24

				currentState = STORE;
    3904:	82 e0       	ldi	r24, 0x02	; 2
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	90 93 19 02 	sts	0x0219, r25
    390c:	80 93 18 02 	sts	0x0218, r24
    3910:	c1 c2       	rjmp	.+1410   	; 0x3e94 <APP_assembly+0x85a>
			}
			else{

				currentState = WAIT;
    3912:	10 92 19 02 	sts	0x0219, r1
    3916:	10 92 18 02 	sts	0x0218, r1
    391a:	bc c2       	rjmp	.+1400   	; 0x3e94 <APP_assembly+0x85a>
		}
		break;

	case GREEN_LID:

		LCD_clearScreen();
    391c:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <LCD_clearScreen>
		LCD_displayStringRowColumn("green lid",1,1);
    3920:	82 e8       	ldi	r24, 0x82	; 130
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	61 e0       	ldi	r22, 0x01	; 1
    3926:	41 e0       	ldi	r20, 0x01	; 1
    3928:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <LCD_displayStringRowColumn>

		if(assembly_flag.assembly_flags.assembly1_GreenBase == 1){
    392c:	80 91 1a 02 	lds	r24, 0x021A
    3930:	81 70       	andi	r24, 0x01	; 1
    3932:	88 23       	and	r24, r24
    3934:	51 f1       	breq	.+84     	; 0x398a <APP_assembly+0x350>

			pickUp(ZPOS_CONVEYER);
    3936:	60 e5       	ldi	r22, 0x50	; 80
    3938:	76 e4       	ldi	r23, 0x46	; 70
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(assembly1_GreenBase);
    3942:	20 91 db 01 	lds	r18, 0x01DB
    3946:	30 91 dc 01 	lds	r19, 0x01DC
    394a:	40 91 dd 01 	lds	r20, 0x01DD
    394e:	50 91 de 01 	lds	r21, 0x01DE
    3952:	60 91 df 01 	lds	r22, 0x01DF
    3956:	70 91 e0 01 	lds	r23, 0x01E0
    395a:	80 91 e1 01 	lds	r24, 0x01E1
    395e:	90 91 e2 01 	lds	r25, 0x01E2
    3962:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_BASEHEIGHT);
    3966:	60 e3       	ldi	r22, 0x30	; 48
    3968:	75 e7       	ldi	r23, 0x75	; 117
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

			store_flag.store_flags.greenProduct_assembled1 = 1;
    3972:	80 91 17 02 	lds	r24, 0x0217
    3976:	80 61       	ori	r24, 0x10	; 16
    3978:	80 93 17 02 	sts	0x0217, r24
			currentState = STORE;
    397c:	82 e0       	ldi	r24, 0x02	; 2
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	90 93 19 02 	sts	0x0219, r25
    3984:	80 93 18 02 	sts	0x0218, r24
    3988:	85 c2       	rjmp	.+1290   	; 0x3e94 <APP_assembly+0x85a>
		}
		else if(assembly_flag.assembly_flags.assembly2_Green == 2){
    398a:	80 91 1a 02 	lds	r24, 0x021A
    398e:	86 70       	andi	r24, 0x06	; 6
    3990:	84 30       	cpi	r24, 0x04	; 4
    3992:	51 f5       	brne	.+84     	; 0x39e8 <APP_assembly+0x3ae>

			pickUp(ZPOS_CONVEYER);
    3994:	60 e5       	ldi	r22, 0x50	; 80
    3996:	76 e4       	ldi	r23, 0x46	; 70
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(assembly2_Green);
    39a0:	20 91 e3 01 	lds	r18, 0x01E3
    39a4:	30 91 e4 01 	lds	r19, 0x01E4
    39a8:	40 91 e5 01 	lds	r20, 0x01E5
    39ac:	50 91 e6 01 	lds	r21, 0x01E6
    39b0:	60 91 e7 01 	lds	r22, 0x01E7
    39b4:	70 91 e8 01 	lds	r23, 0x01E8
    39b8:	80 91 e9 01 	lds	r24, 0x01E9
    39bc:	90 91 ea 01 	lds	r25, 0x01EA
    39c0:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_BASEHEIGHT);
    39c4:	60 e3       	ldi	r22, 0x30	; 48
    39c6:	75 e7       	ldi	r23, 0x75	; 117
    39c8:	80 e0       	ldi	r24, 0x00	; 0
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

			store_flag.store_flags.greenProduct_assembled2 = 1;
    39d0:	80 91 17 02 	lds	r24, 0x0217
    39d4:	80 62       	ori	r24, 0x20	; 32
    39d6:	80 93 17 02 	sts	0x0217, r24
			currentState = STORE;
    39da:	82 e0       	ldi	r24, 0x02	; 2
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	90 93 19 02 	sts	0x0219, r25
    39e2:	80 93 18 02 	sts	0x0218, r24
    39e6:	56 c2       	rjmp	.+1196   	; 0x3e94 <APP_assembly+0x85a>
		}
		else if(assembly_flag.assembly_flags.assembly3_GreenLID == 0){
    39e8:	80 91 1a 02 	lds	r24, 0x021A
    39ec:	88 70       	andi	r24, 0x08	; 8
    39ee:	88 23       	and	r24, r24
    39f0:	41 f5       	brne	.+80     	; 0x3a42 <APP_assembly+0x408>

			pickUp(ZPOS_CONVEYER);
    39f2:	60 e5       	ldi	r22, 0x50	; 80
    39f4:	76 e4       	ldi	r23, 0x46	; 70
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(assembly3_GreenLID);
    39fe:	20 91 eb 01 	lds	r18, 0x01EB
    3a02:	30 91 ec 01 	lds	r19, 0x01EC
    3a06:	40 91 ed 01 	lds	r20, 0x01ED
    3a0a:	50 91 ee 01 	lds	r21, 0x01EE
    3a0e:	60 91 ef 01 	lds	r22, 0x01EF
    3a12:	70 91 f0 01 	lds	r23, 0x01F0
    3a16:	80 91 f1 01 	lds	r24, 0x01F1
    3a1a:	90 91 f2 01 	lds	r25, 0x01F2
    3a1e:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    3a22:	68 ec       	ldi	r22, 0xC8	; 200
    3a24:	7f ea       	ldi	r23, 0xAF	; 175
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>
			assembly_flag.assembly_flags.assembly3_GreenLID = 1;
    3a2e:	80 91 1a 02 	lds	r24, 0x021A
    3a32:	88 60       	ori	r24, 0x08	; 8
    3a34:	80 93 1a 02 	sts	0x021A, r24

			currentState = WAIT;
    3a38:	10 92 19 02 	sts	0x0219, r1
    3a3c:	10 92 18 02 	sts	0x0218, r1
    3a40:	29 c2       	rjmp	.+1106   	; 0x3e94 <APP_assembly+0x85a>
		}
		else if(assembly_flag.assembly_flags.assembly2_Green == 0){
    3a42:	80 91 1a 02 	lds	r24, 0x021A
    3a46:	86 70       	andi	r24, 0x06	; 6
    3a48:	88 23       	and	r24, r24
    3a4a:	09 f0       	breq	.+2      	; 0x3a4e <APP_assembly+0x414>
    3a4c:	23 c2       	rjmp	.+1094   	; 0x3e94 <APP_assembly+0x85a>

			pickUp(ZPOS_CONVEYER);
    3a4e:	60 e5       	ldi	r22, 0x50	; 80
    3a50:	76 e4       	ldi	r23, 0x46	; 70
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(assembly2_Green);
    3a5a:	20 91 e3 01 	lds	r18, 0x01E3
    3a5e:	30 91 e4 01 	lds	r19, 0x01E4
    3a62:	40 91 e5 01 	lds	r20, 0x01E5
    3a66:	50 91 e6 01 	lds	r21, 0x01E6
    3a6a:	60 91 e7 01 	lds	r22, 0x01E7
    3a6e:	70 91 e8 01 	lds	r23, 0x01E8
    3a72:	80 91 e9 01 	lds	r24, 0x01E9
    3a76:	90 91 ea 01 	lds	r25, 0x01EA
    3a7a:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    3a7e:	68 ec       	ldi	r22, 0xC8	; 200
    3a80:	7f ea       	ldi	r23, 0xAF	; 175
    3a82:	80 e0       	ldi	r24, 0x00	; 0
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>
			assembly_flag.assembly_flags.assembly2_Green = 1;
    3a8a:	80 91 1a 02 	lds	r24, 0x021A
    3a8e:	89 7f       	andi	r24, 0xF9	; 249
    3a90:	82 60       	ori	r24, 0x02	; 2
    3a92:	80 93 1a 02 	sts	0x021A, r24

			currentState = WAIT;
    3a96:	10 92 19 02 	sts	0x0219, r1
    3a9a:	10 92 18 02 	sts	0x0218, r1
    3a9e:	fa c1       	rjmp	.+1012   	; 0x3e94 <APP_assembly+0x85a>
		}
		break;

	case BLUE_BASE:

		LCD_clearScreen();
    3aa0:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <LCD_clearScreen>
		LCD_displayStringRowColumn("blue base",1,1);
    3aa4:	8c e8       	ldi	r24, 0x8C	; 140
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	61 e0       	ldi	r22, 0x01	; 1
    3aaa:	41 e0       	ldi	r20, 0x01	; 1
    3aac:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <LCD_displayStringRowColumn>

		if(assembly_flag.assembly_flags.assembly4_blueBase == 0){
    3ab0:	80 91 1a 02 	lds	r24, 0x021A
    3ab4:	80 71       	andi	r24, 0x10	; 16
    3ab6:	88 23       	and	r24, r24
    3ab8:	09 f0       	breq	.+2      	; 0x3abc <APP_assembly+0x482>
    3aba:	b6 c0       	rjmp	.+364    	; 0x3c28 <APP_assembly+0x5ee>

			pickUp(ZPOS_CONVEYER);
    3abc:	60 e5       	ldi	r22, 0x50	; 80
    3abe:	76 e4       	ldi	r23, 0x46	; 70
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(assembly4_BLUEBase);
    3ac8:	20 91 f3 01 	lds	r18, 0x01F3
    3acc:	30 91 f4 01 	lds	r19, 0x01F4
    3ad0:	40 91 f5 01 	lds	r20, 0x01F5
    3ad4:	50 91 f6 01 	lds	r21, 0x01F6
    3ad8:	60 91 f7 01 	lds	r22, 0x01F7
    3adc:	70 91 f8 01 	lds	r23, 0x01F8
    3ae0:	80 91 f9 01 	lds	r24, 0x01F9
    3ae4:	90 91 fa 01 	lds	r25, 0x01FA
    3ae8:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    3aec:	68 ec       	ldi	r22, 0xC8	; 200
    3aee:	7f ea       	ldi	r23, 0xAF	; 175
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>
			assembly_flag.assembly_flags.assembly4_blueBase = 1;
    3af8:	80 91 1a 02 	lds	r24, 0x021A
    3afc:	80 61       	ori	r24, 0x10	; 16
    3afe:	80 93 1a 02 	sts	0x021A, r24

			if(assembly_flag.assembly_flags.assembly6_blueLID==1){
    3b02:	80 91 1a 02 	lds	r24, 0x021A
    3b06:	80 78       	andi	r24, 0x80	; 128
    3b08:	88 23       	and	r24, r24
    3b0a:	09 f4       	brne	.+2      	; 0x3b0e <APP_assembly+0x4d4>
    3b0c:	41 c0       	rjmp	.+130    	; 0x3b90 <APP_assembly+0x556>

				moveToPosition(assembly6_BLUELID);
    3b0e:	20 91 03 02 	lds	r18, 0x0203
    3b12:	30 91 04 02 	lds	r19, 0x0204
    3b16:	40 91 05 02 	lds	r20, 0x0205
    3b1a:	50 91 06 02 	lds	r21, 0x0206
    3b1e:	60 91 07 02 	lds	r22, 0x0207
    3b22:	70 91 08 02 	lds	r23, 0x0208
    3b26:	80 91 09 02 	lds	r24, 0x0209
    3b2a:	90 91 0a 02 	lds	r25, 0x020A
    3b2e:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
				pickUp(ZPOS_LOW);
    3b32:	68 ec       	ldi	r22, 0xC8	; 200
    3b34:	7f ea       	ldi	r23, 0xAF	; 175
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
				moveToPosition(assembly4_BLUEBase);
    3b3e:	20 91 f3 01 	lds	r18, 0x01F3
    3b42:	30 91 f4 01 	lds	r19, 0x01F4
    3b46:	40 91 f5 01 	lds	r20, 0x01F5
    3b4a:	50 91 f6 01 	lds	r21, 0x01F6
    3b4e:	60 91 f7 01 	lds	r22, 0x01F7
    3b52:	70 91 f8 01 	lds	r23, 0x01F8
    3b56:	80 91 f9 01 	lds	r24, 0x01F9
    3b5a:	90 91 fa 01 	lds	r25, 0x01FA
    3b5e:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
				release(ZPOS_BASEHEIGHT);
    3b62:	60 e3       	ldi	r22, 0x30	; 48
    3b64:	75 e7       	ldi	r23, 0x75	; 117
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

				assembly_flag.assembly_flags.assembly6_blueLID = 0;
    3b6e:	80 91 1a 02 	lds	r24, 0x021A
    3b72:	8f 77       	andi	r24, 0x7F	; 127
    3b74:	80 93 1a 02 	sts	0x021A, r24
				store_flag.store_flags.blueProduct_assembled1 = 1;
    3b78:	80 91 17 02 	lds	r24, 0x0217
    3b7c:	80 64       	ori	r24, 0x40	; 64
    3b7e:	80 93 17 02 	sts	0x0217, r24

				currentState = STORE;
    3b82:	82 e0       	ldi	r24, 0x02	; 2
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	90 93 19 02 	sts	0x0219, r25
    3b8a:	80 93 18 02 	sts	0x0218, r24
    3b8e:	82 c1       	rjmp	.+772    	; 0x3e94 <APP_assembly+0x85a>
			}
			else if(assembly_flag.assembly_flags.assembly5_blue==1){
    3b90:	80 91 1a 02 	lds	r24, 0x021A
    3b94:	80 76       	andi	r24, 0x60	; 96
    3b96:	80 32       	cpi	r24, 0x20	; 32
    3b98:	09 f0       	breq	.+2      	; 0x3b9c <APP_assembly+0x562>
    3b9a:	41 c0       	rjmp	.+130    	; 0x3c1e <APP_assembly+0x5e4>

				moveToPosition(assembly5_BLUE);
    3b9c:	20 91 fb 01 	lds	r18, 0x01FB
    3ba0:	30 91 fc 01 	lds	r19, 0x01FC
    3ba4:	40 91 fd 01 	lds	r20, 0x01FD
    3ba8:	50 91 fe 01 	lds	r21, 0x01FE
    3bac:	60 91 ff 01 	lds	r22, 0x01FF
    3bb0:	70 91 00 02 	lds	r23, 0x0200
    3bb4:	80 91 01 02 	lds	r24, 0x0201
    3bb8:	90 91 02 02 	lds	r25, 0x0202
    3bbc:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
				pickUp(ZPOS_LOW);
    3bc0:	68 ec       	ldi	r22, 0xC8	; 200
    3bc2:	7f ea       	ldi	r23, 0xAF	; 175
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
				moveToPosition(assembly4_BLUEBase);
    3bcc:	20 91 f3 01 	lds	r18, 0x01F3
    3bd0:	30 91 f4 01 	lds	r19, 0x01F4
    3bd4:	40 91 f5 01 	lds	r20, 0x01F5
    3bd8:	50 91 f6 01 	lds	r21, 0x01F6
    3bdc:	60 91 f7 01 	lds	r22, 0x01F7
    3be0:	70 91 f8 01 	lds	r23, 0x01F8
    3be4:	80 91 f9 01 	lds	r24, 0x01F9
    3be8:	90 91 fa 01 	lds	r25, 0x01FA
    3bec:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
				release(ZPOS_BASEHEIGHT);
    3bf0:	60 e3       	ldi	r22, 0x30	; 48
    3bf2:	75 e7       	ldi	r23, 0x75	; 117
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

				assembly_flag.assembly_flags.assembly5_blue = 0;
    3bfc:	80 91 1a 02 	lds	r24, 0x021A
    3c00:	8f 79       	andi	r24, 0x9F	; 159
    3c02:	80 93 1a 02 	sts	0x021A, r24
				store_flag.store_flags.blueProduct_assembled1 = 1;
    3c06:	80 91 17 02 	lds	r24, 0x0217
    3c0a:	80 64       	ori	r24, 0x40	; 64
    3c0c:	80 93 17 02 	sts	0x0217, r24

				currentState = STORE;
    3c10:	82 e0       	ldi	r24, 0x02	; 2
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	90 93 19 02 	sts	0x0219, r25
    3c18:	80 93 18 02 	sts	0x0218, r24
    3c1c:	3b c1       	rjmp	.+630    	; 0x3e94 <APP_assembly+0x85a>
			}
			else{

				currentState = WAIT;
    3c1e:	10 92 19 02 	sts	0x0219, r1
    3c22:	10 92 18 02 	sts	0x0218, r1
    3c26:	36 c1       	rjmp	.+620    	; 0x3e94 <APP_assembly+0x85a>
			}
		}
		else if(assembly_flag.assembly_flags.assembly5_blue == 0){
    3c28:	80 91 1a 02 	lds	r24, 0x021A
    3c2c:	80 76       	andi	r24, 0x60	; 96
    3c2e:	88 23       	and	r24, r24
    3c30:	09 f0       	breq	.+2      	; 0x3c34 <APP_assembly+0x5fa>
    3c32:	30 c1       	rjmp	.+608    	; 0x3e94 <APP_assembly+0x85a>

			pickUp(ZPOS_CONVEYER);
    3c34:	60 e5       	ldi	r22, 0x50	; 80
    3c36:	76 e4       	ldi	r23, 0x46	; 70
    3c38:	80 e0       	ldi	r24, 0x00	; 0
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(assembly5_BLUE);
    3c40:	20 91 fb 01 	lds	r18, 0x01FB
    3c44:	30 91 fc 01 	lds	r19, 0x01FC
    3c48:	40 91 fd 01 	lds	r20, 0x01FD
    3c4c:	50 91 fe 01 	lds	r21, 0x01FE
    3c50:	60 91 ff 01 	lds	r22, 0x01FF
    3c54:	70 91 00 02 	lds	r23, 0x0200
    3c58:	80 91 01 02 	lds	r24, 0x0201
    3c5c:	90 91 02 02 	lds	r25, 0x0202
    3c60:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    3c64:	68 ec       	ldi	r22, 0xC8	; 200
    3c66:	7f ea       	ldi	r23, 0xAF	; 175
    3c68:	80 e0       	ldi	r24, 0x00	; 0
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>
			assembly_flag.assembly_flags.assembly5_blue = 2;
    3c70:	80 91 1a 02 	lds	r24, 0x021A
    3c74:	8f 79       	andi	r24, 0x9F	; 159
    3c76:	80 64       	ori	r24, 0x40	; 64
    3c78:	80 93 1a 02 	sts	0x021A, r24

			if(assembly_flag.assembly_flags.assembly6_blueLID==1){
    3c7c:	80 91 1a 02 	lds	r24, 0x021A
    3c80:	80 78       	andi	r24, 0x80	; 128
    3c82:	88 23       	and	r24, r24
    3c84:	09 f4       	brne	.+2      	; 0x3c88 <APP_assembly+0x64e>
    3c86:	41 c0       	rjmp	.+130    	; 0x3d0a <APP_assembly+0x6d0>

				moveToPosition(assembly6_BLUELID);
    3c88:	20 91 03 02 	lds	r18, 0x0203
    3c8c:	30 91 04 02 	lds	r19, 0x0204
    3c90:	40 91 05 02 	lds	r20, 0x0205
    3c94:	50 91 06 02 	lds	r21, 0x0206
    3c98:	60 91 07 02 	lds	r22, 0x0207
    3c9c:	70 91 08 02 	lds	r23, 0x0208
    3ca0:	80 91 09 02 	lds	r24, 0x0209
    3ca4:	90 91 0a 02 	lds	r25, 0x020A
    3ca8:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
				pickUp(ZPOS_LOW);
    3cac:	68 ec       	ldi	r22, 0xC8	; 200
    3cae:	7f ea       	ldi	r23, 0xAF	; 175
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
				moveToPosition(assembly5_BLUE);
    3cb8:	20 91 fb 01 	lds	r18, 0x01FB
    3cbc:	30 91 fc 01 	lds	r19, 0x01FC
    3cc0:	40 91 fd 01 	lds	r20, 0x01FD
    3cc4:	50 91 fe 01 	lds	r21, 0x01FE
    3cc8:	60 91 ff 01 	lds	r22, 0x01FF
    3ccc:	70 91 00 02 	lds	r23, 0x0200
    3cd0:	80 91 01 02 	lds	r24, 0x0201
    3cd4:	90 91 02 02 	lds	r25, 0x0202
    3cd8:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
				release(ZPOS_BASEHEIGHT);
    3cdc:	60 e3       	ldi	r22, 0x30	; 48
    3cde:	75 e7       	ldi	r23, 0x75	; 117
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

				assembly_flag.assembly_flags.assembly6_blueLID = 0;
    3ce8:	80 91 1a 02 	lds	r24, 0x021A
    3cec:	8f 77       	andi	r24, 0x7F	; 127
    3cee:	80 93 1a 02 	sts	0x021A, r24
				store_flag.store_flags.blueProduct_assembled2 = 1;
    3cf2:	80 91 17 02 	lds	r24, 0x0217
    3cf6:	80 68       	ori	r24, 0x80	; 128
    3cf8:	80 93 17 02 	sts	0x0217, r24

				currentState = STORE;
    3cfc:	82 e0       	ldi	r24, 0x02	; 2
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	90 93 19 02 	sts	0x0219, r25
    3d04:	80 93 18 02 	sts	0x0218, r24
    3d08:	c5 c0       	rjmp	.+394    	; 0x3e94 <APP_assembly+0x85a>
			}
			else{

				currentState = WAIT;
    3d0a:	10 92 19 02 	sts	0x0219, r1
    3d0e:	10 92 18 02 	sts	0x0218, r1
    3d12:	c0 c0       	rjmp	.+384    	; 0x3e94 <APP_assembly+0x85a>
		break;


	case BLUE_LID:

		LCD_clearScreen();
    3d14:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <LCD_clearScreen>
		LCD_displayStringRowColumn("blue lid",1,1);
    3d18:	86 e9       	ldi	r24, 0x96	; 150
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	61 e0       	ldi	r22, 0x01	; 1
    3d1e:	41 e0       	ldi	r20, 0x01	; 1
    3d20:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <LCD_displayStringRowColumn>

		if(assembly_flag.assembly_flags.assembly4_blueBase == 1){
    3d24:	80 91 1a 02 	lds	r24, 0x021A
    3d28:	80 71       	andi	r24, 0x10	; 16
    3d2a:	88 23       	and	r24, r24
    3d2c:	51 f1       	breq	.+84     	; 0x3d82 <APP_assembly+0x748>

			pickUp(ZPOS_CONVEYER);
    3d2e:	60 e5       	ldi	r22, 0x50	; 80
    3d30:	76 e4       	ldi	r23, 0x46	; 70
    3d32:	80 e0       	ldi	r24, 0x00	; 0
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(assembly4_BLUEBase);
    3d3a:	20 91 f3 01 	lds	r18, 0x01F3
    3d3e:	30 91 f4 01 	lds	r19, 0x01F4
    3d42:	40 91 f5 01 	lds	r20, 0x01F5
    3d46:	50 91 f6 01 	lds	r21, 0x01F6
    3d4a:	60 91 f7 01 	lds	r22, 0x01F7
    3d4e:	70 91 f8 01 	lds	r23, 0x01F8
    3d52:	80 91 f9 01 	lds	r24, 0x01F9
    3d56:	90 91 fa 01 	lds	r25, 0x01FA
    3d5a:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_BASEHEIGHT);
    3d5e:	60 e3       	ldi	r22, 0x30	; 48
    3d60:	75 e7       	ldi	r23, 0x75	; 117
    3d62:	80 e0       	ldi	r24, 0x00	; 0
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

			store_flag.store_flags.blueProduct_assembled1 = 1;
    3d6a:	80 91 17 02 	lds	r24, 0x0217
    3d6e:	80 64       	ori	r24, 0x40	; 64
    3d70:	80 93 17 02 	sts	0x0217, r24
			currentState = STORE;
    3d74:	82 e0       	ldi	r24, 0x02	; 2
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	90 93 19 02 	sts	0x0219, r25
    3d7c:	80 93 18 02 	sts	0x0218, r24
    3d80:	89 c0       	rjmp	.+274    	; 0x3e94 <APP_assembly+0x85a>
		}
		else if(assembly_flag.assembly_flags.assembly5_blue == 2){
    3d82:	80 91 1a 02 	lds	r24, 0x021A
    3d86:	80 76       	andi	r24, 0x60	; 96
    3d88:	80 34       	cpi	r24, 0x40	; 64
    3d8a:	51 f5       	brne	.+84     	; 0x3de0 <APP_assembly+0x7a6>

			pickUp(ZPOS_CONVEYER);
    3d8c:	60 e5       	ldi	r22, 0x50	; 80
    3d8e:	76 e4       	ldi	r23, 0x46	; 70
    3d90:	80 e0       	ldi	r24, 0x00	; 0
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(assembly5_BLUE);
    3d98:	20 91 fb 01 	lds	r18, 0x01FB
    3d9c:	30 91 fc 01 	lds	r19, 0x01FC
    3da0:	40 91 fd 01 	lds	r20, 0x01FD
    3da4:	50 91 fe 01 	lds	r21, 0x01FE
    3da8:	60 91 ff 01 	lds	r22, 0x01FF
    3dac:	70 91 00 02 	lds	r23, 0x0200
    3db0:	80 91 01 02 	lds	r24, 0x0201
    3db4:	90 91 02 02 	lds	r25, 0x0202
    3db8:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_BASEHEIGHT);
    3dbc:	60 e3       	ldi	r22, 0x30	; 48
    3dbe:	75 e7       	ldi	r23, 0x75	; 117
    3dc0:	80 e0       	ldi	r24, 0x00	; 0
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

			store_flag.store_flags.blueProduct_assembled2 = 1;
    3dc8:	80 91 17 02 	lds	r24, 0x0217
    3dcc:	80 68       	ori	r24, 0x80	; 128
    3dce:	80 93 17 02 	sts	0x0217, r24
			currentState = STORE;
    3dd2:	82 e0       	ldi	r24, 0x02	; 2
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	90 93 19 02 	sts	0x0219, r25
    3dda:	80 93 18 02 	sts	0x0218, r24
    3dde:	5a c0       	rjmp	.+180    	; 0x3e94 <APP_assembly+0x85a>
		}
		else if(assembly_flag.assembly_flags.assembly6_blueLID == 0){
    3de0:	80 91 1a 02 	lds	r24, 0x021A
    3de4:	80 78       	andi	r24, 0x80	; 128
    3de6:	88 23       	and	r24, r24
    3de8:	41 f5       	brne	.+80     	; 0x3e3a <APP_assembly+0x800>

			pickUp(ZPOS_CONVEYER);
    3dea:	60 e5       	ldi	r22, 0x50	; 80
    3dec:	76 e4       	ldi	r23, 0x46	; 70
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(assembly6_BLUELID);
    3df6:	20 91 03 02 	lds	r18, 0x0203
    3dfa:	30 91 04 02 	lds	r19, 0x0204
    3dfe:	40 91 05 02 	lds	r20, 0x0205
    3e02:	50 91 06 02 	lds	r21, 0x0206
    3e06:	60 91 07 02 	lds	r22, 0x0207
    3e0a:	70 91 08 02 	lds	r23, 0x0208
    3e0e:	80 91 09 02 	lds	r24, 0x0209
    3e12:	90 91 0a 02 	lds	r25, 0x020A
    3e16:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    3e1a:	68 ec       	ldi	r22, 0xC8	; 200
    3e1c:	7f ea       	ldi	r23, 0xAF	; 175
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>
			assembly_flag.assembly_flags.assembly6_blueLID = 1;
    3e26:	80 91 1a 02 	lds	r24, 0x021A
    3e2a:	80 68       	ori	r24, 0x80	; 128
    3e2c:	80 93 1a 02 	sts	0x021A, r24

			currentState = WAIT;
    3e30:	10 92 19 02 	sts	0x0219, r1
    3e34:	10 92 18 02 	sts	0x0218, r1
    3e38:	2d c0       	rjmp	.+90     	; 0x3e94 <APP_assembly+0x85a>
		}
		else if(assembly_flag.assembly_flags.assembly5_blue == 0){
    3e3a:	80 91 1a 02 	lds	r24, 0x021A
    3e3e:	80 76       	andi	r24, 0x60	; 96
    3e40:	88 23       	and	r24, r24
    3e42:	41 f5       	brne	.+80     	; 0x3e94 <APP_assembly+0x85a>

			pickUp(ZPOS_CONVEYER);
    3e44:	60 e5       	ldi	r22, 0x50	; 80
    3e46:	76 e4       	ldi	r23, 0x46	; 70
    3e48:	80 e0       	ldi	r24, 0x00	; 0
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(assembly5_BLUE);
    3e50:	20 91 fb 01 	lds	r18, 0x01FB
    3e54:	30 91 fc 01 	lds	r19, 0x01FC
    3e58:	40 91 fd 01 	lds	r20, 0x01FD
    3e5c:	50 91 fe 01 	lds	r21, 0x01FE
    3e60:	60 91 ff 01 	lds	r22, 0x01FF
    3e64:	70 91 00 02 	lds	r23, 0x0200
    3e68:	80 91 01 02 	lds	r24, 0x0201
    3e6c:	90 91 02 02 	lds	r25, 0x0202
    3e70:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    3e74:	68 ec       	ldi	r22, 0xC8	; 200
    3e76:	7f ea       	ldi	r23, 0xAF	; 175
    3e78:	80 e0       	ldi	r24, 0x00	; 0
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>
			assembly_flag.assembly_flags.assembly5_blue = 1;
    3e80:	80 91 1a 02 	lds	r24, 0x021A
    3e84:	8f 79       	andi	r24, 0x9F	; 159
    3e86:	80 62       	ori	r24, 0x20	; 32
    3e88:	80 93 1a 02 	sts	0x021A, r24

			currentState = WAIT;
    3e8c:	10 92 19 02 	sts	0x0219, r1
    3e90:	10 92 18 02 	sts	0x0218, r1
		}
		break;
	}
}
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	0f 90       	pop	r0
    3e9a:	cf 91       	pop	r28
    3e9c:	df 91       	pop	r29
    3e9e:	08 95       	ret

00003ea0 <APP_store>:

void APP_store(){
    3ea0:	df 93       	push	r29
    3ea2:	cf 93       	push	r28
    3ea4:	cd b7       	in	r28, 0x3d	; 61
    3ea6:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
    3ea8:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <LCD_clearScreen>
	LCD_displayStringRowColumn("STORE",1,1);
    3eac:	8f e9       	ldi	r24, 0x9F	; 159
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	61 e0       	ldi	r22, 0x01	; 1
    3eb2:	41 e0       	ldi	r20, 0x01	; 1
    3eb4:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn("state",2,1);
    3eb8:	88 e6       	ldi	r24, 0x68	; 104
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	62 e0       	ldi	r22, 0x02	; 2
    3ebe:	41 e0       	ldi	r20, 0x01	; 1
    3ec0:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <LCD_displayStringRowColumn>

	if(store_flag.store_flags.greenProduct_assembled1 == 1){
    3ec4:	80 91 17 02 	lds	r24, 0x0217
    3ec8:	80 71       	andi	r24, 0x10	; 16
    3eca:	88 23       	and	r24, r24
    3ecc:	09 f4       	brne	.+2      	; 0x3ed0 <APP_store+0x30>
    3ece:	84 c0       	rjmp	.+264    	; 0x3fd8 <APP_store+0x138>

		if(store_flag.store_flags.store1_Green == 0){
    3ed0:	80 91 17 02 	lds	r24, 0x0217
    3ed4:	81 70       	andi	r24, 0x01	; 1
    3ed6:	88 23       	and	r24, r24
    3ed8:	b1 f5       	brne	.+108    	; 0x3f46 <APP_store+0xa6>

			moveToPosition(assembly1_GreenBase);
    3eda:	20 91 db 01 	lds	r18, 0x01DB
    3ede:	30 91 dc 01 	lds	r19, 0x01DC
    3ee2:	40 91 dd 01 	lds	r20, 0x01DD
    3ee6:	50 91 de 01 	lds	r21, 0x01DE
    3eea:	60 91 df 01 	lds	r22, 0x01DF
    3eee:	70 91 e0 01 	lds	r23, 0x01E0
    3ef2:	80 91 e1 01 	lds	r24, 0x01E1
    3ef6:	90 91 e2 01 	lds	r25, 0x01E2
    3efa:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			pickUp(ZPOS_LOW);
    3efe:	68 ec       	ldi	r22, 0xC8	; 200
    3f00:	7f ea       	ldi	r23, 0xAF	; 175
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(store1_Green);
    3f0a:	20 91 bb 01 	lds	r18, 0x01BB
    3f0e:	30 91 bc 01 	lds	r19, 0x01BC
    3f12:	40 91 bd 01 	lds	r20, 0x01BD
    3f16:	50 91 be 01 	lds	r21, 0x01BE
    3f1a:	60 91 bf 01 	lds	r22, 0x01BF
    3f1e:	70 91 c0 01 	lds	r23, 0x01C0
    3f22:	80 91 c1 01 	lds	r24, 0x01C1
    3f26:	90 91 c2 01 	lds	r25, 0x01C2
    3f2a:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    3f2e:	68 ec       	ldi	r22, 0xC8	; 200
    3f30:	7f ea       	ldi	r23, 0xAF	; 175
    3f32:	80 e0       	ldi	r24, 0x00	; 0
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

			store_flag.store_flags.store1_Green = 1;
    3f3a:	80 91 17 02 	lds	r24, 0x0217
    3f3e:	81 60       	ori	r24, 0x01	; 1
    3f40:	80 93 17 02 	sts	0x0217, r24
    3f44:	3a c0       	rjmp	.+116    	; 0x3fba <APP_store+0x11a>
		}
		else if(store_flag.store_flags.store2_Green == 0){
    3f46:	80 91 17 02 	lds	r24, 0x0217
    3f4a:	82 70       	andi	r24, 0x02	; 2
    3f4c:	88 23       	and	r24, r24
    3f4e:	a9 f5       	brne	.+106    	; 0x3fba <APP_store+0x11a>

			moveToPosition(assembly1_GreenBase);
    3f50:	20 91 db 01 	lds	r18, 0x01DB
    3f54:	30 91 dc 01 	lds	r19, 0x01DC
    3f58:	40 91 dd 01 	lds	r20, 0x01DD
    3f5c:	50 91 de 01 	lds	r21, 0x01DE
    3f60:	60 91 df 01 	lds	r22, 0x01DF
    3f64:	70 91 e0 01 	lds	r23, 0x01E0
    3f68:	80 91 e1 01 	lds	r24, 0x01E1
    3f6c:	90 91 e2 01 	lds	r25, 0x01E2
    3f70:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			pickUp(ZPOS_LOW);
    3f74:	68 ec       	ldi	r22, 0xC8	; 200
    3f76:	7f ea       	ldi	r23, 0xAF	; 175
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(store2_Green);
    3f80:	20 91 c3 01 	lds	r18, 0x01C3
    3f84:	30 91 c4 01 	lds	r19, 0x01C4
    3f88:	40 91 c5 01 	lds	r20, 0x01C5
    3f8c:	50 91 c6 01 	lds	r21, 0x01C6
    3f90:	60 91 c7 01 	lds	r22, 0x01C7
    3f94:	70 91 c8 01 	lds	r23, 0x01C8
    3f98:	80 91 c9 01 	lds	r24, 0x01C9
    3f9c:	90 91 ca 01 	lds	r25, 0x01CA
    3fa0:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    3fa4:	68 ec       	ldi	r22, 0xC8	; 200
    3fa6:	7f ea       	ldi	r23, 0xAF	; 175
    3fa8:	80 e0       	ldi	r24, 0x00	; 0
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

			store_flag.store_flags.store2_Green = 1;
    3fb0:	80 91 17 02 	lds	r24, 0x0217
    3fb4:	82 60       	ori	r24, 0x02	; 2
    3fb6:	80 93 17 02 	sts	0x0217, r24
		}

		store_flag.store_flags.greenProduct_assembled1 = 0;
    3fba:	80 91 17 02 	lds	r24, 0x0217
    3fbe:	8f 7e       	andi	r24, 0xEF	; 239
    3fc0:	80 93 17 02 	sts	0x0217, r24
		assembly_flag.assembly_flags.assembly1_GreenBase =0;
    3fc4:	80 91 1a 02 	lds	r24, 0x021A
    3fc8:	8e 7f       	andi	r24, 0xFE	; 254
    3fca:	80 93 1a 02 	sts	0x021A, r24
		currentState = WAIT;
    3fce:	10 92 19 02 	sts	0x0219, r1
    3fd2:	10 92 18 02 	sts	0x0218, r1
    3fd6:	9d c1       	rjmp	.+826    	; 0x4312 <APP_store+0x472>
	}
	else if(store_flag.store_flags.greenProduct_assembled2 == 1){
    3fd8:	80 91 17 02 	lds	r24, 0x0217
    3fdc:	80 72       	andi	r24, 0x20	; 32
    3fde:	88 23       	and	r24, r24
    3fe0:	09 f4       	brne	.+2      	; 0x3fe4 <APP_store+0x144>
    3fe2:	84 c0       	rjmp	.+264    	; 0x40ec <APP_store+0x24c>

		if(store_flag.store_flags.store1_Green == 0){
    3fe4:	80 91 17 02 	lds	r24, 0x0217
    3fe8:	81 70       	andi	r24, 0x01	; 1
    3fea:	88 23       	and	r24, r24
    3fec:	b1 f5       	brne	.+108    	; 0x405a <APP_store+0x1ba>

			moveToPosition(assembly2_Green);
    3fee:	20 91 e3 01 	lds	r18, 0x01E3
    3ff2:	30 91 e4 01 	lds	r19, 0x01E4
    3ff6:	40 91 e5 01 	lds	r20, 0x01E5
    3ffa:	50 91 e6 01 	lds	r21, 0x01E6
    3ffe:	60 91 e7 01 	lds	r22, 0x01E7
    4002:	70 91 e8 01 	lds	r23, 0x01E8
    4006:	80 91 e9 01 	lds	r24, 0x01E9
    400a:	90 91 ea 01 	lds	r25, 0x01EA
    400e:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			pickUp(ZPOS_LOW);
    4012:	68 ec       	ldi	r22, 0xC8	; 200
    4014:	7f ea       	ldi	r23, 0xAF	; 175
    4016:	80 e0       	ldi	r24, 0x00	; 0
    4018:	90 e0       	ldi	r25, 0x00	; 0
    401a:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(store1_Green);
    401e:	20 91 bb 01 	lds	r18, 0x01BB
    4022:	30 91 bc 01 	lds	r19, 0x01BC
    4026:	40 91 bd 01 	lds	r20, 0x01BD
    402a:	50 91 be 01 	lds	r21, 0x01BE
    402e:	60 91 bf 01 	lds	r22, 0x01BF
    4032:	70 91 c0 01 	lds	r23, 0x01C0
    4036:	80 91 c1 01 	lds	r24, 0x01C1
    403a:	90 91 c2 01 	lds	r25, 0x01C2
    403e:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    4042:	68 ec       	ldi	r22, 0xC8	; 200
    4044:	7f ea       	ldi	r23, 0xAF	; 175
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

			store_flag.store_flags.store1_Green = 1;
    404e:	80 91 17 02 	lds	r24, 0x0217
    4052:	81 60       	ori	r24, 0x01	; 1
    4054:	80 93 17 02 	sts	0x0217, r24
    4058:	3a c0       	rjmp	.+116    	; 0x40ce <APP_store+0x22e>
		}
		else if(store_flag.store_flags.store2_Green == 0){
    405a:	80 91 17 02 	lds	r24, 0x0217
    405e:	82 70       	andi	r24, 0x02	; 2
    4060:	88 23       	and	r24, r24
    4062:	a9 f5       	brne	.+106    	; 0x40ce <APP_store+0x22e>

			moveToPosition(assembly2_Green);
    4064:	20 91 e3 01 	lds	r18, 0x01E3
    4068:	30 91 e4 01 	lds	r19, 0x01E4
    406c:	40 91 e5 01 	lds	r20, 0x01E5
    4070:	50 91 e6 01 	lds	r21, 0x01E6
    4074:	60 91 e7 01 	lds	r22, 0x01E7
    4078:	70 91 e8 01 	lds	r23, 0x01E8
    407c:	80 91 e9 01 	lds	r24, 0x01E9
    4080:	90 91 ea 01 	lds	r25, 0x01EA
    4084:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			pickUp(ZPOS_LOW);
    4088:	68 ec       	ldi	r22, 0xC8	; 200
    408a:	7f ea       	ldi	r23, 0xAF	; 175
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(store2_Green);
    4094:	20 91 c3 01 	lds	r18, 0x01C3
    4098:	30 91 c4 01 	lds	r19, 0x01C4
    409c:	40 91 c5 01 	lds	r20, 0x01C5
    40a0:	50 91 c6 01 	lds	r21, 0x01C6
    40a4:	60 91 c7 01 	lds	r22, 0x01C7
    40a8:	70 91 c8 01 	lds	r23, 0x01C8
    40ac:	80 91 c9 01 	lds	r24, 0x01C9
    40b0:	90 91 ca 01 	lds	r25, 0x01CA
    40b4:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    40b8:	68 ec       	ldi	r22, 0xC8	; 200
    40ba:	7f ea       	ldi	r23, 0xAF	; 175
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

			store_flag.store_flags.store2_Green = 1;
    40c4:	80 91 17 02 	lds	r24, 0x0217
    40c8:	82 60       	ori	r24, 0x02	; 2
    40ca:	80 93 17 02 	sts	0x0217, r24
		}

		assembly_flag.assembly_flags.assembly2_Green =0;
    40ce:	80 91 1a 02 	lds	r24, 0x021A
    40d2:	89 7f       	andi	r24, 0xF9	; 249
    40d4:	80 93 1a 02 	sts	0x021A, r24
		store_flag.store_flags.greenProduct_assembled2 = 0;
    40d8:	80 91 17 02 	lds	r24, 0x0217
    40dc:	8f 7d       	andi	r24, 0xDF	; 223
    40de:	80 93 17 02 	sts	0x0217, r24
		currentState = WAIT;
    40e2:	10 92 19 02 	sts	0x0219, r1
    40e6:	10 92 18 02 	sts	0x0218, r1
    40ea:	13 c1       	rjmp	.+550    	; 0x4312 <APP_store+0x472>
	}

	else if(store_flag.store_flags.blueProduct_assembled1 == 1){
    40ec:	80 91 17 02 	lds	r24, 0x0217
    40f0:	80 74       	andi	r24, 0x40	; 64
    40f2:	88 23       	and	r24, r24
    40f4:	09 f4       	brne	.+2      	; 0x40f8 <APP_store+0x258>
    40f6:	84 c0       	rjmp	.+264    	; 0x4200 <APP_store+0x360>

		if(store_flag.store_flags.store3_blue == 0){
    40f8:	80 91 17 02 	lds	r24, 0x0217
    40fc:	84 70       	andi	r24, 0x04	; 4
    40fe:	88 23       	and	r24, r24
    4100:	b1 f5       	brne	.+108    	; 0x416e <APP_store+0x2ce>

			moveToPosition(assembly4_BLUEBase);
    4102:	20 91 f3 01 	lds	r18, 0x01F3
    4106:	30 91 f4 01 	lds	r19, 0x01F4
    410a:	40 91 f5 01 	lds	r20, 0x01F5
    410e:	50 91 f6 01 	lds	r21, 0x01F6
    4112:	60 91 f7 01 	lds	r22, 0x01F7
    4116:	70 91 f8 01 	lds	r23, 0x01F8
    411a:	80 91 f9 01 	lds	r24, 0x01F9
    411e:	90 91 fa 01 	lds	r25, 0x01FA
    4122:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			pickUp(ZPOS_LOW);
    4126:	68 ec       	ldi	r22, 0xC8	; 200
    4128:	7f ea       	ldi	r23, 0xAF	; 175
    412a:	80 e0       	ldi	r24, 0x00	; 0
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(store3_BLUE);
    4132:	20 91 cb 01 	lds	r18, 0x01CB
    4136:	30 91 cc 01 	lds	r19, 0x01CC
    413a:	40 91 cd 01 	lds	r20, 0x01CD
    413e:	50 91 ce 01 	lds	r21, 0x01CE
    4142:	60 91 cf 01 	lds	r22, 0x01CF
    4146:	70 91 d0 01 	lds	r23, 0x01D0
    414a:	80 91 d1 01 	lds	r24, 0x01D1
    414e:	90 91 d2 01 	lds	r25, 0x01D2
    4152:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    4156:	68 ec       	ldi	r22, 0xC8	; 200
    4158:	7f ea       	ldi	r23, 0xAF	; 175
    415a:	80 e0       	ldi	r24, 0x00	; 0
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

			store_flag.store_flags.store3_blue = 1;
    4162:	80 91 17 02 	lds	r24, 0x0217
    4166:	84 60       	ori	r24, 0x04	; 4
    4168:	80 93 17 02 	sts	0x0217, r24
    416c:	3a c0       	rjmp	.+116    	; 0x41e2 <APP_store+0x342>
		}
		else if(store_flag.store_flags.store4_blue == 0){
    416e:	80 91 17 02 	lds	r24, 0x0217
    4172:	88 70       	andi	r24, 0x08	; 8
    4174:	88 23       	and	r24, r24
    4176:	a9 f5       	brne	.+106    	; 0x41e2 <APP_store+0x342>

			moveToPosition(assembly4_BLUEBase);
    4178:	20 91 f3 01 	lds	r18, 0x01F3
    417c:	30 91 f4 01 	lds	r19, 0x01F4
    4180:	40 91 f5 01 	lds	r20, 0x01F5
    4184:	50 91 f6 01 	lds	r21, 0x01F6
    4188:	60 91 f7 01 	lds	r22, 0x01F7
    418c:	70 91 f8 01 	lds	r23, 0x01F8
    4190:	80 91 f9 01 	lds	r24, 0x01F9
    4194:	90 91 fa 01 	lds	r25, 0x01FA
    4198:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			pickUp(ZPOS_LOW);
    419c:	68 ec       	ldi	r22, 0xC8	; 200
    419e:	7f ea       	ldi	r23, 0xAF	; 175
    41a0:	80 e0       	ldi	r24, 0x00	; 0
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(store4_BLUE);
    41a8:	20 91 d3 01 	lds	r18, 0x01D3
    41ac:	30 91 d4 01 	lds	r19, 0x01D4
    41b0:	40 91 d5 01 	lds	r20, 0x01D5
    41b4:	50 91 d6 01 	lds	r21, 0x01D6
    41b8:	60 91 d7 01 	lds	r22, 0x01D7
    41bc:	70 91 d8 01 	lds	r23, 0x01D8
    41c0:	80 91 d9 01 	lds	r24, 0x01D9
    41c4:	90 91 da 01 	lds	r25, 0x01DA
    41c8:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    41cc:	68 ec       	ldi	r22, 0xC8	; 200
    41ce:	7f ea       	ldi	r23, 0xAF	; 175
    41d0:	80 e0       	ldi	r24, 0x00	; 0
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

			store_flag.store_flags.store4_blue = 1;
    41d8:	80 91 17 02 	lds	r24, 0x0217
    41dc:	88 60       	ori	r24, 0x08	; 8
    41de:	80 93 17 02 	sts	0x0217, r24
		}

		store_flag.store_flags.blueProduct_assembled1 = 0;
    41e2:	80 91 17 02 	lds	r24, 0x0217
    41e6:	8f 7b       	andi	r24, 0xBF	; 191
    41e8:	80 93 17 02 	sts	0x0217, r24
		assembly_flag.assembly_flags.assembly4_blueBase =0;
    41ec:	80 91 1a 02 	lds	r24, 0x021A
    41f0:	8f 7e       	andi	r24, 0xEF	; 239
    41f2:	80 93 1a 02 	sts	0x021A, r24
		currentState = WAIT;
    41f6:	10 92 19 02 	sts	0x0219, r1
    41fa:	10 92 18 02 	sts	0x0218, r1
    41fe:	89 c0       	rjmp	.+274    	; 0x4312 <APP_store+0x472>
	}

	else if(store_flag.store_flags.blueProduct_assembled2 == 1){
    4200:	80 91 17 02 	lds	r24, 0x0217
    4204:	80 78       	andi	r24, 0x80	; 128
    4206:	88 23       	and	r24, r24
    4208:	09 f4       	brne	.+2      	; 0x420c <APP_store+0x36c>
    420a:	83 c0       	rjmp	.+262    	; 0x4312 <APP_store+0x472>

		if(store_flag.store_flags.store3_blue == 0){
    420c:	80 91 17 02 	lds	r24, 0x0217
    4210:	84 70       	andi	r24, 0x04	; 4
    4212:	88 23       	and	r24, r24
    4214:	b1 f5       	brne	.+108    	; 0x4282 <APP_store+0x3e2>

			moveToPosition(assembly5_BLUE);
    4216:	20 91 fb 01 	lds	r18, 0x01FB
    421a:	30 91 fc 01 	lds	r19, 0x01FC
    421e:	40 91 fd 01 	lds	r20, 0x01FD
    4222:	50 91 fe 01 	lds	r21, 0x01FE
    4226:	60 91 ff 01 	lds	r22, 0x01FF
    422a:	70 91 00 02 	lds	r23, 0x0200
    422e:	80 91 01 02 	lds	r24, 0x0201
    4232:	90 91 02 02 	lds	r25, 0x0202
    4236:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			pickUp(ZPOS_LOW);
    423a:	68 ec       	ldi	r22, 0xC8	; 200
    423c:	7f ea       	ldi	r23, 0xAF	; 175
    423e:	80 e0       	ldi	r24, 0x00	; 0
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(store3_BLUE);
    4246:	20 91 cb 01 	lds	r18, 0x01CB
    424a:	30 91 cc 01 	lds	r19, 0x01CC
    424e:	40 91 cd 01 	lds	r20, 0x01CD
    4252:	50 91 ce 01 	lds	r21, 0x01CE
    4256:	60 91 cf 01 	lds	r22, 0x01CF
    425a:	70 91 d0 01 	lds	r23, 0x01D0
    425e:	80 91 d1 01 	lds	r24, 0x01D1
    4262:	90 91 d2 01 	lds	r25, 0x01D2
    4266:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    426a:	68 ec       	ldi	r22, 0xC8	; 200
    426c:	7f ea       	ldi	r23, 0xAF	; 175
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

			store_flag.store_flags.store3_blue = 1;
    4276:	80 91 17 02 	lds	r24, 0x0217
    427a:	84 60       	ori	r24, 0x04	; 4
    427c:	80 93 17 02 	sts	0x0217, r24
    4280:	3a c0       	rjmp	.+116    	; 0x42f6 <APP_store+0x456>
		}
		else if(store_flag.store_flags.store4_blue == 0){
    4282:	80 91 17 02 	lds	r24, 0x0217
    4286:	88 70       	andi	r24, 0x08	; 8
    4288:	88 23       	and	r24, r24
    428a:	a9 f5       	brne	.+106    	; 0x42f6 <APP_store+0x456>

			moveToPosition(assembly5_BLUE);
    428c:	20 91 fb 01 	lds	r18, 0x01FB
    4290:	30 91 fc 01 	lds	r19, 0x01FC
    4294:	40 91 fd 01 	lds	r20, 0x01FD
    4298:	50 91 fe 01 	lds	r21, 0x01FE
    429c:	60 91 ff 01 	lds	r22, 0x01FF
    42a0:	70 91 00 02 	lds	r23, 0x0200
    42a4:	80 91 01 02 	lds	r24, 0x0201
    42a8:	90 91 02 02 	lds	r25, 0x0202
    42ac:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			pickUp(ZPOS_LOW);
    42b0:	68 ec       	ldi	r22, 0xC8	; 200
    42b2:	7f ea       	ldi	r23, 0xAF	; 175
    42b4:	80 e0       	ldi	r24, 0x00	; 0
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <pickUp>
			moveToPosition(store4_BLUE);
    42bc:	20 91 d3 01 	lds	r18, 0x01D3
    42c0:	30 91 d4 01 	lds	r19, 0x01D4
    42c4:	40 91 d5 01 	lds	r20, 0x01D5
    42c8:	50 91 d6 01 	lds	r21, 0x01D6
    42cc:	60 91 d7 01 	lds	r22, 0x01D7
    42d0:	70 91 d8 01 	lds	r23, 0x01D8
    42d4:	80 91 d9 01 	lds	r24, 0x01D9
    42d8:	90 91 da 01 	lds	r25, 0x01DA
    42dc:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
			release(ZPOS_LOW);
    42e0:	68 ec       	ldi	r22, 0xC8	; 200
    42e2:	7f ea       	ldi	r23, 0xAF	; 175
    42e4:	80 e0       	ldi	r24, 0x00	; 0
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	0e 94 7d 23 	call	0x46fa	; 0x46fa <release>

			store_flag.store_flags.store4_blue = 1;
    42ec:	80 91 17 02 	lds	r24, 0x0217
    42f0:	88 60       	ori	r24, 0x08	; 8
    42f2:	80 93 17 02 	sts	0x0217, r24
		}

		store_flag.store_flags.blueProduct_assembled2 = 0;
    42f6:	80 91 17 02 	lds	r24, 0x0217
    42fa:	8f 77       	andi	r24, 0x7F	; 127
    42fc:	80 93 17 02 	sts	0x0217, r24
		assembly_flag.assembly_flags.assembly5_blue =0;
    4300:	80 91 1a 02 	lds	r24, 0x021A
    4304:	8f 79       	andi	r24, 0x9F	; 159
    4306:	80 93 1a 02 	sts	0x021A, r24
		currentState = WAIT;
    430a:	10 92 19 02 	sts	0x0219, r1
    430e:	10 92 18 02 	sts	0x0218, r1
	}
}
    4312:	cf 91       	pop	r28
    4314:	df 91       	pop	r29
    4316:	08 95       	ret

00004318 <home>:

void home(){
    4318:	df 93       	push	r29
    431a:	cf 93       	push	r28
    431c:	cd b7       	in	r28, 0x3d	; 61
    431e:	de b7       	in	r29, 0x3e	; 62

	if(currentXsteps == XPOS3){
    4320:	80 91 0f 02 	lds	r24, 0x020F
    4324:	90 91 10 02 	lds	r25, 0x0210
    4328:	a0 91 11 02 	lds	r26, 0x0211
    432c:	b0 91 12 02 	lds	r27, 0x0212
    4330:	88 3d       	cpi	r24, 0xD8	; 216
    4332:	27 e4       	ldi	r18, 0x47	; 71
    4334:	92 07       	cpc	r25, r18
    4336:	23 e0       	ldi	r18, 0x03	; 3
    4338:	a2 07       	cpc	r26, r18
    433a:	20 e0       	ldi	r18, 0x00	; 0
    433c:	b2 07       	cpc	r27, r18
    433e:	c1 f4       	brne	.+48     	; 0x4370 <home+0x58>

		STEPPERMOTOR_steps(STEPPERX,XPOS3/2,STEPPER_CW);
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	4c ee       	ldi	r20, 0xEC	; 236
    4344:	53 ea       	ldi	r21, 0xA3	; 163
    4346:	61 e0       	ldi	r22, 0x01	; 1
    4348:	70 e0       	ldi	r23, 0x00	; 0
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	0e 94 4a 18 	call	0x3094	; 0x3094 <STEPPERMOTOR_steps>
		STEPPERMOTOR_moveTillLS(STEPPERZ,STEPPER_CCW,LS_ZHOME);
    4350:	84 e0       	ldi	r24, 0x04	; 4
    4352:	61 e0       	ldi	r22, 0x01	; 1
    4354:	42 e0       	ldi	r20, 0x02	; 2
    4356:	0e 94 51 19 	call	0x32a2	; 0x32a2 <STEPPERMOTOR_moveTillLS>
		STEPPERMOTOR_moveTillLS(STEPPERY,STEPPER_CW,LS_YHOME);
    435a:	82 e0       	ldi	r24, 0x02	; 2
    435c:	60 e0       	ldi	r22, 0x00	; 0
    435e:	41 e0       	ldi	r20, 0x01	; 1
    4360:	0e 94 51 19 	call	0x32a2	; 0x32a2 <STEPPERMOTOR_moveTillLS>
		STEPPERMOTOR_moveTillLS(STEPPERX,STEPPER_CW,LS_XHOME);
    4364:	80 e0       	ldi	r24, 0x00	; 0
    4366:	60 e0       	ldi	r22, 0x00	; 0
    4368:	40 e0       	ldi	r20, 0x00	; 0
    436a:	0e 94 51 19 	call	0x32a2	; 0x32a2 <STEPPERMOTOR_moveTillLS>
    436e:	0f c0       	rjmp	.+30     	; 0x438e <home+0x76>
	}
	else{
		STEPPERMOTOR_moveTillLS(STEPPERZ,STEPPER_CCW,LS_ZHOME);
    4370:	84 e0       	ldi	r24, 0x04	; 4
    4372:	61 e0       	ldi	r22, 0x01	; 1
    4374:	42 e0       	ldi	r20, 0x02	; 2
    4376:	0e 94 51 19 	call	0x32a2	; 0x32a2 <STEPPERMOTOR_moveTillLS>
		STEPPERMOTOR_moveTillLS(STEPPERY,STEPPER_CW,LS_YHOME);
    437a:	82 e0       	ldi	r24, 0x02	; 2
    437c:	60 e0       	ldi	r22, 0x00	; 0
    437e:	41 e0       	ldi	r20, 0x01	; 1
    4380:	0e 94 51 19 	call	0x32a2	; 0x32a2 <STEPPERMOTOR_moveTillLS>
		STEPPERMOTOR_moveTillLS(STEPPERX,STEPPER_CW,LS_XHOME);
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	60 e0       	ldi	r22, 0x00	; 0
    4388:	40 e0       	ldi	r20, 0x00	; 0
    438a:	0e 94 51 19 	call	0x32a2	; 0x32a2 <STEPPERMOTOR_moveTillLS>
	}
}
    438e:	cf 91       	pop	r28
    4390:	df 91       	pop	r29
    4392:	08 95       	ret

00004394 <moveToPosition>:

void moveToPosition(struct position pos){
    4394:	df 93       	push	r29
    4396:	cf 93       	push	r28
    4398:	cd b7       	in	r28, 0x3d	; 61
    439a:	de b7       	in	r29, 0x3e	; 62
    439c:	28 97       	sbiw	r28, 0x08	; 8
    439e:	0f b6       	in	r0, 0x3f	; 63
    43a0:	f8 94       	cli
    43a2:	de bf       	out	0x3e, r29	; 62
    43a4:	0f be       	out	0x3f, r0	; 63
    43a6:	cd bf       	out	0x3d, r28	; 61
    43a8:	29 83       	std	Y+1, r18	; 0x01
    43aa:	3a 83       	std	Y+2, r19	; 0x02
    43ac:	4b 83       	std	Y+3, r20	; 0x03
    43ae:	5c 83       	std	Y+4, r21	; 0x04
    43b0:	6d 83       	std	Y+5, r22	; 0x05
    43b2:	7e 83       	std	Y+6, r23	; 0x06
    43b4:	8f 83       	std	Y+7, r24	; 0x07
    43b6:	98 87       	std	Y+8, r25	; 0x08

	if((currentXsteps == XOBJECT)&&pos.y==YPOS4){
    43b8:	80 91 0f 02 	lds	r24, 0x020F
    43bc:	90 91 10 02 	lds	r25, 0x0210
    43c0:	a0 91 11 02 	lds	r26, 0x0211
    43c4:	b0 91 12 02 	lds	r27, 0x0212
    43c8:	80 31       	cpi	r24, 0x10	; 16
    43ca:	27 e2       	ldi	r18, 0x27	; 39
    43cc:	92 07       	cpc	r25, r18
    43ce:	20 e0       	ldi	r18, 0x00	; 0
    43d0:	a2 07       	cpc	r26, r18
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	b2 07       	cpc	r27, r18
    43d6:	f1 f4       	brne	.+60     	; 0x4414 <moveToPosition+0x80>
    43d8:	8d 81       	ldd	r24, Y+5	; 0x05
    43da:	9e 81       	ldd	r25, Y+6	; 0x06
    43dc:	af 81       	ldd	r26, Y+7	; 0x07
    43de:	b8 85       	ldd	r27, Y+8	; 0x08
    43e0:	88 3d       	cpi	r24, 0xD8	; 216
    43e2:	23 e5       	ldi	r18, 0x53	; 83
    43e4:	92 07       	cpc	r25, r18
    43e6:	21 e0       	ldi	r18, 0x01	; 1
    43e8:	a2 07       	cpc	r26, r18
    43ea:	20 e0       	ldi	r18, 0x00	; 0
    43ec:	b2 07       	cpc	r27, r18
    43ee:	91 f4       	brne	.+36     	; 0x4414 <moveToPosition+0x80>

		moveToPosition(assembly1_GreenBase);
    43f0:	20 91 db 01 	lds	r18, 0x01DB
    43f4:	30 91 dc 01 	lds	r19, 0x01DC
    43f8:	40 91 dd 01 	lds	r20, 0x01DD
    43fc:	50 91 de 01 	lds	r21, 0x01DE
    4400:	60 91 df 01 	lds	r22, 0x01DF
    4404:	70 91 e0 01 	lds	r23, 0x01E0
    4408:	80 91 e1 01 	lds	r24, 0x01E1
    440c:	90 91 e2 01 	lds	r25, 0x01E2
    4410:	0e 94 ca 21 	call	0x4394	; 0x4394 <moveToPosition>
	}

	if(pos.y > currentYsteps){
    4414:	2d 81       	ldd	r18, Y+5	; 0x05
    4416:	3e 81       	ldd	r19, Y+6	; 0x06
    4418:	4f 81       	ldd	r20, Y+7	; 0x07
    441a:	58 85       	ldd	r21, Y+8	; 0x08
    441c:	80 91 13 02 	lds	r24, 0x0213
    4420:	90 91 14 02 	lds	r25, 0x0214
    4424:	a0 91 15 02 	lds	r26, 0x0215
    4428:	b0 91 16 02 	lds	r27, 0x0216
    442c:	82 17       	cp	r24, r18
    442e:	93 07       	cpc	r25, r19
    4430:	a4 07       	cpc	r26, r20
    4432:	b5 07       	cpc	r27, r21
    4434:	18 f5       	brcc	.+70     	; 0x447c <moveToPosition+0xe8>

		STEPPERMOTOR_steps(STEPPERY,(pos.y - currentYsteps),STEPPER_CCW);
    4436:	2d 81       	ldd	r18, Y+5	; 0x05
    4438:	3e 81       	ldd	r19, Y+6	; 0x06
    443a:	4f 81       	ldd	r20, Y+7	; 0x07
    443c:	58 85       	ldd	r21, Y+8	; 0x08
    443e:	80 91 13 02 	lds	r24, 0x0213
    4442:	90 91 14 02 	lds	r25, 0x0214
    4446:	a0 91 15 02 	lds	r26, 0x0215
    444a:	b0 91 16 02 	lds	r27, 0x0216
    444e:	28 1b       	sub	r18, r24
    4450:	39 0b       	sbc	r19, r25
    4452:	4a 0b       	sbc	r20, r26
    4454:	5b 0b       	sbc	r21, r27
    4456:	82 e0       	ldi	r24, 0x02	; 2
    4458:	ba 01       	movw	r22, r20
    445a:	a9 01       	movw	r20, r18
    445c:	21 e0       	ldi	r18, 0x01	; 1
    445e:	0e 94 4a 18 	call	0x3094	; 0x3094 <STEPPERMOTOR_steps>
		currentYsteps = pos.y;
    4462:	8d 81       	ldd	r24, Y+5	; 0x05
    4464:	9e 81       	ldd	r25, Y+6	; 0x06
    4466:	af 81       	ldd	r26, Y+7	; 0x07
    4468:	b8 85       	ldd	r27, Y+8	; 0x08
    446a:	80 93 13 02 	sts	0x0213, r24
    446e:	90 93 14 02 	sts	0x0214, r25
    4472:	a0 93 15 02 	sts	0x0215, r26
    4476:	b0 93 16 02 	sts	0x0216, r27
    447a:	33 c0       	rjmp	.+102    	; 0x44e2 <moveToPosition+0x14e>
	}
	else if(pos.y < currentYsteps){
    447c:	2d 81       	ldd	r18, Y+5	; 0x05
    447e:	3e 81       	ldd	r19, Y+6	; 0x06
    4480:	4f 81       	ldd	r20, Y+7	; 0x07
    4482:	58 85       	ldd	r21, Y+8	; 0x08
    4484:	80 91 13 02 	lds	r24, 0x0213
    4488:	90 91 14 02 	lds	r25, 0x0214
    448c:	a0 91 15 02 	lds	r26, 0x0215
    4490:	b0 91 16 02 	lds	r27, 0x0216
    4494:	28 17       	cp	r18, r24
    4496:	39 07       	cpc	r19, r25
    4498:	4a 07       	cpc	r20, r26
    449a:	5b 07       	cpc	r21, r27
    449c:	10 f5       	brcc	.+68     	; 0x44e2 <moveToPosition+0x14e>
		STEPPERMOTOR_steps(STEPPERY,(currentYsteps - pos.y),STEPPER_CW);
    449e:	20 91 13 02 	lds	r18, 0x0213
    44a2:	30 91 14 02 	lds	r19, 0x0214
    44a6:	40 91 15 02 	lds	r20, 0x0215
    44aa:	50 91 16 02 	lds	r21, 0x0216
    44ae:	8d 81       	ldd	r24, Y+5	; 0x05
    44b0:	9e 81       	ldd	r25, Y+6	; 0x06
    44b2:	af 81       	ldd	r26, Y+7	; 0x07
    44b4:	b8 85       	ldd	r27, Y+8	; 0x08
    44b6:	28 1b       	sub	r18, r24
    44b8:	39 0b       	sbc	r19, r25
    44ba:	4a 0b       	sbc	r20, r26
    44bc:	5b 0b       	sbc	r21, r27
    44be:	82 e0       	ldi	r24, 0x02	; 2
    44c0:	ba 01       	movw	r22, r20
    44c2:	a9 01       	movw	r20, r18
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	0e 94 4a 18 	call	0x3094	; 0x3094 <STEPPERMOTOR_steps>
		currentYsteps = pos.y;
    44ca:	8d 81       	ldd	r24, Y+5	; 0x05
    44cc:	9e 81       	ldd	r25, Y+6	; 0x06
    44ce:	af 81       	ldd	r26, Y+7	; 0x07
    44d0:	b8 85       	ldd	r27, Y+8	; 0x08
    44d2:	80 93 13 02 	sts	0x0213, r24
    44d6:	90 93 14 02 	sts	0x0214, r25
    44da:	a0 93 15 02 	sts	0x0215, r26
    44de:	b0 93 16 02 	sts	0x0216, r27
	}

	if(pos.x > currentXsteps){
    44e2:	29 81       	ldd	r18, Y+1	; 0x01
    44e4:	3a 81       	ldd	r19, Y+2	; 0x02
    44e6:	4b 81       	ldd	r20, Y+3	; 0x03
    44e8:	5c 81       	ldd	r21, Y+4	; 0x04
    44ea:	80 91 0f 02 	lds	r24, 0x020F
    44ee:	90 91 10 02 	lds	r25, 0x0210
    44f2:	a0 91 11 02 	lds	r26, 0x0211
    44f6:	b0 91 12 02 	lds	r27, 0x0212
    44fa:	82 17       	cp	r24, r18
    44fc:	93 07       	cpc	r25, r19
    44fe:	a4 07       	cpc	r26, r20
    4500:	b5 07       	cpc	r27, r21
    4502:	18 f5       	brcc	.+70     	; 0x454a <moveToPosition+0x1b6>

		STEPPERMOTOR_steps(STEPPERX,(pos.x - currentXsteps),STEPPER_CCW);
    4504:	29 81       	ldd	r18, Y+1	; 0x01
    4506:	3a 81       	ldd	r19, Y+2	; 0x02
    4508:	4b 81       	ldd	r20, Y+3	; 0x03
    450a:	5c 81       	ldd	r21, Y+4	; 0x04
    450c:	80 91 0f 02 	lds	r24, 0x020F
    4510:	90 91 10 02 	lds	r25, 0x0210
    4514:	a0 91 11 02 	lds	r26, 0x0211
    4518:	b0 91 12 02 	lds	r27, 0x0212
    451c:	28 1b       	sub	r18, r24
    451e:	39 0b       	sbc	r19, r25
    4520:	4a 0b       	sbc	r20, r26
    4522:	5b 0b       	sbc	r21, r27
    4524:	80 e0       	ldi	r24, 0x00	; 0
    4526:	ba 01       	movw	r22, r20
    4528:	a9 01       	movw	r20, r18
    452a:	21 e0       	ldi	r18, 0x01	; 1
    452c:	0e 94 4a 18 	call	0x3094	; 0x3094 <STEPPERMOTOR_steps>
		currentXsteps = pos.x;
    4530:	89 81       	ldd	r24, Y+1	; 0x01
    4532:	9a 81       	ldd	r25, Y+2	; 0x02
    4534:	ab 81       	ldd	r26, Y+3	; 0x03
    4536:	bc 81       	ldd	r27, Y+4	; 0x04
    4538:	80 93 0f 02 	sts	0x020F, r24
    453c:	90 93 10 02 	sts	0x0210, r25
    4540:	a0 93 11 02 	sts	0x0211, r26
    4544:	b0 93 12 02 	sts	0x0212, r27
    4548:	33 c0       	rjmp	.+102    	; 0x45b0 <moveToPosition+0x21c>
	}
	else if(pos.x < currentXsteps){
    454a:	29 81       	ldd	r18, Y+1	; 0x01
    454c:	3a 81       	ldd	r19, Y+2	; 0x02
    454e:	4b 81       	ldd	r20, Y+3	; 0x03
    4550:	5c 81       	ldd	r21, Y+4	; 0x04
    4552:	80 91 0f 02 	lds	r24, 0x020F
    4556:	90 91 10 02 	lds	r25, 0x0210
    455a:	a0 91 11 02 	lds	r26, 0x0211
    455e:	b0 91 12 02 	lds	r27, 0x0212
    4562:	28 17       	cp	r18, r24
    4564:	39 07       	cpc	r19, r25
    4566:	4a 07       	cpc	r20, r26
    4568:	5b 07       	cpc	r21, r27
    456a:	10 f5       	brcc	.+68     	; 0x45b0 <moveToPosition+0x21c>
		STEPPERMOTOR_steps(STEPPERX,(currentXsteps - pos.x),STEPPER_CW);
    456c:	20 91 0f 02 	lds	r18, 0x020F
    4570:	30 91 10 02 	lds	r19, 0x0210
    4574:	40 91 11 02 	lds	r20, 0x0211
    4578:	50 91 12 02 	lds	r21, 0x0212
    457c:	89 81       	ldd	r24, Y+1	; 0x01
    457e:	9a 81       	ldd	r25, Y+2	; 0x02
    4580:	ab 81       	ldd	r26, Y+3	; 0x03
    4582:	bc 81       	ldd	r27, Y+4	; 0x04
    4584:	28 1b       	sub	r18, r24
    4586:	39 0b       	sbc	r19, r25
    4588:	4a 0b       	sbc	r20, r26
    458a:	5b 0b       	sbc	r21, r27
    458c:	80 e0       	ldi	r24, 0x00	; 0
    458e:	ba 01       	movw	r22, r20
    4590:	a9 01       	movw	r20, r18
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	0e 94 4a 18 	call	0x3094	; 0x3094 <STEPPERMOTOR_steps>
		currentXsteps = pos.x;
    4598:	89 81       	ldd	r24, Y+1	; 0x01
    459a:	9a 81       	ldd	r25, Y+2	; 0x02
    459c:	ab 81       	ldd	r26, Y+3	; 0x03
    459e:	bc 81       	ldd	r27, Y+4	; 0x04
    45a0:	80 93 0f 02 	sts	0x020F, r24
    45a4:	90 93 10 02 	sts	0x0210, r25
    45a8:	a0 93 11 02 	sts	0x0211, r26
    45ac:	b0 93 12 02 	sts	0x0212, r27
	}
}
    45b0:	28 96       	adiw	r28, 0x08	; 8
    45b2:	0f b6       	in	r0, 0x3f	; 63
    45b4:	f8 94       	cli
    45b6:	de bf       	out	0x3e, r29	; 62
    45b8:	0f be       	out	0x3f, r0	; 63
    45ba:	cd bf       	out	0x3d, r28	; 61
    45bc:	cf 91       	pop	r28
    45be:	df 91       	pop	r29
    45c0:	08 95       	ret

000045c2 <pickUp>:

void pickUp(enum positons_steps posOfZ){
    45c2:	df 93       	push	r29
    45c4:	cf 93       	push	r28
    45c6:	cd b7       	in	r28, 0x3d	; 61
    45c8:	de b7       	in	r29, 0x3e	; 62
    45ca:	62 97       	sbiw	r28, 0x12	; 18
    45cc:	0f b6       	in	r0, 0x3f	; 63
    45ce:	f8 94       	cli
    45d0:	de bf       	out	0x3e, r29	; 62
    45d2:	0f be       	out	0x3f, r0	; 63
    45d4:	cd bf       	out	0x3d, r28	; 61
    45d6:	6f 87       	std	Y+15, r22	; 0x0f
    45d8:	78 8b       	std	Y+16, r23	; 0x10
    45da:	89 8b       	std	Y+17, r24	; 0x11
    45dc:	9a 8b       	std	Y+18, r25	; 0x12

	STEPPERMOTOR_steps(STEPPERZ,posOfZ,STEPPER_CW);
    45de:	2f 85       	ldd	r18, Y+15	; 0x0f
    45e0:	38 89       	ldd	r19, Y+16	; 0x10
    45e2:	49 89       	ldd	r20, Y+17	; 0x11
    45e4:	5a 89       	ldd	r21, Y+18	; 0x12
    45e6:	84 e0       	ldi	r24, 0x04	; 4
    45e8:	ba 01       	movw	r22, r20
    45ea:	a9 01       	movw	r20, r18
    45ec:	20 e0       	ldi	r18, 0x00	; 0
    45ee:	0e 94 4a 18 	call	0x3094	; 0x3094 <STEPPERMOTOR_steps>
	SERVO_angle(SERVO_GRIPPER,SERVO_GRIPPER_CLOSE);
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	66 e9       	ldi	r22, 0x96	; 150
    45f6:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <SERVO_angle>
    45fa:	80 e0       	ldi	r24, 0x00	; 0
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	aa ef       	ldi	r26, 0xFA	; 250
    4600:	b4 e4       	ldi	r27, 0x44	; 68
    4602:	8b 87       	std	Y+11, r24	; 0x0b
    4604:	9c 87       	std	Y+12, r25	; 0x0c
    4606:	ad 87       	std	Y+13, r26	; 0x0d
    4608:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    460a:	6b 85       	ldd	r22, Y+11	; 0x0b
    460c:	7c 85       	ldd	r23, Y+12	; 0x0c
    460e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4610:	9e 85       	ldd	r25, Y+14	; 0x0e
    4612:	20 e0       	ldi	r18, 0x00	; 0
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	4a e7       	ldi	r20, 0x7A	; 122
    4618:	55 e4       	ldi	r21, 0x45	; 69
    461a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    461e:	dc 01       	movw	r26, r24
    4620:	cb 01       	movw	r24, r22
    4622:	8f 83       	std	Y+7, r24	; 0x07
    4624:	98 87       	std	Y+8, r25	; 0x08
    4626:	a9 87       	std	Y+9, r26	; 0x09
    4628:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    462a:	6f 81       	ldd	r22, Y+7	; 0x07
    462c:	78 85       	ldd	r23, Y+8	; 0x08
    462e:	89 85       	ldd	r24, Y+9	; 0x09
    4630:	9a 85       	ldd	r25, Y+10	; 0x0a
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	40 e8       	ldi	r20, 0x80	; 128
    4638:	5f e3       	ldi	r21, 0x3F	; 63
    463a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    463e:	88 23       	and	r24, r24
    4640:	2c f4       	brge	.+10     	; 0x464c <pickUp+0x8a>
		__ticks = 1;
    4642:	81 e0       	ldi	r24, 0x01	; 1
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	9e 83       	std	Y+6, r25	; 0x06
    4648:	8d 83       	std	Y+5, r24	; 0x05
    464a:	3f c0       	rjmp	.+126    	; 0x46ca <pickUp+0x108>
	else if (__tmp > 65535)
    464c:	6f 81       	ldd	r22, Y+7	; 0x07
    464e:	78 85       	ldd	r23, Y+8	; 0x08
    4650:	89 85       	ldd	r24, Y+9	; 0x09
    4652:	9a 85       	ldd	r25, Y+10	; 0x0a
    4654:	20 e0       	ldi	r18, 0x00	; 0
    4656:	3f ef       	ldi	r19, 0xFF	; 255
    4658:	4f e7       	ldi	r20, 0x7F	; 127
    465a:	57 e4       	ldi	r21, 0x47	; 71
    465c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4660:	18 16       	cp	r1, r24
    4662:	4c f5       	brge	.+82     	; 0x46b6 <pickUp+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4664:	6b 85       	ldd	r22, Y+11	; 0x0b
    4666:	7c 85       	ldd	r23, Y+12	; 0x0c
    4668:	8d 85       	ldd	r24, Y+13	; 0x0d
    466a:	9e 85       	ldd	r25, Y+14	; 0x0e
    466c:	20 e0       	ldi	r18, 0x00	; 0
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	40 e2       	ldi	r20, 0x20	; 32
    4672:	51 e4       	ldi	r21, 0x41	; 65
    4674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4678:	dc 01       	movw	r26, r24
    467a:	cb 01       	movw	r24, r22
    467c:	bc 01       	movw	r22, r24
    467e:	cd 01       	movw	r24, r26
    4680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4684:	dc 01       	movw	r26, r24
    4686:	cb 01       	movw	r24, r22
    4688:	9e 83       	std	Y+6, r25	; 0x06
    468a:	8d 83       	std	Y+5, r24	; 0x05
    468c:	0f c0       	rjmp	.+30     	; 0x46ac <pickUp+0xea>
    468e:	80 e9       	ldi	r24, 0x90	; 144
    4690:	91 e0       	ldi	r25, 0x01	; 1
    4692:	9c 83       	std	Y+4, r25	; 0x04
    4694:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4696:	8b 81       	ldd	r24, Y+3	; 0x03
    4698:	9c 81       	ldd	r25, Y+4	; 0x04
    469a:	01 97       	sbiw	r24, 0x01	; 1
    469c:	f1 f7       	brne	.-4      	; 0x469a <pickUp+0xd8>
    469e:	9c 83       	std	Y+4, r25	; 0x04
    46a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46a2:	8d 81       	ldd	r24, Y+5	; 0x05
    46a4:	9e 81       	ldd	r25, Y+6	; 0x06
    46a6:	01 97       	sbiw	r24, 0x01	; 1
    46a8:	9e 83       	std	Y+6, r25	; 0x06
    46aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46ac:	8d 81       	ldd	r24, Y+5	; 0x05
    46ae:	9e 81       	ldd	r25, Y+6	; 0x06
    46b0:	00 97       	sbiw	r24, 0x00	; 0
    46b2:	69 f7       	brne	.-38     	; 0x468e <pickUp+0xcc>
    46b4:	14 c0       	rjmp	.+40     	; 0x46de <pickUp+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46b6:	6f 81       	ldd	r22, Y+7	; 0x07
    46b8:	78 85       	ldd	r23, Y+8	; 0x08
    46ba:	89 85       	ldd	r24, Y+9	; 0x09
    46bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    46be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c2:	dc 01       	movw	r26, r24
    46c4:	cb 01       	movw	r24, r22
    46c6:	9e 83       	std	Y+6, r25	; 0x06
    46c8:	8d 83       	std	Y+5, r24	; 0x05
    46ca:	8d 81       	ldd	r24, Y+5	; 0x05
    46cc:	9e 81       	ldd	r25, Y+6	; 0x06
    46ce:	9a 83       	std	Y+2, r25	; 0x02
    46d0:	89 83       	std	Y+1, r24	; 0x01
    46d2:	89 81       	ldd	r24, Y+1	; 0x01
    46d4:	9a 81       	ldd	r25, Y+2	; 0x02
    46d6:	01 97       	sbiw	r24, 0x01	; 1
    46d8:	f1 f7       	brne	.-4      	; 0x46d6 <pickUp+0x114>
    46da:	9a 83       	std	Y+2, r25	; 0x02
    46dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	STEPPERMOTOR_moveTillLS(STEPPERZ,STEPPER_CCW,LS_ZHOME);
    46de:	84 e0       	ldi	r24, 0x04	; 4
    46e0:	61 e0       	ldi	r22, 0x01	; 1
    46e2:	42 e0       	ldi	r20, 0x02	; 2
    46e4:	0e 94 51 19 	call	0x32a2	; 0x32a2 <STEPPERMOTOR_moveTillLS>
}
    46e8:	62 96       	adiw	r28, 0x12	; 18
    46ea:	0f b6       	in	r0, 0x3f	; 63
    46ec:	f8 94       	cli
    46ee:	de bf       	out	0x3e, r29	; 62
    46f0:	0f be       	out	0x3f, r0	; 63
    46f2:	cd bf       	out	0x3d, r28	; 61
    46f4:	cf 91       	pop	r28
    46f6:	df 91       	pop	r29
    46f8:	08 95       	ret

000046fa <release>:

void release(enum positons_steps posOfZ){
    46fa:	df 93       	push	r29
    46fc:	cf 93       	push	r28
    46fe:	cd b7       	in	r28, 0x3d	; 61
    4700:	de b7       	in	r29, 0x3e	; 62
    4702:	a0 97       	sbiw	r28, 0x20	; 32
    4704:	0f b6       	in	r0, 0x3f	; 63
    4706:	f8 94       	cli
    4708:	de bf       	out	0x3e, r29	; 62
    470a:	0f be       	out	0x3f, r0	; 63
    470c:	cd bf       	out	0x3d, r28	; 61
    470e:	6d 8f       	std	Y+29, r22	; 0x1d
    4710:	7e 8f       	std	Y+30, r23	; 0x1e
    4712:	8f 8f       	std	Y+31, r24	; 0x1f
    4714:	98 a3       	std	Y+32, r25	; 0x20

	STEPPERMOTOR_steps(STEPPERZ,posOfZ,STEPPER_CW);
    4716:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4718:	3e 8d       	ldd	r19, Y+30	; 0x1e
    471a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    471c:	58 a1       	ldd	r21, Y+32	; 0x20
    471e:	84 e0       	ldi	r24, 0x04	; 4
    4720:	ba 01       	movw	r22, r20
    4722:	a9 01       	movw	r20, r18
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	0e 94 4a 18 	call	0x3094	; 0x3094 <STEPPERMOTOR_steps>
    472a:	80 e0       	ldi	r24, 0x00	; 0
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	aa ef       	ldi	r26, 0xFA	; 250
    4730:	b4 e4       	ldi	r27, 0x44	; 68
    4732:	89 8f       	std	Y+25, r24	; 0x19
    4734:	9a 8f       	std	Y+26, r25	; 0x1a
    4736:	ab 8f       	std	Y+27, r26	; 0x1b
    4738:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    473a:	69 8d       	ldd	r22, Y+25	; 0x19
    473c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    473e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4740:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4742:	20 e0       	ldi	r18, 0x00	; 0
    4744:	30 e0       	ldi	r19, 0x00	; 0
    4746:	4a e7       	ldi	r20, 0x7A	; 122
    4748:	55 e4       	ldi	r21, 0x45	; 69
    474a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    474e:	dc 01       	movw	r26, r24
    4750:	cb 01       	movw	r24, r22
    4752:	8d 8b       	std	Y+21, r24	; 0x15
    4754:	9e 8b       	std	Y+22, r25	; 0x16
    4756:	af 8b       	std	Y+23, r26	; 0x17
    4758:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    475a:	6d 89       	ldd	r22, Y+21	; 0x15
    475c:	7e 89       	ldd	r23, Y+22	; 0x16
    475e:	8f 89       	ldd	r24, Y+23	; 0x17
    4760:	98 8d       	ldd	r25, Y+24	; 0x18
    4762:	20 e0       	ldi	r18, 0x00	; 0
    4764:	30 e0       	ldi	r19, 0x00	; 0
    4766:	40 e8       	ldi	r20, 0x80	; 128
    4768:	5f e3       	ldi	r21, 0x3F	; 63
    476a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    476e:	88 23       	and	r24, r24
    4770:	2c f4       	brge	.+10     	; 0x477c <release+0x82>
		__ticks = 1;
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	9c 8b       	std	Y+20, r25	; 0x14
    4778:	8b 8b       	std	Y+19, r24	; 0x13
    477a:	3f c0       	rjmp	.+126    	; 0x47fa <release+0x100>
	else if (__tmp > 65535)
    477c:	6d 89       	ldd	r22, Y+21	; 0x15
    477e:	7e 89       	ldd	r23, Y+22	; 0x16
    4780:	8f 89       	ldd	r24, Y+23	; 0x17
    4782:	98 8d       	ldd	r25, Y+24	; 0x18
    4784:	20 e0       	ldi	r18, 0x00	; 0
    4786:	3f ef       	ldi	r19, 0xFF	; 255
    4788:	4f e7       	ldi	r20, 0x7F	; 127
    478a:	57 e4       	ldi	r21, 0x47	; 71
    478c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4790:	18 16       	cp	r1, r24
    4792:	4c f5       	brge	.+82     	; 0x47e6 <release+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4794:	69 8d       	ldd	r22, Y+25	; 0x19
    4796:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4798:	8b 8d       	ldd	r24, Y+27	; 0x1b
    479a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    479c:	20 e0       	ldi	r18, 0x00	; 0
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	40 e2       	ldi	r20, 0x20	; 32
    47a2:	51 e4       	ldi	r21, 0x41	; 65
    47a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a8:	dc 01       	movw	r26, r24
    47aa:	cb 01       	movw	r24, r22
    47ac:	bc 01       	movw	r22, r24
    47ae:	cd 01       	movw	r24, r26
    47b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b4:	dc 01       	movw	r26, r24
    47b6:	cb 01       	movw	r24, r22
    47b8:	9c 8b       	std	Y+20, r25	; 0x14
    47ba:	8b 8b       	std	Y+19, r24	; 0x13
    47bc:	0f c0       	rjmp	.+30     	; 0x47dc <release+0xe2>
    47be:	80 e9       	ldi	r24, 0x90	; 144
    47c0:	91 e0       	ldi	r25, 0x01	; 1
    47c2:	9a 8b       	std	Y+18, r25	; 0x12
    47c4:	89 8b       	std	Y+17, r24	; 0x11
    47c6:	89 89       	ldd	r24, Y+17	; 0x11
    47c8:	9a 89       	ldd	r25, Y+18	; 0x12
    47ca:	01 97       	sbiw	r24, 0x01	; 1
    47cc:	f1 f7       	brne	.-4      	; 0x47ca <release+0xd0>
    47ce:	9a 8b       	std	Y+18, r25	; 0x12
    47d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47d2:	8b 89       	ldd	r24, Y+19	; 0x13
    47d4:	9c 89       	ldd	r25, Y+20	; 0x14
    47d6:	01 97       	sbiw	r24, 0x01	; 1
    47d8:	9c 8b       	std	Y+20, r25	; 0x14
    47da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47dc:	8b 89       	ldd	r24, Y+19	; 0x13
    47de:	9c 89       	ldd	r25, Y+20	; 0x14
    47e0:	00 97       	sbiw	r24, 0x00	; 0
    47e2:	69 f7       	brne	.-38     	; 0x47be <release+0xc4>
    47e4:	14 c0       	rjmp	.+40     	; 0x480e <release+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47e6:	6d 89       	ldd	r22, Y+21	; 0x15
    47e8:	7e 89       	ldd	r23, Y+22	; 0x16
    47ea:	8f 89       	ldd	r24, Y+23	; 0x17
    47ec:	98 8d       	ldd	r25, Y+24	; 0x18
    47ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f2:	dc 01       	movw	r26, r24
    47f4:	cb 01       	movw	r24, r22
    47f6:	9c 8b       	std	Y+20, r25	; 0x14
    47f8:	8b 8b       	std	Y+19, r24	; 0x13
    47fa:	8b 89       	ldd	r24, Y+19	; 0x13
    47fc:	9c 89       	ldd	r25, Y+20	; 0x14
    47fe:	98 8b       	std	Y+16, r25	; 0x10
    4800:	8f 87       	std	Y+15, r24	; 0x0f
    4802:	8f 85       	ldd	r24, Y+15	; 0x0f
    4804:	98 89       	ldd	r25, Y+16	; 0x10
    4806:	01 97       	sbiw	r24, 0x01	; 1
    4808:	f1 f7       	brne	.-4      	; 0x4806 <release+0x10c>
    480a:	98 8b       	std	Y+16, r25	; 0x10
    480c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);
	SERVO_angle(SERVO_GRIPPER,SERVO_GRIPPER_OPEN);
    480e:	81 e0       	ldi	r24, 0x01	; 1
    4810:	62 e3       	ldi	r22, 0x32	; 50
    4812:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <SERVO_angle>
    4816:	80 e0       	ldi	r24, 0x00	; 0
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	aa ef       	ldi	r26, 0xFA	; 250
    481c:	b4 e4       	ldi	r27, 0x44	; 68
    481e:	8b 87       	std	Y+11, r24	; 0x0b
    4820:	9c 87       	std	Y+12, r25	; 0x0c
    4822:	ad 87       	std	Y+13, r26	; 0x0d
    4824:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4826:	6b 85       	ldd	r22, Y+11	; 0x0b
    4828:	7c 85       	ldd	r23, Y+12	; 0x0c
    482a:	8d 85       	ldd	r24, Y+13	; 0x0d
    482c:	9e 85       	ldd	r25, Y+14	; 0x0e
    482e:	20 e0       	ldi	r18, 0x00	; 0
    4830:	30 e0       	ldi	r19, 0x00	; 0
    4832:	4a e7       	ldi	r20, 0x7A	; 122
    4834:	55 e4       	ldi	r21, 0x45	; 69
    4836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    483a:	dc 01       	movw	r26, r24
    483c:	cb 01       	movw	r24, r22
    483e:	8f 83       	std	Y+7, r24	; 0x07
    4840:	98 87       	std	Y+8, r25	; 0x08
    4842:	a9 87       	std	Y+9, r26	; 0x09
    4844:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4846:	6f 81       	ldd	r22, Y+7	; 0x07
    4848:	78 85       	ldd	r23, Y+8	; 0x08
    484a:	89 85       	ldd	r24, Y+9	; 0x09
    484c:	9a 85       	ldd	r25, Y+10	; 0x0a
    484e:	20 e0       	ldi	r18, 0x00	; 0
    4850:	30 e0       	ldi	r19, 0x00	; 0
    4852:	40 e8       	ldi	r20, 0x80	; 128
    4854:	5f e3       	ldi	r21, 0x3F	; 63
    4856:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    485a:	88 23       	and	r24, r24
    485c:	2c f4       	brge	.+10     	; 0x4868 <release+0x16e>
		__ticks = 1;
    485e:	81 e0       	ldi	r24, 0x01	; 1
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	9e 83       	std	Y+6, r25	; 0x06
    4864:	8d 83       	std	Y+5, r24	; 0x05
    4866:	3f c0       	rjmp	.+126    	; 0x48e6 <release+0x1ec>
	else if (__tmp > 65535)
    4868:	6f 81       	ldd	r22, Y+7	; 0x07
    486a:	78 85       	ldd	r23, Y+8	; 0x08
    486c:	89 85       	ldd	r24, Y+9	; 0x09
    486e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4870:	20 e0       	ldi	r18, 0x00	; 0
    4872:	3f ef       	ldi	r19, 0xFF	; 255
    4874:	4f e7       	ldi	r20, 0x7F	; 127
    4876:	57 e4       	ldi	r21, 0x47	; 71
    4878:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    487c:	18 16       	cp	r1, r24
    487e:	4c f5       	brge	.+82     	; 0x48d2 <release+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4880:	6b 85       	ldd	r22, Y+11	; 0x0b
    4882:	7c 85       	ldd	r23, Y+12	; 0x0c
    4884:	8d 85       	ldd	r24, Y+13	; 0x0d
    4886:	9e 85       	ldd	r25, Y+14	; 0x0e
    4888:	20 e0       	ldi	r18, 0x00	; 0
    488a:	30 e0       	ldi	r19, 0x00	; 0
    488c:	40 e2       	ldi	r20, 0x20	; 32
    488e:	51 e4       	ldi	r21, 0x41	; 65
    4890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4894:	dc 01       	movw	r26, r24
    4896:	cb 01       	movw	r24, r22
    4898:	bc 01       	movw	r22, r24
    489a:	cd 01       	movw	r24, r26
    489c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a0:	dc 01       	movw	r26, r24
    48a2:	cb 01       	movw	r24, r22
    48a4:	9e 83       	std	Y+6, r25	; 0x06
    48a6:	8d 83       	std	Y+5, r24	; 0x05
    48a8:	0f c0       	rjmp	.+30     	; 0x48c8 <release+0x1ce>
    48aa:	80 e9       	ldi	r24, 0x90	; 144
    48ac:	91 e0       	ldi	r25, 0x01	; 1
    48ae:	9c 83       	std	Y+4, r25	; 0x04
    48b0:	8b 83       	std	Y+3, r24	; 0x03
    48b2:	8b 81       	ldd	r24, Y+3	; 0x03
    48b4:	9c 81       	ldd	r25, Y+4	; 0x04
    48b6:	01 97       	sbiw	r24, 0x01	; 1
    48b8:	f1 f7       	brne	.-4      	; 0x48b6 <release+0x1bc>
    48ba:	9c 83       	std	Y+4, r25	; 0x04
    48bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48be:	8d 81       	ldd	r24, Y+5	; 0x05
    48c0:	9e 81       	ldd	r25, Y+6	; 0x06
    48c2:	01 97       	sbiw	r24, 0x01	; 1
    48c4:	9e 83       	std	Y+6, r25	; 0x06
    48c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48c8:	8d 81       	ldd	r24, Y+5	; 0x05
    48ca:	9e 81       	ldd	r25, Y+6	; 0x06
    48cc:	00 97       	sbiw	r24, 0x00	; 0
    48ce:	69 f7       	brne	.-38     	; 0x48aa <release+0x1b0>
    48d0:	14 c0       	rjmp	.+40     	; 0x48fa <release+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48d2:	6f 81       	ldd	r22, Y+7	; 0x07
    48d4:	78 85       	ldd	r23, Y+8	; 0x08
    48d6:	89 85       	ldd	r24, Y+9	; 0x09
    48d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    48da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48de:	dc 01       	movw	r26, r24
    48e0:	cb 01       	movw	r24, r22
    48e2:	9e 83       	std	Y+6, r25	; 0x06
    48e4:	8d 83       	std	Y+5, r24	; 0x05
    48e6:	8d 81       	ldd	r24, Y+5	; 0x05
    48e8:	9e 81       	ldd	r25, Y+6	; 0x06
    48ea:	9a 83       	std	Y+2, r25	; 0x02
    48ec:	89 83       	std	Y+1, r24	; 0x01
    48ee:	89 81       	ldd	r24, Y+1	; 0x01
    48f0:	9a 81       	ldd	r25, Y+2	; 0x02
    48f2:	01 97       	sbiw	r24, 0x01	; 1
    48f4:	f1 f7       	brne	.-4      	; 0x48f2 <release+0x1f8>
    48f6:	9a 83       	std	Y+2, r25	; 0x02
    48f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	STEPPERMOTOR_moveTillLS(STEPPERZ,STEPPER_CCW,LS_ZHOME);
    48fa:	84 e0       	ldi	r24, 0x04	; 4
    48fc:	61 e0       	ldi	r22, 0x01	; 1
    48fe:	42 e0       	ldi	r20, 0x02	; 2
    4900:	0e 94 51 19 	call	0x32a2	; 0x32a2 <STEPPERMOTOR_moveTillLS>
}
    4904:	a0 96       	adiw	r28, 0x20	; 32
    4906:	0f b6       	in	r0, 0x3f	; 63
    4908:	f8 94       	cli
    490a:	de bf       	out	0x3e, r29	; 62
    490c:	0f be       	out	0x3f, r0	; 63
    490e:	cd bf       	out	0x3d, r28	; 61
    4910:	cf 91       	pop	r28
    4912:	df 91       	pop	r29
    4914:	08 95       	ret

00004916 <main>:

#include"APP.h"



int main(void){
    4916:	df 93       	push	r29
    4918:	cf 93       	push	r28
    491a:	00 d0       	rcall	.+0      	; 0x491c <main+0x6>
    491c:	cd b7       	in	r28, 0x3d	; 61
    491e:	de b7       	in	r29, 0x3e	; 62

	APP_init();
    4920:	0e 94 3e 1a 	call	0x347c	; 0x347c <APP_init>
		 * 1- waiting for the object in feeding unit to arrive at the edge of conveyer to be assembled
		 * 2- assembly phase
		 * 3- storing phase
		 *  */

		switch(currentState){
    4924:	80 91 18 02 	lds	r24, 0x0218
    4928:	90 91 19 02 	lds	r25, 0x0219
    492c:	9a 83       	std	Y+2, r25	; 0x02
    492e:	89 83       	std	Y+1, r24	; 0x01
    4930:	89 81       	ldd	r24, Y+1	; 0x01
    4932:	9a 81       	ldd	r25, Y+2	; 0x02
    4934:	81 30       	cpi	r24, 0x01	; 1
    4936:	91 05       	cpc	r25, r1
    4938:	71 f0       	breq	.+28     	; 0x4956 <main+0x40>
    493a:	89 81       	ldd	r24, Y+1	; 0x01
    493c:	9a 81       	ldd	r25, Y+2	; 0x02
    493e:	81 30       	cpi	r24, 0x01	; 1
    4940:	91 05       	cpc	r25, r1
    4942:	30 f0       	brcs	.+12     	; 0x4950 <main+0x3a>
    4944:	89 81       	ldd	r24, Y+1	; 0x01
    4946:	9a 81       	ldd	r25, Y+2	; 0x02
    4948:	82 30       	cpi	r24, 0x02	; 2
    494a:	91 05       	cpc	r25, r1
    494c:	39 f0       	breq	.+14     	; 0x495c <main+0x46>
    494e:	ea cf       	rjmp	.-44     	; 0x4924 <main+0xe>

		case WAIT:

			APP_wait();
    4950:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <APP_wait>
    4954:	e7 cf       	rjmp	.-50     	; 0x4924 <main+0xe>
			break;

		case ASSEMBLY:

			APP_assembly();
    4956:	0e 94 1d 1b 	call	0x363a	; 0x363a <APP_assembly>
    495a:	e4 cf       	rjmp	.-56     	; 0x4924 <main+0xe>
			break;

		case STORE:

			APP_store();
    495c:	0e 94 50 1f 	call	0x3ea0	; 0x3ea0 <APP_store>
    4960:	e1 cf       	rjmp	.-62     	; 0x4924 <main+0xe>

00004962 <__mulsi3>:
    4962:	62 9f       	mul	r22, r18
    4964:	d0 01       	movw	r26, r0
    4966:	73 9f       	mul	r23, r19
    4968:	f0 01       	movw	r30, r0
    496a:	82 9f       	mul	r24, r18
    496c:	e0 0d       	add	r30, r0
    496e:	f1 1d       	adc	r31, r1
    4970:	64 9f       	mul	r22, r20
    4972:	e0 0d       	add	r30, r0
    4974:	f1 1d       	adc	r31, r1
    4976:	92 9f       	mul	r25, r18
    4978:	f0 0d       	add	r31, r0
    497a:	83 9f       	mul	r24, r19
    497c:	f0 0d       	add	r31, r0
    497e:	74 9f       	mul	r23, r20
    4980:	f0 0d       	add	r31, r0
    4982:	65 9f       	mul	r22, r21
    4984:	f0 0d       	add	r31, r0
    4986:	99 27       	eor	r25, r25
    4988:	72 9f       	mul	r23, r18
    498a:	b0 0d       	add	r27, r0
    498c:	e1 1d       	adc	r30, r1
    498e:	f9 1f       	adc	r31, r25
    4990:	63 9f       	mul	r22, r19
    4992:	b0 0d       	add	r27, r0
    4994:	e1 1d       	adc	r30, r1
    4996:	f9 1f       	adc	r31, r25
    4998:	bd 01       	movw	r22, r26
    499a:	cf 01       	movw	r24, r30
    499c:	11 24       	eor	r1, r1
    499e:	08 95       	ret

000049a0 <__udivmodsi4>:
    49a0:	a1 e2       	ldi	r26, 0x21	; 33
    49a2:	1a 2e       	mov	r1, r26
    49a4:	aa 1b       	sub	r26, r26
    49a6:	bb 1b       	sub	r27, r27
    49a8:	fd 01       	movw	r30, r26
    49aa:	0d c0       	rjmp	.+26     	; 0x49c6 <__udivmodsi4_ep>

000049ac <__udivmodsi4_loop>:
    49ac:	aa 1f       	adc	r26, r26
    49ae:	bb 1f       	adc	r27, r27
    49b0:	ee 1f       	adc	r30, r30
    49b2:	ff 1f       	adc	r31, r31
    49b4:	a2 17       	cp	r26, r18
    49b6:	b3 07       	cpc	r27, r19
    49b8:	e4 07       	cpc	r30, r20
    49ba:	f5 07       	cpc	r31, r21
    49bc:	20 f0       	brcs	.+8      	; 0x49c6 <__udivmodsi4_ep>
    49be:	a2 1b       	sub	r26, r18
    49c0:	b3 0b       	sbc	r27, r19
    49c2:	e4 0b       	sbc	r30, r20
    49c4:	f5 0b       	sbc	r31, r21

000049c6 <__udivmodsi4_ep>:
    49c6:	66 1f       	adc	r22, r22
    49c8:	77 1f       	adc	r23, r23
    49ca:	88 1f       	adc	r24, r24
    49cc:	99 1f       	adc	r25, r25
    49ce:	1a 94       	dec	r1
    49d0:	69 f7       	brne	.-38     	; 0x49ac <__udivmodsi4_loop>
    49d2:	60 95       	com	r22
    49d4:	70 95       	com	r23
    49d6:	80 95       	com	r24
    49d8:	90 95       	com	r25
    49da:	9b 01       	movw	r18, r22
    49dc:	ac 01       	movw	r20, r24
    49de:	bd 01       	movw	r22, r26
    49e0:	cf 01       	movw	r24, r30
    49e2:	08 95       	ret

000049e4 <__prologue_saves__>:
    49e4:	2f 92       	push	r2
    49e6:	3f 92       	push	r3
    49e8:	4f 92       	push	r4
    49ea:	5f 92       	push	r5
    49ec:	6f 92       	push	r6
    49ee:	7f 92       	push	r7
    49f0:	8f 92       	push	r8
    49f2:	9f 92       	push	r9
    49f4:	af 92       	push	r10
    49f6:	bf 92       	push	r11
    49f8:	cf 92       	push	r12
    49fa:	df 92       	push	r13
    49fc:	ef 92       	push	r14
    49fe:	ff 92       	push	r15
    4a00:	0f 93       	push	r16
    4a02:	1f 93       	push	r17
    4a04:	cf 93       	push	r28
    4a06:	df 93       	push	r29
    4a08:	cd b7       	in	r28, 0x3d	; 61
    4a0a:	de b7       	in	r29, 0x3e	; 62
    4a0c:	ca 1b       	sub	r28, r26
    4a0e:	db 0b       	sbc	r29, r27
    4a10:	0f b6       	in	r0, 0x3f	; 63
    4a12:	f8 94       	cli
    4a14:	de bf       	out	0x3e, r29	; 62
    4a16:	0f be       	out	0x3f, r0	; 63
    4a18:	cd bf       	out	0x3d, r28	; 61
    4a1a:	09 94       	ijmp

00004a1c <__epilogue_restores__>:
    4a1c:	2a 88       	ldd	r2, Y+18	; 0x12
    4a1e:	39 88       	ldd	r3, Y+17	; 0x11
    4a20:	48 88       	ldd	r4, Y+16	; 0x10
    4a22:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a24:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a26:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a28:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a2e:	b9 84       	ldd	r11, Y+9	; 0x09
    4a30:	c8 84       	ldd	r12, Y+8	; 0x08
    4a32:	df 80       	ldd	r13, Y+7	; 0x07
    4a34:	ee 80       	ldd	r14, Y+6	; 0x06
    4a36:	fd 80       	ldd	r15, Y+5	; 0x05
    4a38:	0c 81       	ldd	r16, Y+4	; 0x04
    4a3a:	1b 81       	ldd	r17, Y+3	; 0x03
    4a3c:	aa 81       	ldd	r26, Y+2	; 0x02
    4a3e:	b9 81       	ldd	r27, Y+1	; 0x01
    4a40:	ce 0f       	add	r28, r30
    4a42:	d1 1d       	adc	r29, r1
    4a44:	0f b6       	in	r0, 0x3f	; 63
    4a46:	f8 94       	cli
    4a48:	de bf       	out	0x3e, r29	; 62
    4a4a:	0f be       	out	0x3f, r0	; 63
    4a4c:	cd bf       	out	0x3d, r28	; 61
    4a4e:	ed 01       	movw	r28, r26
    4a50:	08 95       	ret

00004a52 <itoa>:
    4a52:	fb 01       	movw	r30, r22
    4a54:	9f 01       	movw	r18, r30
    4a56:	e8 94       	clt
    4a58:	42 30       	cpi	r20, 0x02	; 2
    4a5a:	c4 f0       	brlt	.+48     	; 0x4a8c <itoa+0x3a>
    4a5c:	45 32       	cpi	r20, 0x25	; 37
    4a5e:	b4 f4       	brge	.+44     	; 0x4a8c <itoa+0x3a>
    4a60:	4a 30       	cpi	r20, 0x0A	; 10
    4a62:	29 f4       	brne	.+10     	; 0x4a6e <itoa+0x1c>
    4a64:	97 fb       	bst	r25, 7
    4a66:	1e f4       	brtc	.+6      	; 0x4a6e <itoa+0x1c>
    4a68:	90 95       	com	r25
    4a6a:	81 95       	neg	r24
    4a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a6e:	64 2f       	mov	r22, r20
    4a70:	77 27       	eor	r23, r23
    4a72:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__udivmodhi4>
    4a76:	80 5d       	subi	r24, 0xD0	; 208
    4a78:	8a 33       	cpi	r24, 0x3A	; 58
    4a7a:	0c f0       	brlt	.+2      	; 0x4a7e <itoa+0x2c>
    4a7c:	89 5d       	subi	r24, 0xD9	; 217
    4a7e:	81 93       	st	Z+, r24
    4a80:	cb 01       	movw	r24, r22
    4a82:	00 97       	sbiw	r24, 0x00	; 0
    4a84:	a1 f7       	brne	.-24     	; 0x4a6e <itoa+0x1c>
    4a86:	16 f4       	brtc	.+4      	; 0x4a8c <itoa+0x3a>
    4a88:	5d e2       	ldi	r21, 0x2D	; 45
    4a8a:	51 93       	st	Z+, r21
    4a8c:	10 82       	st	Z, r1
    4a8e:	c9 01       	movw	r24, r18
    4a90:	0c 94 4a 25 	jmp	0x4a94	; 0x4a94 <strrev>

00004a94 <strrev>:
    4a94:	dc 01       	movw	r26, r24
    4a96:	fc 01       	movw	r30, r24
    4a98:	67 2f       	mov	r22, r23
    4a9a:	71 91       	ld	r23, Z+
    4a9c:	77 23       	and	r23, r23
    4a9e:	e1 f7       	brne	.-8      	; 0x4a98 <strrev+0x4>
    4aa0:	32 97       	sbiw	r30, 0x02	; 2
    4aa2:	04 c0       	rjmp	.+8      	; 0x4aac <strrev+0x18>
    4aa4:	7c 91       	ld	r23, X
    4aa6:	6d 93       	st	X+, r22
    4aa8:	70 83       	st	Z, r23
    4aaa:	62 91       	ld	r22, -Z
    4aac:	ae 17       	cp	r26, r30
    4aae:	bf 07       	cpc	r27, r31
    4ab0:	c8 f3       	brcs	.-14     	; 0x4aa4 <strrev+0x10>
    4ab2:	08 95       	ret

00004ab4 <__udivmodhi4>:
    4ab4:	aa 1b       	sub	r26, r26
    4ab6:	bb 1b       	sub	r27, r27
    4ab8:	51 e1       	ldi	r21, 0x11	; 17
    4aba:	07 c0       	rjmp	.+14     	; 0x4aca <__udivmodhi4_ep>

00004abc <__udivmodhi4_loop>:
    4abc:	aa 1f       	adc	r26, r26
    4abe:	bb 1f       	adc	r27, r27
    4ac0:	a6 17       	cp	r26, r22
    4ac2:	b7 07       	cpc	r27, r23
    4ac4:	10 f0       	brcs	.+4      	; 0x4aca <__udivmodhi4_ep>
    4ac6:	a6 1b       	sub	r26, r22
    4ac8:	b7 0b       	sbc	r27, r23

00004aca <__udivmodhi4_ep>:
    4aca:	88 1f       	adc	r24, r24
    4acc:	99 1f       	adc	r25, r25
    4ace:	5a 95       	dec	r21
    4ad0:	a9 f7       	brne	.-22     	; 0x4abc <__udivmodhi4_loop>
    4ad2:	80 95       	com	r24
    4ad4:	90 95       	com	r25
    4ad6:	bc 01       	movw	r22, r24
    4ad8:	cd 01       	movw	r24, r26
    4ada:	08 95       	ret

00004adc <_exit>:
    4adc:	f8 94       	cli

00004ade <__stop_program>:
    4ade:	ff cf       	rjmp	.-2      	; 0x4ade <__stop_program>
